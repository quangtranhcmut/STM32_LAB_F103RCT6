
RCT6_lab2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002eac  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08003090  08003090  00013090  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080030b4  080030b4  0002002c  2**0
                  CONTENTS
  4 .ARM          00000000  080030b4  080030b4  0002002c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080030b4  080030b4  0002002c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080030b4  080030b4  000130b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080030b8  080030b8  000130b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000002c  20000000  080030bc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000498  2000002c  080030e8  0002002c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004c4  080030e8  000204c4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020055  2**0
                  CONTENTS, READONLY
 13 .debug_info   00008d15  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001ea5  00000000  00000000  00028dad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000b28  00000000  00000000  0002ac58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000873  00000000  00000000  0002b780  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001a073  00000000  00000000  0002bff3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000dff4  00000000  00000000  00046066  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00094fa3  00000000  00000000  0005405a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002b78  00000000  00000000  000e9000  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  000ebb78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	2000002c 	.word	0x2000002c
 8000200:	00000000 	.word	0x00000000
 8000204:	08003078 	.word	0x08003078

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000030 	.word	0x20000030
 8000220:	08003078 	.word	0x08003078

08000224 <resetAllDigits>:
 *      Author: Thảo Quảng
 */

#include "7seg.h"
#include "timer.h"
void resetAllDigits(){
 8000224:	b580      	push	{r7, lr}
 8000226:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, GPIO_PIN_SET);
 8000228:	2201      	movs	r2, #1
 800022a:	2140      	movs	r1, #64	; 0x40
 800022c:	480a      	ldr	r0, [pc, #40]	; (8000258 <resetAllDigits+0x34>)
 800022e:	f001 fec2 	bl	8001fb6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_SET);
 8000232:	2201      	movs	r2, #1
 8000234:	2180      	movs	r1, #128	; 0x80
 8000236:	4808      	ldr	r0, [pc, #32]	; (8000258 <resetAllDigits+0x34>)
 8000238:	f001 febd 	bl	8001fb6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_SET);
 800023c:	2201      	movs	r2, #1
 800023e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000242:	4805      	ldr	r0, [pc, #20]	; (8000258 <resetAllDigits+0x34>)
 8000244:	f001 feb7 	bl	8001fb6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, GPIO_PIN_SET);
 8000248:	2201      	movs	r2, #1
 800024a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800024e:	4802      	ldr	r0, [pc, #8]	; (8000258 <resetAllDigits+0x34>)
 8000250:	f001 feb1 	bl	8001fb6 <HAL_GPIO_WritePin>
}
 8000254:	bf00      	nop
 8000256:	bd80      	pop	{r7, pc}
 8000258:	40010800 	.word	0x40010800

0800025c <setNum2Digit>:
			break;
		}
	}
}

void setNum2Digit(int a, int b, int c, int d, int e, int f, int g){
 800025c:	b580      	push	{r7, lr}
 800025e:	b084      	sub	sp, #16
 8000260:	af00      	add	r7, sp, #0
 8000262:	60f8      	str	r0, [r7, #12]
 8000264:	60b9      	str	r1, [r7, #8]
 8000266:	607a      	str	r2, [r7, #4]
 8000268:	603b      	str	r3, [r7, #0]
	HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, a);
 800026a:	68fb      	ldr	r3, [r7, #12]
 800026c:	b2db      	uxtb	r3, r3
 800026e:	461a      	mov	r2, r3
 8000270:	2101      	movs	r1, #1
 8000272:	4818      	ldr	r0, [pc, #96]	; (80002d4 <setNum2Digit+0x78>)
 8000274:	f001 fe9f 	bl	8001fb6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, b);
 8000278:	68bb      	ldr	r3, [r7, #8]
 800027a:	b2db      	uxtb	r3, r3
 800027c:	461a      	mov	r2, r3
 800027e:	2102      	movs	r1, #2
 8000280:	4814      	ldr	r0, [pc, #80]	; (80002d4 <setNum2Digit+0x78>)
 8000282:	f001 fe98 	bl	8001fb6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, c);
 8000286:	687b      	ldr	r3, [r7, #4]
 8000288:	b2db      	uxtb	r3, r3
 800028a:	461a      	mov	r2, r3
 800028c:	2110      	movs	r1, #16
 800028e:	4812      	ldr	r0, [pc, #72]	; (80002d8 <setNum2Digit+0x7c>)
 8000290:	f001 fe91 	bl	8001fb6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, d);
 8000294:	683b      	ldr	r3, [r7, #0]
 8000296:	b2db      	uxtb	r3, r3
 8000298:	461a      	mov	r2, r3
 800029a:	2110      	movs	r1, #16
 800029c:	480d      	ldr	r0, [pc, #52]	; (80002d4 <setNum2Digit+0x78>)
 800029e:	f001 fe8a 	bl	8001fb6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, e);
 80002a2:	69bb      	ldr	r3, [r7, #24]
 80002a4:	b2db      	uxtb	r3, r3
 80002a6:	461a      	mov	r2, r3
 80002a8:	2120      	movs	r1, #32
 80002aa:	480a      	ldr	r0, [pc, #40]	; (80002d4 <setNum2Digit+0x78>)
 80002ac:	f001 fe83 	bl	8001fb6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, f);
 80002b0:	69fb      	ldr	r3, [r7, #28]
 80002b2:	b2db      	uxtb	r3, r3
 80002b4:	461a      	mov	r2, r3
 80002b6:	2140      	movs	r1, #64	; 0x40
 80002b8:	4806      	ldr	r0, [pc, #24]	; (80002d4 <setNum2Digit+0x78>)
 80002ba:	f001 fe7c 	bl	8001fb6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, g);
 80002be:	6a3b      	ldr	r3, [r7, #32]
 80002c0:	b2db      	uxtb	r3, r3
 80002c2:	461a      	mov	r2, r3
 80002c4:	2180      	movs	r1, #128	; 0x80
 80002c6:	4803      	ldr	r0, [pc, #12]	; (80002d4 <setNum2Digit+0x78>)
 80002c8:	f001 fe75 	bl	8001fb6 <HAL_GPIO_WritePin>
}
 80002cc:	bf00      	nop
 80002ce:	3710      	adds	r7, #16
 80002d0:	46bd      	mov	sp, r7
 80002d2:	bd80      	pop	{r7, pc}
 80002d4:	40010c00 	.word	0x40010c00
 80002d8:	40010800 	.word	0x40010800

080002dc <display7SEG>:

void display7SEG(int num){
 80002dc:	b580      	push	{r7, lr}
 80002de:	b086      	sub	sp, #24
 80002e0:	af04      	add	r7, sp, #16
 80002e2:	6078      	str	r0, [r7, #4]
    switch(num) {
 80002e4:	687b      	ldr	r3, [r7, #4]
 80002e6:	2b09      	cmp	r3, #9
 80002e8:	f200 809a 	bhi.w	8000420 <display7SEG+0x144>
 80002ec:	a201      	add	r2, pc, #4	; (adr r2, 80002f4 <display7SEG+0x18>)
 80002ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80002f2:	bf00      	nop
 80002f4:	0800031d 	.word	0x0800031d
 80002f8:	08000337 	.word	0x08000337
 80002fc:	08000351 	.word	0x08000351
 8000300:	0800036b 	.word	0x0800036b
 8000304:	08000385 	.word	0x08000385
 8000308:	0800039f 	.word	0x0800039f
 800030c:	080003b9 	.word	0x080003b9
 8000310:	080003d3 	.word	0x080003d3
 8000314:	080003ed 	.word	0x080003ed
 8000318:	08000407 	.word	0x08000407
		case 0: {
			setNum2Digit(0,0,0,0,0,0,1);
 800031c:	2301      	movs	r3, #1
 800031e:	9302      	str	r3, [sp, #8]
 8000320:	2300      	movs	r3, #0
 8000322:	9301      	str	r3, [sp, #4]
 8000324:	2300      	movs	r3, #0
 8000326:	9300      	str	r3, [sp, #0]
 8000328:	2300      	movs	r3, #0
 800032a:	2200      	movs	r2, #0
 800032c:	2100      	movs	r1, #0
 800032e:	2000      	movs	r0, #0
 8000330:	f7ff ff94 	bl	800025c <setNum2Digit>
			break;
 8000334:	e075      	b.n	8000422 <display7SEG+0x146>
		}
		case 1: {
			setNum2Digit(1,0,0,1,1,1,1);
 8000336:	2301      	movs	r3, #1
 8000338:	9302      	str	r3, [sp, #8]
 800033a:	2301      	movs	r3, #1
 800033c:	9301      	str	r3, [sp, #4]
 800033e:	2301      	movs	r3, #1
 8000340:	9300      	str	r3, [sp, #0]
 8000342:	2301      	movs	r3, #1
 8000344:	2200      	movs	r2, #0
 8000346:	2100      	movs	r1, #0
 8000348:	2001      	movs	r0, #1
 800034a:	f7ff ff87 	bl	800025c <setNum2Digit>
			break;
 800034e:	e068      	b.n	8000422 <display7SEG+0x146>
		}
		case 2: {
			setNum2Digit(0,0,1,0,0,1,0);
 8000350:	2300      	movs	r3, #0
 8000352:	9302      	str	r3, [sp, #8]
 8000354:	2301      	movs	r3, #1
 8000356:	9301      	str	r3, [sp, #4]
 8000358:	2300      	movs	r3, #0
 800035a:	9300      	str	r3, [sp, #0]
 800035c:	2300      	movs	r3, #0
 800035e:	2201      	movs	r2, #1
 8000360:	2100      	movs	r1, #0
 8000362:	2000      	movs	r0, #0
 8000364:	f7ff ff7a 	bl	800025c <setNum2Digit>
			break;
 8000368:	e05b      	b.n	8000422 <display7SEG+0x146>
		}
		case 3: {
			setNum2Digit(0,0,0,0,1,1,0);
 800036a:	2300      	movs	r3, #0
 800036c:	9302      	str	r3, [sp, #8]
 800036e:	2301      	movs	r3, #1
 8000370:	9301      	str	r3, [sp, #4]
 8000372:	2301      	movs	r3, #1
 8000374:	9300      	str	r3, [sp, #0]
 8000376:	2300      	movs	r3, #0
 8000378:	2200      	movs	r2, #0
 800037a:	2100      	movs	r1, #0
 800037c:	2000      	movs	r0, #0
 800037e:	f7ff ff6d 	bl	800025c <setNum2Digit>
			break;
 8000382:	e04e      	b.n	8000422 <display7SEG+0x146>
		}
		case 4: {
			setNum2Digit(1,0,0,1,1,0,0);
 8000384:	2300      	movs	r3, #0
 8000386:	9302      	str	r3, [sp, #8]
 8000388:	2300      	movs	r3, #0
 800038a:	9301      	str	r3, [sp, #4]
 800038c:	2301      	movs	r3, #1
 800038e:	9300      	str	r3, [sp, #0]
 8000390:	2301      	movs	r3, #1
 8000392:	2200      	movs	r2, #0
 8000394:	2100      	movs	r1, #0
 8000396:	2001      	movs	r0, #1
 8000398:	f7ff ff60 	bl	800025c <setNum2Digit>
			break;
 800039c:	e041      	b.n	8000422 <display7SEG+0x146>
		}
		case 5: {
			setNum2Digit(0,1,0,0,1,0,0);
 800039e:	2300      	movs	r3, #0
 80003a0:	9302      	str	r3, [sp, #8]
 80003a2:	2300      	movs	r3, #0
 80003a4:	9301      	str	r3, [sp, #4]
 80003a6:	2301      	movs	r3, #1
 80003a8:	9300      	str	r3, [sp, #0]
 80003aa:	2300      	movs	r3, #0
 80003ac:	2200      	movs	r2, #0
 80003ae:	2101      	movs	r1, #1
 80003b0:	2000      	movs	r0, #0
 80003b2:	f7ff ff53 	bl	800025c <setNum2Digit>
			break;
 80003b6:	e034      	b.n	8000422 <display7SEG+0x146>
		}
		case 6: {
			setNum2Digit(0,1,0,0,0,0,0);
 80003b8:	2300      	movs	r3, #0
 80003ba:	9302      	str	r3, [sp, #8]
 80003bc:	2300      	movs	r3, #0
 80003be:	9301      	str	r3, [sp, #4]
 80003c0:	2300      	movs	r3, #0
 80003c2:	9300      	str	r3, [sp, #0]
 80003c4:	2300      	movs	r3, #0
 80003c6:	2200      	movs	r2, #0
 80003c8:	2101      	movs	r1, #1
 80003ca:	2000      	movs	r0, #0
 80003cc:	f7ff ff46 	bl	800025c <setNum2Digit>
			break;
 80003d0:	e027      	b.n	8000422 <display7SEG+0x146>
		}
		case 7: {
			setNum2Digit(0,0,0,1,1,1,1);
 80003d2:	2301      	movs	r3, #1
 80003d4:	9302      	str	r3, [sp, #8]
 80003d6:	2301      	movs	r3, #1
 80003d8:	9301      	str	r3, [sp, #4]
 80003da:	2301      	movs	r3, #1
 80003dc:	9300      	str	r3, [sp, #0]
 80003de:	2301      	movs	r3, #1
 80003e0:	2200      	movs	r2, #0
 80003e2:	2100      	movs	r1, #0
 80003e4:	2000      	movs	r0, #0
 80003e6:	f7ff ff39 	bl	800025c <setNum2Digit>
			break;
 80003ea:	e01a      	b.n	8000422 <display7SEG+0x146>
		}
		case 8: {
			setNum2Digit(0,0,0,0,0,0,0);
 80003ec:	2300      	movs	r3, #0
 80003ee:	9302      	str	r3, [sp, #8]
 80003f0:	2300      	movs	r3, #0
 80003f2:	9301      	str	r3, [sp, #4]
 80003f4:	2300      	movs	r3, #0
 80003f6:	9300      	str	r3, [sp, #0]
 80003f8:	2300      	movs	r3, #0
 80003fa:	2200      	movs	r2, #0
 80003fc:	2100      	movs	r1, #0
 80003fe:	2000      	movs	r0, #0
 8000400:	f7ff ff2c 	bl	800025c <setNum2Digit>
			break;
 8000404:	e00d      	b.n	8000422 <display7SEG+0x146>
		}
		case 9: {
			setNum2Digit(0,0,0,0,1,0,0);
 8000406:	2300      	movs	r3, #0
 8000408:	9302      	str	r3, [sp, #8]
 800040a:	2300      	movs	r3, #0
 800040c:	9301      	str	r3, [sp, #4]
 800040e:	2301      	movs	r3, #1
 8000410:	9300      	str	r3, [sp, #0]
 8000412:	2300      	movs	r3, #0
 8000414:	2200      	movs	r2, #0
 8000416:	2100      	movs	r1, #0
 8000418:	2000      	movs	r0, #0
 800041a:	f7ff ff1f 	bl	800025c <setNum2Digit>
			break;
 800041e:	e000      	b.n	8000422 <display7SEG+0x146>
		}
		default: {
			break;
 8000420:	bf00      	nop
		}
    }
}
 8000422:	bf00      	nop
 8000424:	3708      	adds	r7, #8
 8000426:	46bd      	mov	sp, r7
 8000428:	bd80      	pop	{r7, pc}
 800042a:	bf00      	nop

0800042c <update7SEG>:

//const int MAX_LED = 4;
//int index_led = 0;
int led_buffer[4] = {1, 2, 3, 4};
void update7SEG(int index) {
 800042c:	b580      	push	{r7, lr}
 800042e:	b082      	sub	sp, #8
 8000430:	af00      	add	r7, sp, #0
 8000432:	6078      	str	r0, [r7, #4]
    switch (index) {
 8000434:	687b      	ldr	r3, [r7, #4]
 8000436:	2b03      	cmp	r3, #3
 8000438:	d840      	bhi.n	80004bc <update7SEG+0x90>
 800043a:	a201      	add	r2, pc, #4	; (adr r2, 8000440 <update7SEG+0x14>)
 800043c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000440:	08000451 	.word	0x08000451
 8000444:	0800046b 	.word	0x0800046b
 8000448:	08000485 	.word	0x08000485
 800044c:	080004a1 	.word	0x080004a1
        case 0:{
            // Display the first 7 SEG with led_buffer[0]
        	resetAllDigits();
 8000450:	f7ff fee8 	bl	8000224 <resetAllDigits>
        	HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, GPIO_PIN_RESET);
 8000454:	2200      	movs	r2, #0
 8000456:	2140      	movs	r1, #64	; 0x40
 8000458:	481b      	ldr	r0, [pc, #108]	; (80004c8 <update7SEG+0x9c>)
 800045a:	f001 fdac 	bl	8001fb6 <HAL_GPIO_WritePin>
        	display7SEG(led_buffer[0]);
 800045e:	4b1b      	ldr	r3, [pc, #108]	; (80004cc <update7SEG+0xa0>)
 8000460:	681b      	ldr	r3, [r3, #0]
 8000462:	4618      	mov	r0, r3
 8000464:	f7ff ff3a 	bl	80002dc <display7SEG>
            break;
 8000468:	e029      	b.n	80004be <update7SEG+0x92>
        }
        case 1:{
            // Display the second 7 SEG with led_buffer[1]
        	resetAllDigits();
 800046a:	f7ff fedb 	bl	8000224 <resetAllDigits>
        	HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_RESET);
 800046e:	2200      	movs	r2, #0
 8000470:	2180      	movs	r1, #128	; 0x80
 8000472:	4815      	ldr	r0, [pc, #84]	; (80004c8 <update7SEG+0x9c>)
 8000474:	f001 fd9f 	bl	8001fb6 <HAL_GPIO_WritePin>
        	display7SEG(led_buffer[1]);
 8000478:	4b14      	ldr	r3, [pc, #80]	; (80004cc <update7SEG+0xa0>)
 800047a:	685b      	ldr	r3, [r3, #4]
 800047c:	4618      	mov	r0, r3
 800047e:	f7ff ff2d 	bl	80002dc <display7SEG>
            break;
 8000482:	e01c      	b.n	80004be <update7SEG+0x92>
        }
        case 2:{
            // Display the third 7 SEG with led_buffer[2]
        	resetAllDigits();
 8000484:	f7ff fece 	bl	8000224 <resetAllDigits>
        	HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_RESET);
 8000488:	2200      	movs	r2, #0
 800048a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800048e:	480e      	ldr	r0, [pc, #56]	; (80004c8 <update7SEG+0x9c>)
 8000490:	f001 fd91 	bl	8001fb6 <HAL_GPIO_WritePin>
        	display7SEG(led_buffer[2]);
 8000494:	4b0d      	ldr	r3, [pc, #52]	; (80004cc <update7SEG+0xa0>)
 8000496:	689b      	ldr	r3, [r3, #8]
 8000498:	4618      	mov	r0, r3
 800049a:	f7ff ff1f 	bl	80002dc <display7SEG>
            break;
 800049e:	e00e      	b.n	80004be <update7SEG+0x92>
        }
        case 3:{
            // Display the fourth 7 SEG with led_buffer[3]
        	resetAllDigits();
 80004a0:	f7ff fec0 	bl	8000224 <resetAllDigits>
        	HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, GPIO_PIN_RESET);
 80004a4:	2200      	movs	r2, #0
 80004a6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80004aa:	4807      	ldr	r0, [pc, #28]	; (80004c8 <update7SEG+0x9c>)
 80004ac:	f001 fd83 	bl	8001fb6 <HAL_GPIO_WritePin>
        	display7SEG(led_buffer[3]);
 80004b0:	4b06      	ldr	r3, [pc, #24]	; (80004cc <update7SEG+0xa0>)
 80004b2:	68db      	ldr	r3, [r3, #12]
 80004b4:	4618      	mov	r0, r3
 80004b6:	f7ff ff11 	bl	80002dc <display7SEG>
            break;
 80004ba:	e000      	b.n	80004be <update7SEG+0x92>
        }
        default:{
            break;
 80004bc:	bf00      	nop
        }
    }
}
 80004be:	bf00      	nop
 80004c0:	3708      	adds	r7, #8
 80004c2:	46bd      	mov	sp, r7
 80004c4:	bd80      	pop	{r7, pc}
 80004c6:	bf00      	nop
 80004c8:	40010800 	.word	0x40010800
 80004cc:	20000000 	.word	0x20000000

080004d0 <updateBufferXLine>:

void updateBufferXLine(int value) {
 80004d0:	b480      	push	{r7}
 80004d2:	b083      	sub	sp, #12
 80004d4:	af00      	add	r7, sp, #0
 80004d6:	6078      	str	r0, [r7, #4]
	led_buffer[0] = (value / 10) % 10;
 80004d8:	687b      	ldr	r3, [r7, #4]
 80004da:	4a13      	ldr	r2, [pc, #76]	; (8000528 <updateBufferXLine+0x58>)
 80004dc:	fb82 1203 	smull	r1, r2, r2, r3
 80004e0:	1092      	asrs	r2, r2, #2
 80004e2:	17db      	asrs	r3, r3, #31
 80004e4:	1ad1      	subs	r1, r2, r3
 80004e6:	4b10      	ldr	r3, [pc, #64]	; (8000528 <updateBufferXLine+0x58>)
 80004e8:	fb83 2301 	smull	r2, r3, r3, r1
 80004ec:	109a      	asrs	r2, r3, #2
 80004ee:	17cb      	asrs	r3, r1, #31
 80004f0:	1ad2      	subs	r2, r2, r3
 80004f2:	4613      	mov	r3, r2
 80004f4:	009b      	lsls	r3, r3, #2
 80004f6:	4413      	add	r3, r2
 80004f8:	005b      	lsls	r3, r3, #1
 80004fa:	1aca      	subs	r2, r1, r3
 80004fc:	4b0b      	ldr	r3, [pc, #44]	; (800052c <updateBufferXLine+0x5c>)
 80004fe:	601a      	str	r2, [r3, #0]
	led_buffer[1]= value % 10;
 8000500:	6879      	ldr	r1, [r7, #4]
 8000502:	4b09      	ldr	r3, [pc, #36]	; (8000528 <updateBufferXLine+0x58>)
 8000504:	fb83 2301 	smull	r2, r3, r3, r1
 8000508:	109a      	asrs	r2, r3, #2
 800050a:	17cb      	asrs	r3, r1, #31
 800050c:	1ad2      	subs	r2, r2, r3
 800050e:	4613      	mov	r3, r2
 8000510:	009b      	lsls	r3, r3, #2
 8000512:	4413      	add	r3, r2
 8000514:	005b      	lsls	r3, r3, #1
 8000516:	1aca      	subs	r2, r1, r3
 8000518:	4b04      	ldr	r3, [pc, #16]	; (800052c <updateBufferXLine+0x5c>)
 800051a:	605a      	str	r2, [r3, #4]
}
 800051c:	bf00      	nop
 800051e:	370c      	adds	r7, #12
 8000520:	46bd      	mov	sp, r7
 8000522:	bc80      	pop	{r7}
 8000524:	4770      	bx	lr
 8000526:	bf00      	nop
 8000528:	66666667 	.word	0x66666667
 800052c:	20000000 	.word	0x20000000

08000530 <updateBufferYLine>:
void updateBufferYLine(int value) {
 8000530:	b480      	push	{r7}
 8000532:	b083      	sub	sp, #12
 8000534:	af00      	add	r7, sp, #0
 8000536:	6078      	str	r0, [r7, #4]
	led_buffer[2] = (value / 10) % 10;
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	4a13      	ldr	r2, [pc, #76]	; (8000588 <updateBufferYLine+0x58>)
 800053c:	fb82 1203 	smull	r1, r2, r2, r3
 8000540:	1092      	asrs	r2, r2, #2
 8000542:	17db      	asrs	r3, r3, #31
 8000544:	1ad1      	subs	r1, r2, r3
 8000546:	4b10      	ldr	r3, [pc, #64]	; (8000588 <updateBufferYLine+0x58>)
 8000548:	fb83 2301 	smull	r2, r3, r3, r1
 800054c:	109a      	asrs	r2, r3, #2
 800054e:	17cb      	asrs	r3, r1, #31
 8000550:	1ad2      	subs	r2, r2, r3
 8000552:	4613      	mov	r3, r2
 8000554:	009b      	lsls	r3, r3, #2
 8000556:	4413      	add	r3, r2
 8000558:	005b      	lsls	r3, r3, #1
 800055a:	1aca      	subs	r2, r1, r3
 800055c:	4b0b      	ldr	r3, [pc, #44]	; (800058c <updateBufferYLine+0x5c>)
 800055e:	609a      	str	r2, [r3, #8]
	led_buffer[3]= value % 10;
 8000560:	6879      	ldr	r1, [r7, #4]
 8000562:	4b09      	ldr	r3, [pc, #36]	; (8000588 <updateBufferYLine+0x58>)
 8000564:	fb83 2301 	smull	r2, r3, r3, r1
 8000568:	109a      	asrs	r2, r3, #2
 800056a:	17cb      	asrs	r3, r1, #31
 800056c:	1ad2      	subs	r2, r2, r3
 800056e:	4613      	mov	r3, r2
 8000570:	009b      	lsls	r3, r3, #2
 8000572:	4413      	add	r3, r2
 8000574:	005b      	lsls	r3, r3, #1
 8000576:	1aca      	subs	r2, r1, r3
 8000578:	4b04      	ldr	r3, [pc, #16]	; (800058c <updateBufferYLine+0x5c>)
 800057a:	60da      	str	r2, [r3, #12]
}
 800057c:	bf00      	nop
 800057e:	370c      	adds	r7, #12
 8000580:	46bd      	mov	sp, r7
 8000582:	bc80      	pop	{r7}
 8000584:	4770      	bx	lr
 8000586:	bf00      	nop
 8000588:	66666667 	.word	0x66666667
 800058c:	20000000 	.word	0x20000000

08000590 <autoUpdate7Seg>:

int idx = 0;
void autoUpdate7Seg() {
 8000590:	b580      	push	{r7, lr}
 8000592:	af00      	add	r7, sp, #0
	update7SEG(idx++);
 8000594:	4b08      	ldr	r3, [pc, #32]	; (80005b8 <autoUpdate7Seg+0x28>)
 8000596:	681b      	ldr	r3, [r3, #0]
 8000598:	1c5a      	adds	r2, r3, #1
 800059a:	4907      	ldr	r1, [pc, #28]	; (80005b8 <autoUpdate7Seg+0x28>)
 800059c:	600a      	str	r2, [r1, #0]
 800059e:	4618      	mov	r0, r3
 80005a0:	f7ff ff44 	bl	800042c <update7SEG>
	if (idx >= 4){
 80005a4:	4b04      	ldr	r3, [pc, #16]	; (80005b8 <autoUpdate7Seg+0x28>)
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	2b03      	cmp	r3, #3
 80005aa:	dd02      	ble.n	80005b2 <autoUpdate7Seg+0x22>
		idx = 0;
 80005ac:	4b02      	ldr	r3, [pc, #8]	; (80005b8 <autoUpdate7Seg+0x28>)
 80005ae:	2200      	movs	r2, #0
 80005b0:	601a      	str	r2, [r3, #0]
	}
}
 80005b2:	bf00      	nop
 80005b4:	bd80      	pop	{r7, pc}
 80005b6:	bf00      	nop
 80005b8:	20000048 	.word	0x20000048

080005bc <fsm_automatic>:
#include "automatic.h"

int countdownX = 0;
int countdownY = 0;

void fsm_automatic() {
 80005bc:	b580      	push	{r7, lr}
 80005be:	af00      	add	r7, sp, #0
	switch (status) {
 80005c0:	4ba4      	ldr	r3, [pc, #656]	; (8000854 <fsm_automatic+0x298>)
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	3b01      	subs	r3, #1
 80005c6:	2b0d      	cmp	r3, #13
 80005c8:	f200 81a9 	bhi.w	800091e <fsm_automatic+0x362>
 80005cc:	a201      	add	r2, pc, #4	; (adr r2, 80005d4 <fsm_automatic+0x18>)
 80005ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005d2:	bf00      	nop
 80005d4:	0800060d 	.word	0x0800060d
 80005d8:	0800091f 	.word	0x0800091f
 80005dc:	0800091f 	.word	0x0800091f
 80005e0:	0800091f 	.word	0x0800091f
 80005e4:	0800091f 	.word	0x0800091f
 80005e8:	0800091f 	.word	0x0800091f
 80005ec:	0800091f 	.word	0x0800091f
 80005f0:	0800091f 	.word	0x0800091f
 80005f4:	0800091f 	.word	0x0800091f
 80005f8:	0800091f 	.word	0x0800091f
 80005fc:	0800065b 	.word	0x0800065b
 8000600:	08000701 	.word	0x08000701
 8000604:	080007b1 	.word	0x080007b1
 8000608:	08000871 	.word	0x08000871
		case AUTO: {
			if (1) {
				status = GREEN_RED;
 800060c:	4b91      	ldr	r3, [pc, #580]	; (8000854 <fsm_automatic+0x298>)
 800060e:	220b      	movs	r2, #11
 8000610:	601a      	str	r2, [r3, #0]
				countdownX = greenTime - 1;
 8000612:	4b91      	ldr	r3, [pc, #580]	; (8000858 <fsm_automatic+0x29c>)
 8000614:	681b      	ldr	r3, [r3, #0]
 8000616:	3b01      	subs	r3, #1
 8000618:	4a90      	ldr	r2, [pc, #576]	; (800085c <fsm_automatic+0x2a0>)
 800061a:	6013      	str	r3, [r2, #0]
				countdownY = redTime - 1;
 800061c:	4b90      	ldr	r3, [pc, #576]	; (8000860 <fsm_automatic+0x2a4>)
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	3b01      	subs	r3, #1
 8000622:	4a90      	ldr	r2, [pc, #576]	; (8000864 <fsm_automatic+0x2a8>)
 8000624:	6013      	str	r3, [r2, #0]
				updateBufferXLine(countdownX);
 8000626:	4b8d      	ldr	r3, [pc, #564]	; (800085c <fsm_automatic+0x2a0>)
 8000628:	681b      	ldr	r3, [r3, #0]
 800062a:	4618      	mov	r0, r3
 800062c:	f7ff ff50 	bl	80004d0 <updateBufferXLine>
				updateBufferYLine(countdownY);
 8000630:	4b8c      	ldr	r3, [pc, #560]	; (8000864 <fsm_automatic+0x2a8>)
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	4618      	mov	r0, r3
 8000636:	f7ff ff7b 	bl	8000530 <updateBufferYLine>
				setTimer(0, greenTime * 1000); // Timer 1
 800063a:	4b87      	ldr	r3, [pc, #540]	; (8000858 <fsm_automatic+0x29c>)
 800063c:	681b      	ldr	r3, [r3, #0]
 800063e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000642:	fb02 f303 	mul.w	r3, r2, r3
 8000646:	4619      	mov	r1, r3
 8000648:	2000      	movs	r0, #0
 800064a:	f000 ff69 	bl	8001520 <setTimer>
				setTimer(1, 1000);
 800064e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000652:	2001      	movs	r0, #1
 8000654:	f000 ff64 	bl	8001520 <setTimer>
			}
			break;
 8000658:	e16a      	b.n	8000930 <fsm_automatic+0x374>
		}
		case GREEN_RED: {
			trafficGreenRed();
 800065a:	f000 ffaf 	bl	80015bc <trafficGreenRed>
			if (timer_flag[0] == 1) {
 800065e:	4b82      	ldr	r3, [pc, #520]	; (8000868 <fsm_automatic+0x2ac>)
 8000660:	681b      	ldr	r3, [r3, #0]
 8000662:	2b01      	cmp	r3, #1
 8000664:	d111      	bne.n	800068a <fsm_automatic+0xce>
				status = AMBER_RED;
 8000666:	4b7b      	ldr	r3, [pc, #492]	; (8000854 <fsm_automatic+0x298>)
 8000668:	220c      	movs	r2, #12
 800066a:	601a      	str	r2, [r3, #0]
				setTimer(0, yellowTime * 1000); // Timer 1
 800066c:	4b7f      	ldr	r3, [pc, #508]	; (800086c <fsm_automatic+0x2b0>)
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000674:	fb02 f303 	mul.w	r3, r2, r3
 8000678:	4619      	mov	r1, r3
 800067a:	2000      	movs	r0, #0
 800067c:	f000 ff50 	bl	8001520 <setTimer>
				countdownX = yellowTime - 1;
 8000680:	4b7a      	ldr	r3, [pc, #488]	; (800086c <fsm_automatic+0x2b0>)
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	3b01      	subs	r3, #1
 8000686:	4a75      	ldr	r2, [pc, #468]	; (800085c <fsm_automatic+0x2a0>)
 8000688:	6013      	str	r3, [r2, #0]
			}
			if (timer_flag[1] == 1) {
 800068a:	4b77      	ldr	r3, [pc, #476]	; (8000868 <fsm_automatic+0x2ac>)
 800068c:	685b      	ldr	r3, [r3, #4]
 800068e:	2b01      	cmp	r3, #1
 8000690:	d118      	bne.n	80006c4 <fsm_automatic+0x108>
				//UPDATE DISPLAY
				updateBufferXLine(countdownX);
 8000692:	4b72      	ldr	r3, [pc, #456]	; (800085c <fsm_automatic+0x2a0>)
 8000694:	681b      	ldr	r3, [r3, #0]
 8000696:	4618      	mov	r0, r3
 8000698:	f7ff ff1a 	bl	80004d0 <updateBufferXLine>
				updateBufferYLine(countdownY);
 800069c:	4b71      	ldr	r3, [pc, #452]	; (8000864 <fsm_automatic+0x2a8>)
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	4618      	mov	r0, r3
 80006a2:	f7ff ff45 	bl	8000530 <updateBufferYLine>
				countdownX--;
 80006a6:	4b6d      	ldr	r3, [pc, #436]	; (800085c <fsm_automatic+0x2a0>)
 80006a8:	681b      	ldr	r3, [r3, #0]
 80006aa:	3b01      	subs	r3, #1
 80006ac:	4a6b      	ldr	r2, [pc, #428]	; (800085c <fsm_automatic+0x2a0>)
 80006ae:	6013      	str	r3, [r2, #0]
				countdownY--;
 80006b0:	4b6c      	ldr	r3, [pc, #432]	; (8000864 <fsm_automatic+0x2a8>)
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	3b01      	subs	r3, #1
 80006b6:	4a6b      	ldr	r2, [pc, #428]	; (8000864 <fsm_automatic+0x2a8>)
 80006b8:	6013      	str	r3, [r2, #0]
				setTimer(1, 1000); // Timer 2
 80006ba:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80006be:	2001      	movs	r0, #1
 80006c0:	f000 ff2e 	bl	8001520 <setTimer>
			}
			if (isButtonPressed(0)) {
 80006c4:	2000      	movs	r0, #0
 80006c6:	f000 f98d 	bl	80009e4 <isButtonPressed>
 80006ca:	4603      	mov	r3, r0
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d00a      	beq.n	80006e6 <fsm_automatic+0x12a>
//				Check button1_flag == 1, then reset button1_flag = 0
				status = MAN;
 80006d0:	4b60      	ldr	r3, [pc, #384]	; (8000854 <fsm_automatic+0x298>)
 80006d2:	2202      	movs	r2, #2
 80006d4:	601a      	str	r2, [r3, #0]
				setTimer(2, 10000); // Timer 3
 80006d6:	f242 7110 	movw	r1, #10000	; 0x2710
 80006da:	2002      	movs	r0, #2
 80006dc:	f000 ff20 	bl	8001520 <setTimer>
				clearTrafficLight();
 80006e0:	f001 f876 	bl	80017d0 <clearTrafficLight>
				break;
 80006e4:	e124      	b.n	8000930 <fsm_automatic+0x374>
			}
			if (isButtonPressed(1)) { // BTN2 pressed, reset button_flag[1]
 80006e6:	2001      	movs	r0, #1
 80006e8:	f000 f97c 	bl	80009e4 <isButtonPressed>
 80006ec:	4603      	mov	r3, r0
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	f040 8117 	bne.w	8000922 <fsm_automatic+0x366>
				break;
			}
			if (isButtonPressed(2)) { // BTN3 pressed, reset button_flag[2]
 80006f4:	2002      	movs	r0, #2
 80006f6:	f000 f975 	bl	80009e4 <isButtonPressed>
 80006fa:	4603      	mov	r3, r0
 80006fc:	2b00      	cmp	r3, #0
				break;
			}
			break;
 80006fe:	e117      	b.n	8000930 <fsm_automatic+0x374>
		}
		case AMBER_RED: {
			trafficYellowRed();
 8000700:	f000 ff80 	bl	8001604 <trafficYellowRed>
			if (timer_flag[0] == 1) {
 8000704:	4b58      	ldr	r3, [pc, #352]	; (8000868 <fsm_automatic+0x2ac>)
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	2b01      	cmp	r3, #1
 800070a:	d116      	bne.n	800073a <fsm_automatic+0x17e>
				status = RED_GREEN;
 800070c:	4b51      	ldr	r3, [pc, #324]	; (8000854 <fsm_automatic+0x298>)
 800070e:	220d      	movs	r2, #13
 8000710:	601a      	str	r2, [r3, #0]
				setTimer(0, greenTime * 1000); // Timer 1
 8000712:	4b51      	ldr	r3, [pc, #324]	; (8000858 <fsm_automatic+0x29c>)
 8000714:	681b      	ldr	r3, [r3, #0]
 8000716:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800071a:	fb02 f303 	mul.w	r3, r2, r3
 800071e:	4619      	mov	r1, r3
 8000720:	2000      	movs	r0, #0
 8000722:	f000 fefd 	bl	8001520 <setTimer>
				countdownX = redTime - 1;
 8000726:	4b4e      	ldr	r3, [pc, #312]	; (8000860 <fsm_automatic+0x2a4>)
 8000728:	681b      	ldr	r3, [r3, #0]
 800072a:	3b01      	subs	r3, #1
 800072c:	4a4b      	ldr	r2, [pc, #300]	; (800085c <fsm_automatic+0x2a0>)
 800072e:	6013      	str	r3, [r2, #0]
				countdownY = greenTime - 1;
 8000730:	4b49      	ldr	r3, [pc, #292]	; (8000858 <fsm_automatic+0x29c>)
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	3b01      	subs	r3, #1
 8000736:	4a4b      	ldr	r2, [pc, #300]	; (8000864 <fsm_automatic+0x2a8>)
 8000738:	6013      	str	r3, [r2, #0]
			}
			if (timer_flag[1] == 1) {
 800073a:	4b4b      	ldr	r3, [pc, #300]	; (8000868 <fsm_automatic+0x2ac>)
 800073c:	685b      	ldr	r3, [r3, #4]
 800073e:	2b01      	cmp	r3, #1
 8000740:	d118      	bne.n	8000774 <fsm_automatic+0x1b8>
				//UPDATE DISPLAY
				updateBufferXLine(countdownX);
 8000742:	4b46      	ldr	r3, [pc, #280]	; (800085c <fsm_automatic+0x2a0>)
 8000744:	681b      	ldr	r3, [r3, #0]
 8000746:	4618      	mov	r0, r3
 8000748:	f7ff fec2 	bl	80004d0 <updateBufferXLine>
				updateBufferYLine(countdownY);
 800074c:	4b45      	ldr	r3, [pc, #276]	; (8000864 <fsm_automatic+0x2a8>)
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	4618      	mov	r0, r3
 8000752:	f7ff feed 	bl	8000530 <updateBufferYLine>
				countdownX--;
 8000756:	4b41      	ldr	r3, [pc, #260]	; (800085c <fsm_automatic+0x2a0>)
 8000758:	681b      	ldr	r3, [r3, #0]
 800075a:	3b01      	subs	r3, #1
 800075c:	4a3f      	ldr	r2, [pc, #252]	; (800085c <fsm_automatic+0x2a0>)
 800075e:	6013      	str	r3, [r2, #0]
				countdownY--;
 8000760:	4b40      	ldr	r3, [pc, #256]	; (8000864 <fsm_automatic+0x2a8>)
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	3b01      	subs	r3, #1
 8000766:	4a3f      	ldr	r2, [pc, #252]	; (8000864 <fsm_automatic+0x2a8>)
 8000768:	6013      	str	r3, [r2, #0]
				setTimer(1, 1000); // Timer 2
 800076a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800076e:	2001      	movs	r0, #1
 8000770:	f000 fed6 	bl	8001520 <setTimer>
			}
			if (isButtonPressed(0)) {
 8000774:	2000      	movs	r0, #0
 8000776:	f000 f935 	bl	80009e4 <isButtonPressed>
 800077a:	4603      	mov	r3, r0
 800077c:	2b00      	cmp	r3, #0
 800077e:	d00a      	beq.n	8000796 <fsm_automatic+0x1da>
//				Check button1_flag == 1, then reset button1_flag = 0
				status = MAN;
 8000780:	4b34      	ldr	r3, [pc, #208]	; (8000854 <fsm_automatic+0x298>)
 8000782:	2202      	movs	r2, #2
 8000784:	601a      	str	r2, [r3, #0]
				setTimer(2, 10000); // Timer 3
 8000786:	f242 7110 	movw	r1, #10000	; 0x2710
 800078a:	2002      	movs	r0, #2
 800078c:	f000 fec8 	bl	8001520 <setTimer>
				clearTrafficLight();
 8000790:	f001 f81e 	bl	80017d0 <clearTrafficLight>
				break;
 8000794:	e0cc      	b.n	8000930 <fsm_automatic+0x374>
			}
			if (isButtonPressed(1)) { // BTN2 pressed, reset button_flag[1]
 8000796:	2001      	movs	r0, #1
 8000798:	f000 f924 	bl	80009e4 <isButtonPressed>
 800079c:	4603      	mov	r3, r0
 800079e:	2b00      	cmp	r3, #0
 80007a0:	f040 80c1 	bne.w	8000926 <fsm_automatic+0x36a>
				break;
			}
			if (isButtonPressed(2)) { // BTN3 pressed, reset button_flag[2]
 80007a4:	2002      	movs	r0, #2
 80007a6:	f000 f91d 	bl	80009e4 <isButtonPressed>
 80007aa:	4603      	mov	r3, r0
 80007ac:	2b00      	cmp	r3, #0
				break;
			}
			break;
 80007ae:	e0bf      	b.n	8000930 <fsm_automatic+0x374>
		}
		case RED_GREEN: {
			trafficRedGreen();
 80007b0:	f000 ff4c 	bl	800164c <trafficRedGreen>
			if (timer_flag[0] == 1) {
 80007b4:	4b2c      	ldr	r3, [pc, #176]	; (8000868 <fsm_automatic+0x2ac>)
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	2b01      	cmp	r3, #1
 80007ba:	d111      	bne.n	80007e0 <fsm_automatic+0x224>
				status = RED_AMBER;
 80007bc:	4b25      	ldr	r3, [pc, #148]	; (8000854 <fsm_automatic+0x298>)
 80007be:	220e      	movs	r2, #14
 80007c0:	601a      	str	r2, [r3, #0]
				setTimer(0, yellowTime * 1000); // Timer 1
 80007c2:	4b2a      	ldr	r3, [pc, #168]	; (800086c <fsm_automatic+0x2b0>)
 80007c4:	681b      	ldr	r3, [r3, #0]
 80007c6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80007ca:	fb02 f303 	mul.w	r3, r2, r3
 80007ce:	4619      	mov	r1, r3
 80007d0:	2000      	movs	r0, #0
 80007d2:	f000 fea5 	bl	8001520 <setTimer>
				countdownY = yellowTime - 1;
 80007d6:	4b25      	ldr	r3, [pc, #148]	; (800086c <fsm_automatic+0x2b0>)
 80007d8:	681b      	ldr	r3, [r3, #0]
 80007da:	3b01      	subs	r3, #1
 80007dc:	4a21      	ldr	r2, [pc, #132]	; (8000864 <fsm_automatic+0x2a8>)
 80007de:	6013      	str	r3, [r2, #0]
			}
			if (timer_flag[1] == 1) {
 80007e0:	4b21      	ldr	r3, [pc, #132]	; (8000868 <fsm_automatic+0x2ac>)
 80007e2:	685b      	ldr	r3, [r3, #4]
 80007e4:	2b01      	cmp	r3, #1
 80007e6:	d118      	bne.n	800081a <fsm_automatic+0x25e>
				//UPDATE DISPLAY
				updateBufferXLine(countdownX);
 80007e8:	4b1c      	ldr	r3, [pc, #112]	; (800085c <fsm_automatic+0x2a0>)
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	4618      	mov	r0, r3
 80007ee:	f7ff fe6f 	bl	80004d0 <updateBufferXLine>
				updateBufferYLine(countdownY);
 80007f2:	4b1c      	ldr	r3, [pc, #112]	; (8000864 <fsm_automatic+0x2a8>)
 80007f4:	681b      	ldr	r3, [r3, #0]
 80007f6:	4618      	mov	r0, r3
 80007f8:	f7ff fe9a 	bl	8000530 <updateBufferYLine>
				countdownX--;
 80007fc:	4b17      	ldr	r3, [pc, #92]	; (800085c <fsm_automatic+0x2a0>)
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	3b01      	subs	r3, #1
 8000802:	4a16      	ldr	r2, [pc, #88]	; (800085c <fsm_automatic+0x2a0>)
 8000804:	6013      	str	r3, [r2, #0]
				countdownY--;
 8000806:	4b17      	ldr	r3, [pc, #92]	; (8000864 <fsm_automatic+0x2a8>)
 8000808:	681b      	ldr	r3, [r3, #0]
 800080a:	3b01      	subs	r3, #1
 800080c:	4a15      	ldr	r2, [pc, #84]	; (8000864 <fsm_automatic+0x2a8>)
 800080e:	6013      	str	r3, [r2, #0]
				setTimer(1, 1000); // Timer 2
 8000810:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000814:	2001      	movs	r0, #1
 8000816:	f000 fe83 	bl	8001520 <setTimer>
			}
			if (isButtonPressed(0)) {
 800081a:	2000      	movs	r0, #0
 800081c:	f000 f8e2 	bl	80009e4 <isButtonPressed>
 8000820:	4603      	mov	r3, r0
 8000822:	2b00      	cmp	r3, #0
 8000824:	d00a      	beq.n	800083c <fsm_automatic+0x280>
//				Check button1_flag == 1, then reset button1_flag = 0
				status = MAN;
 8000826:	4b0b      	ldr	r3, [pc, #44]	; (8000854 <fsm_automatic+0x298>)
 8000828:	2202      	movs	r2, #2
 800082a:	601a      	str	r2, [r3, #0]
				setTimer(2, 10000); // Timer 3
 800082c:	f242 7110 	movw	r1, #10000	; 0x2710
 8000830:	2002      	movs	r0, #2
 8000832:	f000 fe75 	bl	8001520 <setTimer>
				clearTrafficLight();
 8000836:	f000 ffcb 	bl	80017d0 <clearTrafficLight>
				break;
 800083a:	e079      	b.n	8000930 <fsm_automatic+0x374>
			}
			if (isButtonPressed(1)) { // BTN2 pressed, reset button_flag[1]
 800083c:	2001      	movs	r0, #1
 800083e:	f000 f8d1 	bl	80009e4 <isButtonPressed>
 8000842:	4603      	mov	r3, r0
 8000844:	2b00      	cmp	r3, #0
 8000846:	d170      	bne.n	800092a <fsm_automatic+0x36e>
				break;
			}
			if (isButtonPressed(2)) { // BTN3 pressed, reset button_flag[2]
 8000848:	2002      	movs	r0, #2
 800084a:	f000 f8cb 	bl	80009e4 <isButtonPressed>
 800084e:	4603      	mov	r3, r0
 8000850:	2b00      	cmp	r3, #0
				break;
			}
			break;
 8000852:	e06d      	b.n	8000930 <fsm_automatic+0x374>
 8000854:	20000194 	.word	0x20000194
 8000858:	20000020 	.word	0x20000020
 800085c:	2000004c 	.word	0x2000004c
 8000860:	20000018 	.word	0x20000018
 8000864:	20000050 	.word	0x20000050
 8000868:	20000470 	.word	0x20000470
 800086c:	2000001c 	.word	0x2000001c
		}
		case RED_AMBER: {
			trafficRedYellow();
 8000870:	f000 ff10 	bl	8001694 <trafficRedYellow>
			if (timer_flag[0] == 1) {
 8000874:	4b2f      	ldr	r3, [pc, #188]	; (8000934 <fsm_automatic+0x378>)
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	2b01      	cmp	r3, #1
 800087a:	d116      	bne.n	80008aa <fsm_automatic+0x2ee>
				status = GREEN_RED;
 800087c:	4b2e      	ldr	r3, [pc, #184]	; (8000938 <fsm_automatic+0x37c>)
 800087e:	220b      	movs	r2, #11
 8000880:	601a      	str	r2, [r3, #0]
				setTimer(0, greenTime * 1000); // Timer 1
 8000882:	4b2e      	ldr	r3, [pc, #184]	; (800093c <fsm_automatic+0x380>)
 8000884:	681b      	ldr	r3, [r3, #0]
 8000886:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800088a:	fb02 f303 	mul.w	r3, r2, r3
 800088e:	4619      	mov	r1, r3
 8000890:	2000      	movs	r0, #0
 8000892:	f000 fe45 	bl	8001520 <setTimer>
				countdownX = greenTime - 1;
 8000896:	4b29      	ldr	r3, [pc, #164]	; (800093c <fsm_automatic+0x380>)
 8000898:	681b      	ldr	r3, [r3, #0]
 800089a:	3b01      	subs	r3, #1
 800089c:	4a28      	ldr	r2, [pc, #160]	; (8000940 <fsm_automatic+0x384>)
 800089e:	6013      	str	r3, [r2, #0]
				countdownY = redTime - 1;
 80008a0:	4b28      	ldr	r3, [pc, #160]	; (8000944 <fsm_automatic+0x388>)
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	3b01      	subs	r3, #1
 80008a6:	4a28      	ldr	r2, [pc, #160]	; (8000948 <fsm_automatic+0x38c>)
 80008a8:	6013      	str	r3, [r2, #0]
			}
			if (timer_flag[1] == 1) {
 80008aa:	4b22      	ldr	r3, [pc, #136]	; (8000934 <fsm_automatic+0x378>)
 80008ac:	685b      	ldr	r3, [r3, #4]
 80008ae:	2b01      	cmp	r3, #1
 80008b0:	d118      	bne.n	80008e4 <fsm_automatic+0x328>
				//UPDATE DISPLAY
				updateBufferXLine(countdownX);
 80008b2:	4b23      	ldr	r3, [pc, #140]	; (8000940 <fsm_automatic+0x384>)
 80008b4:	681b      	ldr	r3, [r3, #0]
 80008b6:	4618      	mov	r0, r3
 80008b8:	f7ff fe0a 	bl	80004d0 <updateBufferXLine>
				updateBufferYLine(countdownY);
 80008bc:	4b22      	ldr	r3, [pc, #136]	; (8000948 <fsm_automatic+0x38c>)
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	4618      	mov	r0, r3
 80008c2:	f7ff fe35 	bl	8000530 <updateBufferYLine>
				countdownX--;
 80008c6:	4b1e      	ldr	r3, [pc, #120]	; (8000940 <fsm_automatic+0x384>)
 80008c8:	681b      	ldr	r3, [r3, #0]
 80008ca:	3b01      	subs	r3, #1
 80008cc:	4a1c      	ldr	r2, [pc, #112]	; (8000940 <fsm_automatic+0x384>)
 80008ce:	6013      	str	r3, [r2, #0]
				countdownY--;
 80008d0:	4b1d      	ldr	r3, [pc, #116]	; (8000948 <fsm_automatic+0x38c>)
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	3b01      	subs	r3, #1
 80008d6:	4a1c      	ldr	r2, [pc, #112]	; (8000948 <fsm_automatic+0x38c>)
 80008d8:	6013      	str	r3, [r2, #0]
				setTimer(1, 1000); // Timer 2
 80008da:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80008de:	2001      	movs	r0, #1
 80008e0:	f000 fe1e 	bl	8001520 <setTimer>
			}
			if (isButtonPressed(0)) {
 80008e4:	2000      	movs	r0, #0
 80008e6:	f000 f87d 	bl	80009e4 <isButtonPressed>
 80008ea:	4603      	mov	r3, r0
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d00a      	beq.n	8000906 <fsm_automatic+0x34a>
//				Check button1_flag == 1, then reset button1_flag = 0
				status = MAN;
 80008f0:	4b11      	ldr	r3, [pc, #68]	; (8000938 <fsm_automatic+0x37c>)
 80008f2:	2202      	movs	r2, #2
 80008f4:	601a      	str	r2, [r3, #0]
				setTimer(2, 10000); // Timer 3
 80008f6:	f242 7110 	movw	r1, #10000	; 0x2710
 80008fa:	2002      	movs	r0, #2
 80008fc:	f000 fe10 	bl	8001520 <setTimer>
				clearTrafficLight();
 8000900:	f000 ff66 	bl	80017d0 <clearTrafficLight>
				break;
 8000904:	e014      	b.n	8000930 <fsm_automatic+0x374>
			}
			if (isButtonPressed(1)) { // BTN2 pressed, reset button_flag[1]
 8000906:	2001      	movs	r0, #1
 8000908:	f000 f86c 	bl	80009e4 <isButtonPressed>
 800090c:	4603      	mov	r3, r0
 800090e:	2b00      	cmp	r3, #0
 8000910:	d10d      	bne.n	800092e <fsm_automatic+0x372>
				break;
			}
			if (isButtonPressed(2)) { // BTN3 pressed, reset button_flag[2]
 8000912:	2002      	movs	r0, #2
 8000914:	f000 f866 	bl	80009e4 <isButtonPressed>
 8000918:	4603      	mov	r3, r0
 800091a:	2b00      	cmp	r3, #0
				break;
			}
			break;
 800091c:	e008      	b.n	8000930 <fsm_automatic+0x374>
		}
		default: {
			break;
 800091e:	bf00      	nop
 8000920:	e006      	b.n	8000930 <fsm_automatic+0x374>
				break;
 8000922:	bf00      	nop
 8000924:	e004      	b.n	8000930 <fsm_automatic+0x374>
				break;
 8000926:	bf00      	nop
 8000928:	e002      	b.n	8000930 <fsm_automatic+0x374>
				break;
 800092a:	bf00      	nop
 800092c:	e000      	b.n	8000930 <fsm_automatic+0x374>
				break;
 800092e:	bf00      	nop
		}
	}
}
 8000930:	bf00      	nop
 8000932:	bd80      	pop	{r7, pc}
 8000934:	20000470 	.word	0x20000470
 8000938:	20000194 	.word	0x20000194
 800093c:	20000020 	.word	0x20000020
 8000940:	2000004c 	.word	0x2000004c
 8000944:	20000018 	.word	0x20000018
 8000948:	20000050 	.word	0x20000050

0800094c <initButtons>:
int TimeOutForKeyPress[NUM_BUTTONS];
int button_pressed[NUM_BUTTONS];
int button_long_pressed[NUM_BUTTONS];
int button_flag[NUM_BUTTONS];

void initButtons() {
 800094c:	b480      	push	{r7}
 800094e:	b083      	sub	sp, #12
 8000950:	af00      	add	r7, sp, #0
    for (int i = 0; i < NUM_BUTTONS; i++) {
 8000952:	2300      	movs	r3, #0
 8000954:	607b      	str	r3, [r7, #4]
 8000956:	e02b      	b.n	80009b0 <initButtons+0x64>
        KeyReg0[i] = NORMAL_STATE;
 8000958:	4a1a      	ldr	r2, [pc, #104]	; (80009c4 <initButtons+0x78>)
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	2100      	movs	r1, #0
 800095e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        KeyReg1[i] = NORMAL_STATE;
 8000962:	4a19      	ldr	r2, [pc, #100]	; (80009c8 <initButtons+0x7c>)
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	2100      	movs	r1, #0
 8000968:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        KeyReg2[i] = NORMAL_STATE;
 800096c:	4a17      	ldr	r2, [pc, #92]	; (80009cc <initButtons+0x80>)
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	2100      	movs	r1, #0
 8000972:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        KeyReg3[i] = NORMAL_STATE;
 8000976:	4a16      	ldr	r2, [pc, #88]	; (80009d0 <initButtons+0x84>)
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	2100      	movs	r1, #0
 800097c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        TimeOutForKeyPress[i] = 500;
 8000980:	4a14      	ldr	r2, [pc, #80]	; (80009d4 <initButtons+0x88>)
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000988:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        button_pressed[i] = 0;
 800098c:	4a12      	ldr	r2, [pc, #72]	; (80009d8 <initButtons+0x8c>)
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	2100      	movs	r1, #0
 8000992:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        button_long_pressed[i] = 0;
 8000996:	4a11      	ldr	r2, [pc, #68]	; (80009dc <initButtons+0x90>)
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	2100      	movs	r1, #0
 800099c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        button_flag[i] = 0;
 80009a0:	4a0f      	ldr	r2, [pc, #60]	; (80009e0 <initButtons+0x94>)
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	2100      	movs	r1, #0
 80009a6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for (int i = 0; i < NUM_BUTTONS; i++) {
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	3301      	adds	r3, #1
 80009ae:	607b      	str	r3, [r7, #4]
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	2b09      	cmp	r3, #9
 80009b4:	ddd0      	ble.n	8000958 <initButtons+0xc>
    }
}
 80009b6:	bf00      	nop
 80009b8:	bf00      	nop
 80009ba:	370c      	adds	r7, #12
 80009bc:	46bd      	mov	sp, r7
 80009be:	bc80      	pop	{r7}
 80009c0:	4770      	bx	lr
 80009c2:	bf00      	nop
 80009c4:	20000054 	.word	0x20000054
 80009c8:	2000007c 	.word	0x2000007c
 80009cc:	200000a4 	.word	0x200000a4
 80009d0:	200000cc 	.word	0x200000cc
 80009d4:	200000f4 	.word	0x200000f4
 80009d8:	2000011c 	.word	0x2000011c
 80009dc:	20000144 	.word	0x20000144
 80009e0:	2000016c 	.word	0x2000016c

080009e4 <isButtonPressed>:

int isButtonPressed(int buttonIndex) {
 80009e4:	b480      	push	{r7}
 80009e6:	b083      	sub	sp, #12
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	6078      	str	r0, [r7, #4]
    if (button_flag[buttonIndex] == 1) {
 80009ec:	4a09      	ldr	r2, [pc, #36]	; (8000a14 <isButtonPressed+0x30>)
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009f4:	2b01      	cmp	r3, #1
 80009f6:	d106      	bne.n	8000a06 <isButtonPressed+0x22>
        button_flag[buttonIndex] = 0;
 80009f8:	4a06      	ldr	r2, [pc, #24]	; (8000a14 <isButtonPressed+0x30>)
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	2100      	movs	r1, #0
 80009fe:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        return 1;
 8000a02:	2301      	movs	r3, #1
 8000a04:	e000      	b.n	8000a08 <isButtonPressed+0x24>
    }
    return 0;
 8000a06:	2300      	movs	r3, #0
}
 8000a08:	4618      	mov	r0, r3
 8000a0a:	370c      	adds	r7, #12
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	bc80      	pop	{r7}
 8000a10:	4770      	bx	lr
 8000a12:	bf00      	nop
 8000a14:	2000016c 	.word	0x2000016c

08000a18 <getKeyInput>:

void subKeyProcess(int buttonIndex) {
    button_flag[buttonIndex] = 1;
}

void getKeyInput() {
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b082      	sub	sp, #8
 8000a1c:	af00      	add	r7, sp, #0
	for (int buttonIndex = 0; buttonIndex < NUM_BUTTONS; buttonIndex++) {
 8000a1e:	2300      	movs	r3, #0
 8000a20:	607b      	str	r3, [r7, #4]
 8000a22:	e012      	b.n	8000a4a <getKeyInput+0x32>
		KeyReg2[buttonIndex] = KeyReg1[buttonIndex];
 8000a24:	4a4b      	ldr	r2, [pc, #300]	; (8000b54 <getKeyInput+0x13c>)
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000a2c:	494a      	ldr	r1, [pc, #296]	; (8000b58 <getKeyInput+0x140>)
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		KeyReg1[buttonIndex] = KeyReg0[buttonIndex];
 8000a34:	4a49      	ldr	r2, [pc, #292]	; (8000b5c <getKeyInput+0x144>)
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000a3c:	4945      	ldr	r1, [pc, #276]	; (8000b54 <getKeyInput+0x13c>)
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (int buttonIndex = 0; buttonIndex < NUM_BUTTONS; buttonIndex++) {
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	3301      	adds	r3, #1
 8000a48:	607b      	str	r3, [r7, #4]
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	2b09      	cmp	r3, #9
 8000a4e:	dde9      	ble.n	8000a24 <getKeyInput+0xc>
	}

    KeyReg0[0] = HAL_GPIO_ReadPin(BTN1_GPIO_Port, BTN1_Pin);
 8000a50:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a54:	4842      	ldr	r0, [pc, #264]	; (8000b60 <getKeyInput+0x148>)
 8000a56:	f001 fa97 	bl	8001f88 <HAL_GPIO_ReadPin>
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	461a      	mov	r2, r3
 8000a5e:	4b3f      	ldr	r3, [pc, #252]	; (8000b5c <getKeyInput+0x144>)
 8000a60:	601a      	str	r2, [r3, #0]
    KeyReg0[1] = HAL_GPIO_ReadPin(BTN2_GPIO_Port, BTN2_Pin);
 8000a62:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a66:	483e      	ldr	r0, [pc, #248]	; (8000b60 <getKeyInput+0x148>)
 8000a68:	f001 fa8e 	bl	8001f88 <HAL_GPIO_ReadPin>
 8000a6c:	4603      	mov	r3, r0
 8000a6e:	461a      	mov	r2, r3
 8000a70:	4b3a      	ldr	r3, [pc, #232]	; (8000b5c <getKeyInput+0x144>)
 8000a72:	605a      	str	r2, [r3, #4]
    KeyReg0[2] = HAL_GPIO_ReadPin(BTN3_GPIO_Port, BTN3_Pin);
 8000a74:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a78:	4839      	ldr	r0, [pc, #228]	; (8000b60 <getKeyInput+0x148>)
 8000a7a:	f001 fa85 	bl	8001f88 <HAL_GPIO_ReadPin>
 8000a7e:	4603      	mov	r3, r0
 8000a80:	461a      	mov	r2, r3
 8000a82:	4b36      	ldr	r3, [pc, #216]	; (8000b5c <getKeyInput+0x144>)
 8000a84:	609a      	str	r2, [r3, #8]
//    KeyReg0[6] = HAL_GPIO_ReadPin(GPIO_Port, GPIO_Pin);
//	  KeyReg0[7] = HAL_GPIO_ReadPin(GPIO_Port, GPIO_Pin);
//    KeyReg0[8] = HAL_GPIO_ReadPin(GPIO_Port, GPIO_Pin);
//    KeyReg0[9] = HAL_GPIO_ReadPin(GPIO_Port, GPIO_Pin);

    for (int buttonIndex = 0; buttonIndex < NUM_BUTTONS; buttonIndex++) {
 8000a86:	2300      	movs	r3, #0
 8000a88:	603b      	str	r3, [r7, #0]
 8000a8a:	e05a      	b.n	8000b42 <getKeyInput+0x12a>
		if ((KeyReg1[buttonIndex] == KeyReg0[buttonIndex]) && (KeyReg1[buttonIndex] == KeyReg2[buttonIndex])) {
 8000a8c:	4a31      	ldr	r2, [pc, #196]	; (8000b54 <getKeyInput+0x13c>)
 8000a8e:	683b      	ldr	r3, [r7, #0]
 8000a90:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000a94:	4931      	ldr	r1, [pc, #196]	; (8000b5c <getKeyInput+0x144>)
 8000a96:	683b      	ldr	r3, [r7, #0]
 8000a98:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000a9c:	429a      	cmp	r2, r3
 8000a9e:	d14d      	bne.n	8000b3c <getKeyInput+0x124>
 8000aa0:	4a2c      	ldr	r2, [pc, #176]	; (8000b54 <getKeyInput+0x13c>)
 8000aa2:	683b      	ldr	r3, [r7, #0]
 8000aa4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000aa8:	492b      	ldr	r1, [pc, #172]	; (8000b58 <getKeyInput+0x140>)
 8000aaa:	683b      	ldr	r3, [r7, #0]
 8000aac:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000ab0:	429a      	cmp	r2, r3
 8000ab2:	d143      	bne.n	8000b3c <getKeyInput+0x124>
			if (KeyReg2[buttonIndex] != KeyReg3[buttonIndex]) {
 8000ab4:	4a28      	ldr	r2, [pc, #160]	; (8000b58 <getKeyInput+0x140>)
 8000ab6:	683b      	ldr	r3, [r7, #0]
 8000ab8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000abc:	4929      	ldr	r1, [pc, #164]	; (8000b64 <getKeyInput+0x14c>)
 8000abe:	683b      	ldr	r3, [r7, #0]
 8000ac0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000ac4:	429a      	cmp	r2, r3
 8000ac6:	d019      	beq.n	8000afc <getKeyInput+0xe4>
				KeyReg3[buttonIndex] = KeyReg2[buttonIndex];
 8000ac8:	4a23      	ldr	r2, [pc, #140]	; (8000b58 <getKeyInput+0x140>)
 8000aca:	683b      	ldr	r3, [r7, #0]
 8000acc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000ad0:	4924      	ldr	r1, [pc, #144]	; (8000b64 <getKeyInput+0x14c>)
 8000ad2:	683b      	ldr	r3, [r7, #0]
 8000ad4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				if (KeyReg3[buttonIndex] == PRESSED_STATE) {
 8000ad8:	4a22      	ldr	r2, [pc, #136]	; (8000b64 <getKeyInput+0x14c>)
 8000ada:	683b      	ldr	r3, [r7, #0]
 8000adc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ae0:	2b01      	cmp	r3, #1
 8000ae2:	d12b      	bne.n	8000b3c <getKeyInput+0x124>
					TimeOutForKeyPress[buttonIndex] = 500;
 8000ae4:	4a20      	ldr	r2, [pc, #128]	; (8000b68 <getKeyInput+0x150>)
 8000ae6:	683b      	ldr	r3, [r7, #0]
 8000ae8:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000aec:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					button_flag[buttonIndex] = 1;
 8000af0:	4a1e      	ldr	r2, [pc, #120]	; (8000b6c <getKeyInput+0x154>)
 8000af2:	683b      	ldr	r3, [r7, #0]
 8000af4:	2101      	movs	r1, #1
 8000af6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000afa:	e01f      	b.n	8000b3c <getKeyInput+0x124>
				}
			}
			else {
				TimeOutForKeyPress[buttonIndex]--;
 8000afc:	4a1a      	ldr	r2, [pc, #104]	; (8000b68 <getKeyInput+0x150>)
 8000afe:	683b      	ldr	r3, [r7, #0]
 8000b00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b04:	1e5a      	subs	r2, r3, #1
 8000b06:	4918      	ldr	r1, [pc, #96]	; (8000b68 <getKeyInput+0x150>)
 8000b08:	683b      	ldr	r3, [r7, #0]
 8000b0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				if (TimeOutForKeyPress[buttonIndex] == 0) {
 8000b0e:	4a16      	ldr	r2, [pc, #88]	; (8000b68 <getKeyInput+0x150>)
 8000b10:	683b      	ldr	r3, [r7, #0]
 8000b12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d110      	bne.n	8000b3c <getKeyInput+0x124>
					TimeOutForKeyPress[buttonIndex] = 500;
 8000b1a:	4a13      	ldr	r2, [pc, #76]	; (8000b68 <getKeyInput+0x150>)
 8000b1c:	683b      	ldr	r3, [r7, #0]
 8000b1e:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000b22:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					if (KeyReg3[buttonIndex] == PRESSED_STATE) {
 8000b26:	4a0f      	ldr	r2, [pc, #60]	; (8000b64 <getKeyInput+0x14c>)
 8000b28:	683b      	ldr	r3, [r7, #0]
 8000b2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b2e:	2b01      	cmp	r3, #1
 8000b30:	d104      	bne.n	8000b3c <getKeyInput+0x124>
						button_flag[buttonIndex] = 1;
 8000b32:	4a0e      	ldr	r2, [pc, #56]	; (8000b6c <getKeyInput+0x154>)
 8000b34:	683b      	ldr	r3, [r7, #0]
 8000b36:	2101      	movs	r1, #1
 8000b38:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for (int buttonIndex = 0; buttonIndex < NUM_BUTTONS; buttonIndex++) {
 8000b3c:	683b      	ldr	r3, [r7, #0]
 8000b3e:	3301      	adds	r3, #1
 8000b40:	603b      	str	r3, [r7, #0]
 8000b42:	683b      	ldr	r3, [r7, #0]
 8000b44:	2b09      	cmp	r3, #9
 8000b46:	dda1      	ble.n	8000a8c <getKeyInput+0x74>
					}
				}
			}
		}
    }
}
 8000b48:	bf00      	nop
 8000b4a:	bf00      	nop
 8000b4c:	3708      	adds	r7, #8
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bd80      	pop	{r7, pc}
 8000b52:	bf00      	nop
 8000b54:	2000007c 	.word	0x2000007c
 8000b58:	200000a4 	.word	0x200000a4
 8000b5c:	20000054 	.word	0x20000054
 8000b60:	40010c00 	.word	0x40010c00
 8000b64:	200000cc 	.word	0x200000cc
 8000b68:	200000f4 	.word	0x200000f4
 8000b6c:	2000016c 	.word	0x2000016c

08000b70 <fsm_setting>:
 */

#include "global.h"
int status = INIT;

void fsm_setting() {
 8000b70:	b580      	push	{r7, lr}
 8000b72:	af00      	add	r7, sp, #0
	switch(status) {
 8000b74:	4b24      	ldr	r3, [pc, #144]	; (8000c08 <fsm_setting+0x98>)
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	2b02      	cmp	r3, #2
 8000b7a:	d02c      	beq.n	8000bd6 <fsm_setting+0x66>
 8000b7c:	2b02      	cmp	r3, #2
 8000b7e:	dc3c      	bgt.n	8000bfa <fsm_setting+0x8a>
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d002      	beq.n	8000b8a <fsm_setting+0x1a>
 8000b84:	2b01      	cmp	r3, #1
 8000b86:	d004      	beq.n	8000b92 <fsm_setting+0x22>
				break;
			}
			break;
		}
		default: {
			break;
 8000b88:	e037      	b.n	8000bfa <fsm_setting+0x8a>
				status = AUTO;
 8000b8a:	4b1f      	ldr	r3, [pc, #124]	; (8000c08 <fsm_setting+0x98>)
 8000b8c:	2201      	movs	r2, #1
 8000b8e:	601a      	str	r2, [r3, #0]
			break;
 8000b90:	e038      	b.n	8000c04 <fsm_setting+0x94>
			if (isButtonPressed(0)) {
 8000b92:	2000      	movs	r0, #0
 8000b94:	f7ff ff26 	bl	80009e4 <isButtonPressed>
 8000b98:	4603      	mov	r3, r0
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d00f      	beq.n	8000bbe <fsm_setting+0x4e>
				status = MAN;
 8000b9e:	4b1a      	ldr	r3, [pc, #104]	; (8000c08 <fsm_setting+0x98>)
 8000ba0:	2202      	movs	r2, #2
 8000ba2:	601a      	str	r2, [r3, #0]
				setTimer(2, 10000); // Timer 3
 8000ba4:	f242 7110 	movw	r1, #10000	; 0x2710
 8000ba8:	2002      	movs	r0, #2
 8000baa:	f000 fcb9 	bl	8001520 <setTimer>
				setTimer(3, 500); // Timer 4
 8000bae:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000bb2:	2003      	movs	r0, #3
 8000bb4:	f000 fcb4 	bl	8001520 <setTimer>
				clearTrafficLight();
 8000bb8:	f000 fe0a 	bl	80017d0 <clearTrafficLight>
				break;
 8000bbc:	e022      	b.n	8000c04 <fsm_setting+0x94>
			if (isButtonPressed(1)) { // BTN2 pressed, reset button_flag[1]
 8000bbe:	2001      	movs	r0, #1
 8000bc0:	f7ff ff10 	bl	80009e4 <isButtonPressed>
 8000bc4:	4603      	mov	r3, r0
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d119      	bne.n	8000bfe <fsm_setting+0x8e>
			if (isButtonPressed(2)) { // BTN3 pressed, reset button_flag[2]
 8000bca:	2002      	movs	r0, #2
 8000bcc:	f7ff ff0a 	bl	80009e4 <isButtonPressed>
 8000bd0:	4603      	mov	r3, r0
 8000bd2:	2b00      	cmp	r3, #0
			break;
 8000bd4:	e016      	b.n	8000c04 <fsm_setting+0x94>
			if (isButtonPressed(2)) {
 8000bd6:	2002      	movs	r0, #2
 8000bd8:	f7ff ff04 	bl	80009e4 <isButtonPressed>
 8000bdc:	4603      	mov	r3, r0
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d003      	beq.n	8000bea <fsm_setting+0x7a>
				status = AUTO;
 8000be2:	4b09      	ldr	r3, [pc, #36]	; (8000c08 <fsm_setting+0x98>)
 8000be4:	2201      	movs	r2, #1
 8000be6:	601a      	str	r2, [r3, #0]
				break;
 8000be8:	e00c      	b.n	8000c04 <fsm_setting+0x94>
			if (timer_flag[2] == 1) {
 8000bea:	4b08      	ldr	r3, [pc, #32]	; (8000c0c <fsm_setting+0x9c>)
 8000bec:	689b      	ldr	r3, [r3, #8]
 8000bee:	2b01      	cmp	r3, #1
 8000bf0:	d107      	bne.n	8000c02 <fsm_setting+0x92>
				status = AUTO;
 8000bf2:	4b05      	ldr	r3, [pc, #20]	; (8000c08 <fsm_setting+0x98>)
 8000bf4:	2201      	movs	r2, #1
 8000bf6:	601a      	str	r2, [r3, #0]
				break;
 8000bf8:	e004      	b.n	8000c04 <fsm_setting+0x94>
			break;
 8000bfa:	bf00      	nop
 8000bfc:	e002      	b.n	8000c04 <fsm_setting+0x94>
				break;
 8000bfe:	bf00      	nop
 8000c00:	e000      	b.n	8000c04 <fsm_setting+0x94>
			break;
 8000c02:	bf00      	nop
		}
	}
}
 8000c04:	bf00      	nop
 8000c06:	bd80      	pop	{r7, pc}
 8000c08:	20000194 	.word	0x20000194
 8000c0c:	20000470 	.word	0x20000470

08000c10 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c14:	f000 feb4 	bl	8001980 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c18:	f000 f83e 	bl	8000c98 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c1c:	f000 f8c4 	bl	8000da8 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000c20:	f000 f876 	bl	8000d10 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000c24:	4814      	ldr	r0, [pc, #80]	; (8000c78 <main+0x68>)
 8000c26:	f001 fe25 	bl	8002874 <HAL_TIM_Base_Start_IT>
  SCH_Add_Task(initButtons, 	100, 0);
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	2164      	movs	r1, #100	; 0x64
 8000c2e:	4813      	ldr	r0, [pc, #76]	; (8000c7c <main+0x6c>)
 8000c30:	f000 fb38 	bl	80012a4 <SCH_Add_Task>
//  SCH_Add_Task(timerRun, 		100, 1);
  SCH_Add_Task(getKeyInput, 	100, 1);
 8000c34:	2201      	movs	r2, #1
 8000c36:	2164      	movs	r1, #100	; 0x64
 8000c38:	4811      	ldr	r0, [pc, #68]	; (8000c80 <main+0x70>)
 8000c3a:	f000 fb33 	bl	80012a4 <SCH_Add_Task>
  SCH_Add_Task(autoUpdate7Seg, 	100, 5);
 8000c3e:	2205      	movs	r2, #5
 8000c40:	2164      	movs	r1, #100	; 0x64
 8000c42:	4810      	ldr	r0, [pc, #64]	; (8000c84 <main+0x74>)
 8000c44:	f000 fb2e 	bl	80012a4 <SCH_Add_Task>
  SCH_Add_Task(blinkDot, 		100, 1000);
 8000c48:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000c4c:	2164      	movs	r1, #100	; 0x64
 8000c4e:	480e      	ldr	r0, [pc, #56]	; (8000c88 <main+0x78>)
 8000c50:	f000 fb28 	bl	80012a4 <SCH_Add_Task>
  SCH_Add_Task(fsm_automatic, 	100, 1);
 8000c54:	2201      	movs	r2, #1
 8000c56:	2164      	movs	r1, #100	; 0x64
 8000c58:	480c      	ldr	r0, [pc, #48]	; (8000c8c <main+0x7c>)
 8000c5a:	f000 fb23 	bl	80012a4 <SCH_Add_Task>
  SCH_Add_Task(fsm_manual, 		100, 1);
 8000c5e:	2201      	movs	r2, #1
 8000c60:	2164      	movs	r1, #100	; 0x64
 8000c62:	480b      	ldr	r0, [pc, #44]	; (8000c90 <main+0x80>)
 8000c64:	f000 fb1e 	bl	80012a4 <SCH_Add_Task>
  SCH_Add_Task(fsm_setting, 	100, 1);
 8000c68:	2201      	movs	r2, #1
 8000c6a:	2164      	movs	r1, #100	; 0x64
 8000c6c:	4809      	ldr	r0, [pc, #36]	; (8000c94 <main+0x84>)
 8000c6e:	f000 fb19 	bl	80012a4 <SCH_Add_Task>
//	  fsm_setting();
//	  if (timer_flag[4] == 1) {
//		  setTimer(4, 1000);
//		  HAL_GPIO_TogglePin(LED7_GPIO_Port, LED7_Pin);
//	  }
	  SCH_Dispatch_Tasks();
 8000c72:	f000 fb57 	bl	8001324 <SCH_Dispatch_Tasks>
 8000c76:	e7fc      	b.n	8000c72 <main+0x62>
 8000c78:	20000198 	.word	0x20000198
 8000c7c:	0800094d 	.word	0x0800094d
 8000c80:	08000a19 	.word	0x08000a19
 8000c84:	08000591 	.word	0x08000591
 8000c88:	08001921 	.word	0x08001921
 8000c8c:	080005bd 	.word	0x080005bd
 8000c90:	08000ed1 	.word	0x08000ed1
 8000c94:	08000b71 	.word	0x08000b71

08000c98 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b090      	sub	sp, #64	; 0x40
 8000c9c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c9e:	f107 0318 	add.w	r3, r7, #24
 8000ca2:	2228      	movs	r2, #40	; 0x28
 8000ca4:	2100      	movs	r1, #0
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	f002 f9ba 	bl	8003020 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000cac:	1d3b      	adds	r3, r7, #4
 8000cae:	2200      	movs	r2, #0
 8000cb0:	601a      	str	r2, [r3, #0]
 8000cb2:	605a      	str	r2, [r3, #4]
 8000cb4:	609a      	str	r2, [r3, #8]
 8000cb6:	60da      	str	r2, [r3, #12]
 8000cb8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000cba:	2302      	movs	r3, #2
 8000cbc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000cbe:	2301      	movs	r3, #1
 8000cc0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000cc2:	2310      	movs	r3, #16
 8000cc4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000cca:	f107 0318 	add.w	r3, r7, #24
 8000cce:	4618      	mov	r0, r3
 8000cd0:	f001 f9a2 	bl	8002018 <HAL_RCC_OscConfig>
 8000cd4:	4603      	mov	r3, r0
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d001      	beq.n	8000cde <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000cda:	f000 f8f3 	bl	8000ec4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000cde:	230f      	movs	r3, #15
 8000ce0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000cea:	2300      	movs	r3, #0
 8000cec:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000cee:	2300      	movs	r3, #0
 8000cf0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000cf2:	1d3b      	adds	r3, r7, #4
 8000cf4:	2100      	movs	r1, #0
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	f001 fc10 	bl	800251c <HAL_RCC_ClockConfig>
 8000cfc:	4603      	mov	r3, r0
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d001      	beq.n	8000d06 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000d02:	f000 f8df 	bl	8000ec4 <Error_Handler>
  }
}
 8000d06:	bf00      	nop
 8000d08:	3740      	adds	r7, #64	; 0x40
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	bd80      	pop	{r7, pc}
	...

08000d10 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b086      	sub	sp, #24
 8000d14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d16:	f107 0308 	add.w	r3, r7, #8
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	601a      	str	r2, [r3, #0]
 8000d1e:	605a      	str	r2, [r3, #4]
 8000d20:	609a      	str	r2, [r3, #8]
 8000d22:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d24:	463b      	mov	r3, r7
 8000d26:	2200      	movs	r2, #0
 8000d28:	601a      	str	r2, [r3, #0]
 8000d2a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000d2c:	4b1d      	ldr	r3, [pc, #116]	; (8000da4 <MX_TIM2_Init+0x94>)
 8000d2e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000d32:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 799;
 8000d34:	4b1b      	ldr	r3, [pc, #108]	; (8000da4 <MX_TIM2_Init+0x94>)
 8000d36:	f240 321f 	movw	r2, #799	; 0x31f
 8000d3a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d3c:	4b19      	ldr	r3, [pc, #100]	; (8000da4 <MX_TIM2_Init+0x94>)
 8000d3e:	2200      	movs	r2, #0
 8000d40:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8000d42:	4b18      	ldr	r3, [pc, #96]	; (8000da4 <MX_TIM2_Init+0x94>)
 8000d44:	2209      	movs	r2, #9
 8000d46:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d48:	4b16      	ldr	r3, [pc, #88]	; (8000da4 <MX_TIM2_Init+0x94>)
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d4e:	4b15      	ldr	r3, [pc, #84]	; (8000da4 <MX_TIM2_Init+0x94>)
 8000d50:	2200      	movs	r2, #0
 8000d52:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000d54:	4813      	ldr	r0, [pc, #76]	; (8000da4 <MX_TIM2_Init+0x94>)
 8000d56:	f001 fd3d 	bl	80027d4 <HAL_TIM_Base_Init>
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d001      	beq.n	8000d64 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000d60:	f000 f8b0 	bl	8000ec4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d64:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d68:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000d6a:	f107 0308 	add.w	r3, r7, #8
 8000d6e:	4619      	mov	r1, r3
 8000d70:	480c      	ldr	r0, [pc, #48]	; (8000da4 <MX_TIM2_Init+0x94>)
 8000d72:	f001 fecf 	bl	8002b14 <HAL_TIM_ConfigClockSource>
 8000d76:	4603      	mov	r3, r0
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d001      	beq.n	8000d80 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000d7c:	f000 f8a2 	bl	8000ec4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d80:	2300      	movs	r3, #0
 8000d82:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d84:	2300      	movs	r3, #0
 8000d86:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000d88:	463b      	mov	r3, r7
 8000d8a:	4619      	mov	r1, r3
 8000d8c:	4805      	ldr	r0, [pc, #20]	; (8000da4 <MX_TIM2_Init+0x94>)
 8000d8e:	f002 f8c9 	bl	8002f24 <HAL_TIMEx_MasterConfigSynchronization>
 8000d92:	4603      	mov	r3, r0
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d001      	beq.n	8000d9c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000d98:	f000 f894 	bl	8000ec4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000d9c:	bf00      	nop
 8000d9e:	3718      	adds	r7, #24
 8000da0:	46bd      	mov	sp, r7
 8000da2:	bd80      	pop	{r7, pc}
 8000da4:	20000198 	.word	0x20000198

08000da8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b088      	sub	sp, #32
 8000dac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dae:	f107 0310 	add.w	r3, r7, #16
 8000db2:	2200      	movs	r2, #0
 8000db4:	601a      	str	r2, [r3, #0]
 8000db6:	605a      	str	r2, [r3, #4]
 8000db8:	609a      	str	r2, [r3, #8]
 8000dba:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000dbc:	4b37      	ldr	r3, [pc, #220]	; (8000e9c <MX_GPIO_Init+0xf4>)
 8000dbe:	699b      	ldr	r3, [r3, #24]
 8000dc0:	4a36      	ldr	r2, [pc, #216]	; (8000e9c <MX_GPIO_Init+0xf4>)
 8000dc2:	f043 0310 	orr.w	r3, r3, #16
 8000dc6:	6193      	str	r3, [r2, #24]
 8000dc8:	4b34      	ldr	r3, [pc, #208]	; (8000e9c <MX_GPIO_Init+0xf4>)
 8000dca:	699b      	ldr	r3, [r3, #24]
 8000dcc:	f003 0310 	and.w	r3, r3, #16
 8000dd0:	60fb      	str	r3, [r7, #12]
 8000dd2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dd4:	4b31      	ldr	r3, [pc, #196]	; (8000e9c <MX_GPIO_Init+0xf4>)
 8000dd6:	699b      	ldr	r3, [r3, #24]
 8000dd8:	4a30      	ldr	r2, [pc, #192]	; (8000e9c <MX_GPIO_Init+0xf4>)
 8000dda:	f043 0304 	orr.w	r3, r3, #4
 8000dde:	6193      	str	r3, [r2, #24]
 8000de0:	4b2e      	ldr	r3, [pc, #184]	; (8000e9c <MX_GPIO_Init+0xf4>)
 8000de2:	699b      	ldr	r3, [r3, #24]
 8000de4:	f003 0304 	and.w	r3, r3, #4
 8000de8:	60bb      	str	r3, [r7, #8]
 8000dea:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dec:	4b2b      	ldr	r3, [pc, #172]	; (8000e9c <MX_GPIO_Init+0xf4>)
 8000dee:	699b      	ldr	r3, [r3, #24]
 8000df0:	4a2a      	ldr	r2, [pc, #168]	; (8000e9c <MX_GPIO_Init+0xf4>)
 8000df2:	f043 0308 	orr.w	r3, r3, #8
 8000df6:	6193      	str	r3, [r2, #24]
 8000df8:	4b28      	ldr	r3, [pc, #160]	; (8000e9c <MX_GPIO_Init+0xf4>)
 8000dfa:	699b      	ldr	r3, [r3, #24]
 8000dfc:	f003 0308 	and.w	r3, r3, #8
 8000e00:	607b      	str	r3, [r7, #4]
 8000e02:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED1_Pin|LED2_Pin|LED3_Pin|LED4_Pin
 8000e04:	2200      	movs	r2, #0
 8000e06:	21bf      	movs	r1, #191	; 0xbf
 8000e08:	4825      	ldr	r0, [pc, #148]	; (8000ea0 <MX_GPIO_Init+0xf8>)
 8000e0a:	f001 f8d4 	bl	8001fb6 <HAL_GPIO_WritePin>
                          |LED5_Pin|LED6_Pin|LED7_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SEG2_Pin|EN0_Pin|EN1_Pin|EN2_Pin
 8000e0e:	2200      	movs	r2, #0
 8000e10:	f44f 7174 	mov.w	r1, #976	; 0x3d0
 8000e14:	4823      	ldr	r0, [pc, #140]	; (8000ea4 <MX_GPIO_Init+0xfc>)
 8000e16:	f001 f8ce 	bl	8001fb6 <HAL_GPIO_WritePin>
                          |EN3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SEG0_Pin|SEG1_Pin|SEG3_Pin|SEG4_Pin
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	21f3      	movs	r1, #243	; 0xf3
 8000e1e:	4822      	ldr	r0, [pc, #136]	; (8000ea8 <MX_GPIO_Init+0x100>)
 8000e20:	f001 f8c9 	bl	8001fb6 <HAL_GPIO_WritePin>
                          |SEG5_Pin|SEG6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : LED1_Pin LED2_Pin LED3_Pin LED4_Pin
                           LED5_Pin LED6_Pin LED7_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin|LED4_Pin
 8000e24:	23bf      	movs	r3, #191	; 0xbf
 8000e26:	613b      	str	r3, [r7, #16]
                          |LED5_Pin|LED6_Pin|LED7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e28:	2301      	movs	r3, #1
 8000e2a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e30:	2302      	movs	r3, #2
 8000e32:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e34:	f107 0310 	add.w	r3, r7, #16
 8000e38:	4619      	mov	r1, r3
 8000e3a:	4819      	ldr	r0, [pc, #100]	; (8000ea0 <MX_GPIO_Init+0xf8>)
 8000e3c:	f000 ff10 	bl	8001c60 <HAL_GPIO_Init>

  /*Configure GPIO pins : SEG2_Pin EN0_Pin EN1_Pin EN2_Pin
                           EN3_Pin */
  GPIO_InitStruct.Pin = SEG2_Pin|EN0_Pin|EN1_Pin|EN2_Pin
 8000e40:	f44f 7374 	mov.w	r3, #976	; 0x3d0
 8000e44:	613b      	str	r3, [r7, #16]
                          |EN3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e46:	2301      	movs	r3, #1
 8000e48:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e4e:	2302      	movs	r3, #2
 8000e50:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e52:	f107 0310 	add.w	r3, r7, #16
 8000e56:	4619      	mov	r1, r3
 8000e58:	4812      	ldr	r0, [pc, #72]	; (8000ea4 <MX_GPIO_Init+0xfc>)
 8000e5a:	f000 ff01 	bl	8001c60 <HAL_GPIO_Init>

  /*Configure GPIO pins : SEG0_Pin SEG1_Pin SEG3_Pin SEG4_Pin
                           SEG5_Pin SEG6_Pin */
  GPIO_InitStruct.Pin = SEG0_Pin|SEG1_Pin|SEG3_Pin|SEG4_Pin
 8000e5e:	23f3      	movs	r3, #243	; 0xf3
 8000e60:	613b      	str	r3, [r7, #16]
                          |SEG5_Pin|SEG6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e62:	2301      	movs	r3, #1
 8000e64:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e66:	2300      	movs	r3, #0
 8000e68:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e6a:	2302      	movs	r3, #2
 8000e6c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e6e:	f107 0310 	add.w	r3, r7, #16
 8000e72:	4619      	mov	r1, r3
 8000e74:	480c      	ldr	r0, [pc, #48]	; (8000ea8 <MX_GPIO_Init+0x100>)
 8000e76:	f000 fef3 	bl	8001c60 <HAL_GPIO_Init>

  /*Configure GPIO pins : BTN3_Pin BTN1_Pin BTN2_Pin */
  GPIO_InitStruct.Pin = BTN3_Pin|BTN1_Pin|BTN2_Pin;
 8000e7a:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8000e7e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e80:	2300      	movs	r3, #0
 8000e82:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e84:	2300      	movs	r3, #0
 8000e86:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e88:	f107 0310 	add.w	r3, r7, #16
 8000e8c:	4619      	mov	r1, r3
 8000e8e:	4806      	ldr	r0, [pc, #24]	; (8000ea8 <MX_GPIO_Init+0x100>)
 8000e90:	f000 fee6 	bl	8001c60 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000e94:	bf00      	nop
 8000e96:	3720      	adds	r7, #32
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	bd80      	pop	{r7, pc}
 8000e9c:	40021000 	.word	0x40021000
 8000ea0:	40011000 	.word	0x40011000
 8000ea4:	40010800 	.word	0x40010800
 8000ea8:	40010c00 	.word	0x40010c00

08000eac <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b082      	sub	sp, #8
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
	SCH_Update();
 8000eb4:	f000 f9a2 	bl	80011fc <SCH_Update>
	timerRun();
 8000eb8:	f000 fb50 	bl	800155c <timerRun>
//	getKeyInput();
//	autoUpdate7Seg();
}
 8000ebc:	bf00      	nop
 8000ebe:	3708      	adds	r7, #8
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	bd80      	pop	{r7, pc}

08000ec4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ec8:	b672      	cpsid	i
}
 8000eca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ecc:	e7fe      	b.n	8000ecc <Error_Handler+0x8>
	...

08000ed0 <fsm_manual>:
int mode = 0;
int redValue = 0;
int yellowValue = 0;
int greenValue = 0;

void fsm_manual() {
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	af00      	add	r7, sp, #0
	switch(status) {
 8000ed4:	4bbc      	ldr	r3, [pc, #752]	; (80011c8 <fsm_manual+0x2f8>)
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	3b02      	subs	r3, #2
 8000eda:	2b15      	cmp	r3, #21
 8000edc:	f200 8171 	bhi.w	80011c2 <fsm_manual+0x2f2>
 8000ee0:	a201      	add	r2, pc, #4	; (adr r2, 8000ee8 <fsm_manual+0x18>)
 8000ee2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ee6:	bf00      	nop
 8000ee8:	08000f41 	.word	0x08000f41
 8000eec:	080011c3 	.word	0x080011c3
 8000ef0:	080011c3 	.word	0x080011c3
 8000ef4:	080011c3 	.word	0x080011c3
 8000ef8:	080011c3 	.word	0x080011c3
 8000efc:	080011c3 	.word	0x080011c3
 8000f00:	080011c3 	.word	0x080011c3
 8000f04:	080011c3 	.word	0x080011c3
 8000f08:	080011c3 	.word	0x080011c3
 8000f0c:	080011c3 	.word	0x080011c3
 8000f10:	080011c3 	.word	0x080011c3
 8000f14:	080011c3 	.word	0x080011c3
 8000f18:	080011c3 	.word	0x080011c3
 8000f1c:	080011c3 	.word	0x080011c3
 8000f20:	080011c3 	.word	0x080011c3
 8000f24:	080011c3 	.word	0x080011c3
 8000f28:	080011c3 	.word	0x080011c3
 8000f2c:	080011c3 	.word	0x080011c3
 8000f30:	080011c3 	.word	0x080011c3
 8000f34:	08000fbd 	.word	0x08000fbd
 8000f38:	08001069 	.word	0x08001069
 8000f3c:	08001113 	.word	0x08001113
		case MAN: {
			updateBufferXLine(mode);
 8000f40:	4ba2      	ldr	r3, [pc, #648]	; (80011cc <fsm_manual+0x2fc>)
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	4618      	mov	r0, r3
 8000f46:	f7ff fac3 	bl	80004d0 <updateBufferXLine>
			updateBufferYLine(0);
 8000f4a:	2000      	movs	r0, #0
 8000f4c:	f7ff faf0 	bl	8000530 <updateBufferYLine>
			if (timer_flag[3] == 1) {
 8000f50:	4b9f      	ldr	r3, [pc, #636]	; (80011d0 <fsm_manual+0x300>)
 8000f52:	68db      	ldr	r3, [r3, #12]
 8000f54:	2b01      	cmp	r3, #1
 8000f56:	d106      	bne.n	8000f66 <fsm_manual+0x96>
				setTimer(3, 500); // Timer 4
 8000f58:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000f5c:	2003      	movs	r0, #3
 8000f5e:	f000 fadf 	bl	8001520 <setTimer>
				blinkAllLed(); // Blink 2Hz
 8000f62:	f000 fcbf 	bl	80018e4 <blinkAllLed>
			}
			if (isButtonPressed(0)) {
 8000f66:	2000      	movs	r0, #0
 8000f68:	f7ff fd3c 	bl	80009e4 <isButtonPressed>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d01e      	beq.n	8000fb0 <fsm_manual+0xe0>
				status = MODE2;
 8000f72:	4b95      	ldr	r3, [pc, #596]	; (80011c8 <fsm_manual+0x2f8>)
 8000f74:	2215      	movs	r2, #21
 8000f76:	601a      	str	r2, [r3, #0]
				mode = 2;
 8000f78:	4b94      	ldr	r3, [pc, #592]	; (80011cc <fsm_manual+0x2fc>)
 8000f7a:	2202      	movs	r2, #2
 8000f7c:	601a      	str	r2, [r3, #0]
				// Save original values
				redValue = redTime;
 8000f7e:	4b95      	ldr	r3, [pc, #596]	; (80011d4 <fsm_manual+0x304>)
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	4a95      	ldr	r2, [pc, #596]	; (80011d8 <fsm_manual+0x308>)
 8000f84:	6013      	str	r3, [r2, #0]
				yellowValue = yellowTime;
 8000f86:	4b95      	ldr	r3, [pc, #596]	; (80011dc <fsm_manual+0x30c>)
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	4a95      	ldr	r2, [pc, #596]	; (80011e0 <fsm_manual+0x310>)
 8000f8c:	6013      	str	r3, [r2, #0]
				greenValue = greenTime;
 8000f8e:	4b95      	ldr	r3, [pc, #596]	; (80011e4 <fsm_manual+0x314>)
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	4a95      	ldr	r2, [pc, #596]	; (80011e8 <fsm_manual+0x318>)
 8000f94:	6013      	str	r3, [r2, #0]
				updateBufferXLine(mode);
 8000f96:	4b8d      	ldr	r3, [pc, #564]	; (80011cc <fsm_manual+0x2fc>)
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	f7ff fa98 	bl	80004d0 <updateBufferXLine>
				updateBufferYLine(redTime);
 8000fa0:	4b8c      	ldr	r3, [pc, #560]	; (80011d4 <fsm_manual+0x304>)
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	f7ff fac3 	bl	8000530 <updateBufferYLine>
				clearTrafficLight();
 8000faa:	f000 fc11 	bl	80017d0 <clearTrafficLight>
				break;
 8000fae:	e122      	b.n	80011f6 <fsm_manual+0x326>
			}
			// Update: When BTN2 pressed, reset button_flag[1] and do nothing
			if (isButtonPressed(1)) { // BTN2 pressed, reset button_flag[1]
 8000fb0:	2001      	movs	r0, #1
 8000fb2:	f7ff fd17 	bl	80009e4 <isButtonPressed>
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	2b00      	cmp	r3, #0
				break;
			}
			break;
 8000fba:	e11c      	b.n	80011f6 <fsm_manual+0x326>
		}
		case MODE2: {
			if (timer_flag[3] == 1) {
 8000fbc:	4b84      	ldr	r3, [pc, #528]	; (80011d0 <fsm_manual+0x300>)
 8000fbe:	68db      	ldr	r3, [r3, #12]
 8000fc0:	2b01      	cmp	r3, #1
 8000fc2:	d106      	bne.n	8000fd2 <fsm_manual+0x102>
				setTimer(3, 500); // Timer 4
 8000fc4:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000fc8:	2003      	movs	r0, #3
 8000fca:	f000 faa9 	bl	8001520 <setTimer>
				blinkRedLed(); // Blink 2Hz
 8000fce:	f000 fc23 	bl	8001818 <blinkRedLed>
			}
			if (isButtonPressed(0)) { // BTN1 pressed, update status and discard value
 8000fd2:	2000      	movs	r0, #0
 8000fd4:	f7ff fd06 	bl	80009e4 <isButtonPressed>
 8000fd8:	4603      	mov	r3, r0
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d021      	beq.n	8001022 <fsm_manual+0x152>
				status = MODE3;
 8000fde:	4b7a      	ldr	r3, [pc, #488]	; (80011c8 <fsm_manual+0x2f8>)
 8000fe0:	2216      	movs	r2, #22
 8000fe2:	601a      	str	r2, [r3, #0]
				mode = 3;
 8000fe4:	4b79      	ldr	r3, [pc, #484]	; (80011cc <fsm_manual+0x2fc>)
 8000fe6:	2203      	movs	r2, #3
 8000fe8:	601a      	str	r2, [r3, #0]
				// Adjust Time to the original, not save the updated value
				setRedTime(redValue);
 8000fea:	4b7b      	ldr	r3, [pc, #492]	; (80011d8 <fsm_manual+0x308>)
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	4618      	mov	r0, r3
 8000ff0:	f000 fbc4 	bl	800177c <setRedTime>
				setYellowTime(yellowValue);
 8000ff4:	4b7a      	ldr	r3, [pc, #488]	; (80011e0 <fsm_manual+0x310>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	f000 fbcd 	bl	8001798 <setYellowTime>
				setGreenTime(greenValue);
 8000ffe:	4b7a      	ldr	r3, [pc, #488]	; (80011e8 <fsm_manual+0x318>)
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	4618      	mov	r0, r3
 8001004:	f000 fbd6 	bl	80017b4 <setGreenTime>
				updateBufferXLine(mode);
 8001008:	4b70      	ldr	r3, [pc, #448]	; (80011cc <fsm_manual+0x2fc>)
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	4618      	mov	r0, r3
 800100e:	f7ff fa5f 	bl	80004d0 <updateBufferXLine>
				updateBufferYLine(yellowTime);
 8001012:	4b72      	ldr	r3, [pc, #456]	; (80011dc <fsm_manual+0x30c>)
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	4618      	mov	r0, r3
 8001018:	f7ff fa8a 	bl	8000530 <updateBufferYLine>
				clearTrafficLight();
 800101c:	f000 fbd8 	bl	80017d0 <clearTrafficLight>
				break;
 8001020:	e0e9      	b.n	80011f6 <fsm_manual+0x326>
			}
			if (isButtonPressed(1)) { // BTN2 pressed, update value
 8001022:	2001      	movs	r0, #1
 8001024:	f7ff fcde 	bl	80009e4 <isButtonPressed>
 8001028:	4603      	mov	r3, r0
 800102a:	2b00      	cmp	r3, #0
 800102c:	d007      	beq.n	800103e <fsm_manual+0x16e>
				updateRedTime();
 800102e:	f000 fb55 	bl	80016dc <updateRedTime>
				updateBufferYLine(redTime);
 8001032:	4b68      	ldr	r3, [pc, #416]	; (80011d4 <fsm_manual+0x304>)
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	4618      	mov	r0, r3
 8001038:	f7ff fa7a 	bl	8000530 <updateBufferYLine>
				break;
 800103c:	e0db      	b.n	80011f6 <fsm_manual+0x326>
			}
			if (isButtonPressed(2)) { // BTN3 pressed, save the value -> update Time
 800103e:	2002      	movs	r0, #2
 8001040:	f7ff fcd0 	bl	80009e4 <isButtonPressed>
 8001044:	4603      	mov	r3, r0
 8001046:	2b00      	cmp	r3, #0
 8001048:	f000 80d0 	beq.w	80011ec <fsm_manual+0x31c>
				status = MAN;
 800104c:	4b5e      	ldr	r3, [pc, #376]	; (80011c8 <fsm_manual+0x2f8>)
 800104e:	2202      	movs	r2, #2
 8001050:	601a      	str	r2, [r3, #0]
				setTimer(2, 10000); // Timer 3
 8001052:	f242 7110 	movw	r1, #10000	; 0x2710
 8001056:	2002      	movs	r0, #2
 8001058:	f000 fa62 	bl	8001520 <setTimer>
				clearTrafficLight();
 800105c:	f000 fbb8 	bl	80017d0 <clearTrafficLight>
				mode = 0;
 8001060:	4b5a      	ldr	r3, [pc, #360]	; (80011cc <fsm_manual+0x2fc>)
 8001062:	2200      	movs	r2, #0
 8001064:	601a      	str	r2, [r3, #0]
				break;
 8001066:	e0c6      	b.n	80011f6 <fsm_manual+0x326>
			}
			break;
		}
		case MODE3: {
			if (timer_flag[3] == 1) {
 8001068:	4b59      	ldr	r3, [pc, #356]	; (80011d0 <fsm_manual+0x300>)
 800106a:	68db      	ldr	r3, [r3, #12]
 800106c:	2b01      	cmp	r3, #1
 800106e:	d106      	bne.n	800107e <fsm_manual+0x1ae>
				setTimer(3, 500); // Timer 4
 8001070:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8001074:	2003      	movs	r0, #3
 8001076:	f000 fa53 	bl	8001520 <setTimer>
				blinkYellowLed(); // Blink 2Hz
 800107a:	f000 fbef 	bl	800185c <blinkYellowLed>
			}
			if (isButtonPressed(0)) { // BTN1 pressed, update status and discard value
 800107e:	2000      	movs	r0, #0
 8001080:	f7ff fcb0 	bl	80009e4 <isButtonPressed>
 8001084:	4603      	mov	r3, r0
 8001086:	2b00      	cmp	r3, #0
 8001088:	d021      	beq.n	80010ce <fsm_manual+0x1fe>
				status = MODE4;
 800108a:	4b4f      	ldr	r3, [pc, #316]	; (80011c8 <fsm_manual+0x2f8>)
 800108c:	2217      	movs	r2, #23
 800108e:	601a      	str	r2, [r3, #0]
				mode = 4;
 8001090:	4b4e      	ldr	r3, [pc, #312]	; (80011cc <fsm_manual+0x2fc>)
 8001092:	2204      	movs	r2, #4
 8001094:	601a      	str	r2, [r3, #0]
				// Adjust Time to the original, not save the updated value
				setRedTime(redValue);
 8001096:	4b50      	ldr	r3, [pc, #320]	; (80011d8 <fsm_manual+0x308>)
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	4618      	mov	r0, r3
 800109c:	f000 fb6e 	bl	800177c <setRedTime>
				setYellowTime(yellowValue);
 80010a0:	4b4f      	ldr	r3, [pc, #316]	; (80011e0 <fsm_manual+0x310>)
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	4618      	mov	r0, r3
 80010a6:	f000 fb77 	bl	8001798 <setYellowTime>
				setGreenTime(greenValue);
 80010aa:	4b4f      	ldr	r3, [pc, #316]	; (80011e8 <fsm_manual+0x318>)
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	4618      	mov	r0, r3
 80010b0:	f000 fb80 	bl	80017b4 <setGreenTime>
				updateBufferXLine(mode);
 80010b4:	4b45      	ldr	r3, [pc, #276]	; (80011cc <fsm_manual+0x2fc>)
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	4618      	mov	r0, r3
 80010ba:	f7ff fa09 	bl	80004d0 <updateBufferXLine>
				updateBufferYLine(greenTime);
 80010be:	4b49      	ldr	r3, [pc, #292]	; (80011e4 <fsm_manual+0x314>)
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	4618      	mov	r0, r3
 80010c4:	f7ff fa34 	bl	8000530 <updateBufferYLine>
				clearTrafficLight();
 80010c8:	f000 fb82 	bl	80017d0 <clearTrafficLight>
				break;
 80010cc:	e093      	b.n	80011f6 <fsm_manual+0x326>
			}
			if (isButtonPressed(1)) { // BTN2 pressed, update value
 80010ce:	2001      	movs	r0, #1
 80010d0:	f7ff fc88 	bl	80009e4 <isButtonPressed>
 80010d4:	4603      	mov	r3, r0
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d007      	beq.n	80010ea <fsm_manual+0x21a>
				updateYellowTime();
 80010da:	f000 fb2f 	bl	800173c <updateYellowTime>
				updateBufferYLine(yellowTime);
 80010de:	4b3f      	ldr	r3, [pc, #252]	; (80011dc <fsm_manual+0x30c>)
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	4618      	mov	r0, r3
 80010e4:	f7ff fa24 	bl	8000530 <updateBufferYLine>
				break;
 80010e8:	e085      	b.n	80011f6 <fsm_manual+0x326>
			}
			if (isButtonPressed(2)) { // BTN3 pressed, save the value -> update Time
 80010ea:	2002      	movs	r0, #2
 80010ec:	f7ff fc7a 	bl	80009e4 <isButtonPressed>
 80010f0:	4603      	mov	r3, r0
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d07c      	beq.n	80011f0 <fsm_manual+0x320>
				status = MAN;
 80010f6:	4b34      	ldr	r3, [pc, #208]	; (80011c8 <fsm_manual+0x2f8>)
 80010f8:	2202      	movs	r2, #2
 80010fa:	601a      	str	r2, [r3, #0]
				setTimer(2, 10000); // Timer 3
 80010fc:	f242 7110 	movw	r1, #10000	; 0x2710
 8001100:	2002      	movs	r0, #2
 8001102:	f000 fa0d 	bl	8001520 <setTimer>
				clearTrafficLight();
 8001106:	f000 fb63 	bl	80017d0 <clearTrafficLight>
				mode = 0;
 800110a:	4b30      	ldr	r3, [pc, #192]	; (80011cc <fsm_manual+0x2fc>)
 800110c:	2200      	movs	r2, #0
 800110e:	601a      	str	r2, [r3, #0]
				break;
 8001110:	e071      	b.n	80011f6 <fsm_manual+0x326>
			}
			break;
		}
		case MODE4: {
			if (timer_flag[3] == 1) {
 8001112:	4b2f      	ldr	r3, [pc, #188]	; (80011d0 <fsm_manual+0x300>)
 8001114:	68db      	ldr	r3, [r3, #12]
 8001116:	2b01      	cmp	r3, #1
 8001118:	d106      	bne.n	8001128 <fsm_manual+0x258>
				setTimer(3, 500); // Timer 4
 800111a:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800111e:	2003      	movs	r0, #3
 8001120:	f000 f9fe 	bl	8001520 <setTimer>
				blinkGreenLed(); // Blink 2Hz
 8001124:	f000 fbbc 	bl	80018a0 <blinkGreenLed>
			}
			if (isButtonPressed(0)) { // BTN1 pressed, update status and discard value
 8001128:	2000      	movs	r0, #0
 800112a:	f7ff fc5b 	bl	80009e4 <isButtonPressed>
 800112e:	4603      	mov	r3, r0
 8001130:	2b00      	cmp	r3, #0
 8001132:	d024      	beq.n	800117e <fsm_manual+0x2ae>
				status = MAN;
 8001134:	4b24      	ldr	r3, [pc, #144]	; (80011c8 <fsm_manual+0x2f8>)
 8001136:	2202      	movs	r2, #2
 8001138:	601a      	str	r2, [r3, #0]
				setTimer(2, 10000); // Timer 3
 800113a:	f242 7110 	movw	r1, #10000	; 0x2710
 800113e:	2002      	movs	r0, #2
 8001140:	f000 f9ee 	bl	8001520 <setTimer>
				clearTrafficLight();
 8001144:	f000 fb44 	bl	80017d0 <clearTrafficLight>
				mode = 0;
 8001148:	4b20      	ldr	r3, [pc, #128]	; (80011cc <fsm_manual+0x2fc>)
 800114a:	2200      	movs	r2, #0
 800114c:	601a      	str	r2, [r3, #0]
				// Adjust Time to the original, not save the updated value
				setRedTime(redValue);
 800114e:	4b22      	ldr	r3, [pc, #136]	; (80011d8 <fsm_manual+0x308>)
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	4618      	mov	r0, r3
 8001154:	f000 fb12 	bl	800177c <setRedTime>
				setYellowTime(yellowValue);
 8001158:	4b21      	ldr	r3, [pc, #132]	; (80011e0 <fsm_manual+0x310>)
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	4618      	mov	r0, r3
 800115e:	f000 fb1b 	bl	8001798 <setYellowTime>
				setGreenTime(greenValue);
 8001162:	4b21      	ldr	r3, [pc, #132]	; (80011e8 <fsm_manual+0x318>)
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	4618      	mov	r0, r3
 8001168:	f000 fb24 	bl	80017b4 <setGreenTime>
				updateBufferXLine(mode);
 800116c:	4b17      	ldr	r3, [pc, #92]	; (80011cc <fsm_manual+0x2fc>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	4618      	mov	r0, r3
 8001172:	f7ff f9ad 	bl	80004d0 <updateBufferXLine>
				updateBufferYLine(0);
 8001176:	2000      	movs	r0, #0
 8001178:	f7ff f9da 	bl	8000530 <updateBufferYLine>
				break;
 800117c:	e03b      	b.n	80011f6 <fsm_manual+0x326>
			}
			if (isButtonPressed(1)) { // BTN2 pressed, update value
 800117e:	2001      	movs	r0, #1
 8001180:	f7ff fc30 	bl	80009e4 <isButtonPressed>
 8001184:	4603      	mov	r3, r0
 8001186:	2b00      	cmp	r3, #0
 8001188:	d007      	beq.n	800119a <fsm_manual+0x2ca>
				updateGreenTime();
 800118a:	f000 fabf 	bl	800170c <updateGreenTime>
				updateBufferYLine(greenTime);
 800118e:	4b15      	ldr	r3, [pc, #84]	; (80011e4 <fsm_manual+0x314>)
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	4618      	mov	r0, r3
 8001194:	f7ff f9cc 	bl	8000530 <updateBufferYLine>
				break;
 8001198:	e02d      	b.n	80011f6 <fsm_manual+0x326>
			}
			if (isButtonPressed(2)) { // BTN3 pressed, save the value -> update Time
 800119a:	2002      	movs	r0, #2
 800119c:	f7ff fc22 	bl	80009e4 <isButtonPressed>
 80011a0:	4603      	mov	r3, r0
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d026      	beq.n	80011f4 <fsm_manual+0x324>
				status = MAN;
 80011a6:	4b08      	ldr	r3, [pc, #32]	; (80011c8 <fsm_manual+0x2f8>)
 80011a8:	2202      	movs	r2, #2
 80011aa:	601a      	str	r2, [r3, #0]
				setTimer(2, 10000); // Timer 3
 80011ac:	f242 7110 	movw	r1, #10000	; 0x2710
 80011b0:	2002      	movs	r0, #2
 80011b2:	f000 f9b5 	bl	8001520 <setTimer>
				clearTrafficLight();
 80011b6:	f000 fb0b 	bl	80017d0 <clearTrafficLight>
				mode = 0;
 80011ba:	4b04      	ldr	r3, [pc, #16]	; (80011cc <fsm_manual+0x2fc>)
 80011bc:	2200      	movs	r2, #0
 80011be:	601a      	str	r2, [r3, #0]
				break;
 80011c0:	e019      	b.n	80011f6 <fsm_manual+0x326>
			}
			break;
		}
		default: {
			break;
 80011c2:	bf00      	nop
 80011c4:	e017      	b.n	80011f6 <fsm_manual+0x326>
 80011c6:	bf00      	nop
 80011c8:	20000194 	.word	0x20000194
 80011cc:	200001e0 	.word	0x200001e0
 80011d0:	20000470 	.word	0x20000470
 80011d4:	20000018 	.word	0x20000018
 80011d8:	200001e4 	.word	0x200001e4
 80011dc:	2000001c 	.word	0x2000001c
 80011e0:	200001e8 	.word	0x200001e8
 80011e4:	20000020 	.word	0x20000020
 80011e8:	200001ec 	.word	0x200001ec
			break;
 80011ec:	bf00      	nop
 80011ee:	e002      	b.n	80011f6 <fsm_manual+0x326>
			break;
 80011f0:	bf00      	nop
 80011f2:	e000      	b.n	80011f6 <fsm_manual+0x326>
			break;
 80011f4:	bf00      	nop
		}
	}
}
 80011f6:	bf00      	nop
 80011f8:	bd80      	pop	{r7, pc}
 80011fa:	bf00      	nop

080011fc <SCH_Update>:

void SCH_Init(void) {

}

void SCH_Update(void) {
 80011fc:	b480      	push	{r7}
 80011fe:	b083      	sub	sp, #12
 8001200:	af00      	add	r7, sp, #0
	uint32_t Index;
	for (Index = 0; Index < SCH_MAX_TASKS; Index++) {
 8001202:	2300      	movs	r3, #0
 8001204:	607b      	str	r3, [r7, #4]
 8001206:	e042      	b.n	800128e <SCH_Update+0x92>
		if (SCH_tasks_G[Index].pTask) {
 8001208:	4a25      	ldr	r2, [pc, #148]	; (80012a0 <SCH_Update+0xa4>)
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	011b      	lsls	r3, r3, #4
 800120e:	4413      	add	r3, r2
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	2b00      	cmp	r3, #0
 8001214:	d038      	beq.n	8001288 <SCH_Update+0x8c>
			if (SCH_tasks_G[Index].Delay == 0) {
 8001216:	4a22      	ldr	r2, [pc, #136]	; (80012a0 <SCH_Update+0xa4>)
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	011b      	lsls	r3, r3, #4
 800121c:	4413      	add	r3, r2
 800121e:	3304      	adds	r3, #4
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	2b00      	cmp	r3, #0
 8001224:	d123      	bne.n	800126e <SCH_Update+0x72>
				// The task is due to run
				SCH_tasks_G[Index].RunMe += 1; // Inc. the 'RunMe' flag
 8001226:	4a1e      	ldr	r2, [pc, #120]	; (80012a0 <SCH_Update+0xa4>)
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	011b      	lsls	r3, r3, #4
 800122c:	4413      	add	r3, r2
 800122e:	330c      	adds	r3, #12
 8001230:	781b      	ldrb	r3, [r3, #0]
 8001232:	3301      	adds	r3, #1
 8001234:	b2d9      	uxtb	r1, r3
 8001236:	4a1a      	ldr	r2, [pc, #104]	; (80012a0 <SCH_Update+0xa4>)
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	011b      	lsls	r3, r3, #4
 800123c:	4413      	add	r3, r2
 800123e:	330c      	adds	r3, #12
 8001240:	460a      	mov	r2, r1
 8001242:	701a      	strb	r2, [r3, #0]
				if (SCH_tasks_G[Index].Period) {
 8001244:	4a16      	ldr	r2, [pc, #88]	; (80012a0 <SCH_Update+0xa4>)
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	011b      	lsls	r3, r3, #4
 800124a:	4413      	add	r3, r2
 800124c:	3308      	adds	r3, #8
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	2b00      	cmp	r3, #0
 8001252:	d019      	beq.n	8001288 <SCH_Update+0x8c>
					// Schedule periodic tasks to run again
					SCH_tasks_G[Index].Delay = SCH_tasks_G[Index].Period;
 8001254:	4a12      	ldr	r2, [pc, #72]	; (80012a0 <SCH_Update+0xa4>)
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	011b      	lsls	r3, r3, #4
 800125a:	4413      	add	r3, r2
 800125c:	3308      	adds	r3, #8
 800125e:	681a      	ldr	r2, [r3, #0]
 8001260:	490f      	ldr	r1, [pc, #60]	; (80012a0 <SCH_Update+0xa4>)
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	011b      	lsls	r3, r3, #4
 8001266:	440b      	add	r3, r1
 8001268:	3304      	adds	r3, #4
 800126a:	601a      	str	r2, [r3, #0]
 800126c:	e00c      	b.n	8001288 <SCH_Update+0x8c>
				}
			}
			else
			{
				// Not yet ready to run: just decrement the delay
				SCH_tasks_G[Index].Delay -= 1;
 800126e:	4a0c      	ldr	r2, [pc, #48]	; (80012a0 <SCH_Update+0xa4>)
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	011b      	lsls	r3, r3, #4
 8001274:	4413      	add	r3, r2
 8001276:	3304      	adds	r3, #4
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	1e5a      	subs	r2, r3, #1
 800127c:	4908      	ldr	r1, [pc, #32]	; (80012a0 <SCH_Update+0xa4>)
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	011b      	lsls	r3, r3, #4
 8001282:	440b      	add	r3, r1
 8001284:	3304      	adds	r3, #4
 8001286:	601a      	str	r2, [r3, #0]
	for (Index = 0; Index < SCH_MAX_TASKS; Index++) {
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	3301      	adds	r3, #1
 800128c:	607b      	str	r3, [r7, #4]
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	2b27      	cmp	r3, #39	; 0x27
 8001292:	d9b9      	bls.n	8001208 <SCH_Update+0xc>
			}
		}
	}
}
 8001294:	bf00      	nop
 8001296:	bf00      	nop
 8001298:	370c      	adds	r7, #12
 800129a:	46bd      	mov	sp, r7
 800129c:	bc80      	pop	{r7}
 800129e:	4770      	bx	lr
 80012a0:	200001f0 	.word	0x200001f0

080012a4 <SCH_Add_Task>:

unsigned char SCH_Add_Task(void (*pFunction)(), unsigned int DELAY, unsigned int PERIOD){
 80012a4:	b480      	push	{r7}
 80012a6:	b087      	sub	sp, #28
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	60f8      	str	r0, [r7, #12]
 80012ac:	60b9      	str	r1, [r7, #8]
 80012ae:	607a      	str	r2, [r7, #4]
	uint32_t Index = 0;
 80012b0:	2300      	movs	r3, #0
 80012b2:	617b      	str	r3, [r7, #20]
	// First find a gap in the array (if there is one)
	while ((SCH_tasks_G[Index].pTask != 0) && (Index < SCH_MAX_TASKS))
 80012b4:	e002      	b.n	80012bc <SCH_Add_Task+0x18>
	{
		Index++;
 80012b6:	697b      	ldr	r3, [r7, #20]
 80012b8:	3301      	adds	r3, #1
 80012ba:	617b      	str	r3, [r7, #20]
	while ((SCH_tasks_G[Index].pTask != 0) && (Index < SCH_MAX_TASKS))
 80012bc:	4a18      	ldr	r2, [pc, #96]	; (8001320 <SCH_Add_Task+0x7c>)
 80012be:	697b      	ldr	r3, [r7, #20]
 80012c0:	011b      	lsls	r3, r3, #4
 80012c2:	4413      	add	r3, r2
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d002      	beq.n	80012d0 <SCH_Add_Task+0x2c>
 80012ca:	697b      	ldr	r3, [r7, #20]
 80012cc:	2b27      	cmp	r3, #39	; 0x27
 80012ce:	d9f2      	bls.n	80012b6 <SCH_Add_Task+0x12>
	}
	if (Index == SCH_MAX_TASKS) {
 80012d0:	697b      	ldr	r3, [r7, #20]
 80012d2:	2b28      	cmp	r3, #40	; 0x28
 80012d4:	d101      	bne.n	80012da <SCH_Add_Task+0x36>
		return SCH_MAX_TASKS; // Also return an error code
 80012d6:	2328      	movs	r3, #40	; 0x28
 80012d8:	e01c      	b.n	8001314 <SCH_Add_Task+0x70>
	}
	// If we're here, there is a space in the task array
	SCH_tasks_G[Index].pTask = pFunction;
 80012da:	4a11      	ldr	r2, [pc, #68]	; (8001320 <SCH_Add_Task+0x7c>)
 80012dc:	697b      	ldr	r3, [r7, #20]
 80012de:	011b      	lsls	r3, r3, #4
 80012e0:	4413      	add	r3, r2
 80012e2:	68fa      	ldr	r2, [r7, #12]
 80012e4:	601a      	str	r2, [r3, #0]
	SCH_tasks_G[Index].Delay = DELAY;
 80012e6:	4a0e      	ldr	r2, [pc, #56]	; (8001320 <SCH_Add_Task+0x7c>)
 80012e8:	697b      	ldr	r3, [r7, #20]
 80012ea:	011b      	lsls	r3, r3, #4
 80012ec:	4413      	add	r3, r2
 80012ee:	3304      	adds	r3, #4
 80012f0:	68ba      	ldr	r2, [r7, #8]
 80012f2:	601a      	str	r2, [r3, #0]
	SCH_tasks_G[Index].Period = PERIOD;
 80012f4:	4a0a      	ldr	r2, [pc, #40]	; (8001320 <SCH_Add_Task+0x7c>)
 80012f6:	697b      	ldr	r3, [r7, #20]
 80012f8:	011b      	lsls	r3, r3, #4
 80012fa:	4413      	add	r3, r2
 80012fc:	3308      	adds	r3, #8
 80012fe:	687a      	ldr	r2, [r7, #4]
 8001300:	601a      	str	r2, [r3, #0]
	SCH_tasks_G[Index].RunMe = 0;
 8001302:	4a07      	ldr	r2, [pc, #28]	; (8001320 <SCH_Add_Task+0x7c>)
 8001304:	697b      	ldr	r3, [r7, #20]
 8001306:	011b      	lsls	r3, r3, #4
 8001308:	4413      	add	r3, r2
 800130a:	330c      	adds	r3, #12
 800130c:	2200      	movs	r2, #0
 800130e:	701a      	strb	r2, [r3, #0]
	return Index; // return position of task (to allow later deletion)
 8001310:	697b      	ldr	r3, [r7, #20]
 8001312:	b2db      	uxtb	r3, r3
}
 8001314:	4618      	mov	r0, r3
 8001316:	371c      	adds	r7, #28
 8001318:	46bd      	mov	sp, r7
 800131a:	bc80      	pop	{r7}
 800131c:	4770      	bx	lr
 800131e:	bf00      	nop
 8001320:	200001f0 	.word	0x200001f0

08001324 <SCH_Dispatch_Tasks>:

void SCH_Dispatch_Tasks(void) {
 8001324:	b580      	push	{r7, lr}
 8001326:	b082      	sub	sp, #8
 8001328:	af00      	add	r7, sp, #0
	uint32_t Index;
	// Dispatches (runs) the next task (if one is ready)
	for (Index = 0; Index < SCH_MAX_TASKS; Index++) {
 800132a:	2300      	movs	r3, #0
 800132c:	607b      	str	r3, [r7, #4]
 800132e:	e02a      	b.n	8001386 <SCH_Dispatch_Tasks+0x62>
		if (SCH_tasks_G[Index].RunMe > 0) {
 8001330:	4a19      	ldr	r2, [pc, #100]	; (8001398 <SCH_Dispatch_Tasks+0x74>)
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	011b      	lsls	r3, r3, #4
 8001336:	4413      	add	r3, r2
 8001338:	330c      	adds	r3, #12
 800133a:	781b      	ldrb	r3, [r3, #0]
 800133c:	2b00      	cmp	r3, #0
 800133e:	d01f      	beq.n	8001380 <SCH_Dispatch_Tasks+0x5c>
			(*SCH_tasks_G[Index].pTask)(); // Run the task
 8001340:	4a15      	ldr	r2, [pc, #84]	; (8001398 <SCH_Dispatch_Tasks+0x74>)
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	011b      	lsls	r3, r3, #4
 8001346:	4413      	add	r3, r2
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	4798      	blx	r3
			SCH_tasks_G[Index].RunMe -= 1; // Reset / reduce RunMe flag
 800134c:	4a12      	ldr	r2, [pc, #72]	; (8001398 <SCH_Dispatch_Tasks+0x74>)
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	011b      	lsls	r3, r3, #4
 8001352:	4413      	add	r3, r2
 8001354:	330c      	adds	r3, #12
 8001356:	781b      	ldrb	r3, [r3, #0]
 8001358:	3b01      	subs	r3, #1
 800135a:	b2d9      	uxtb	r1, r3
 800135c:	4a0e      	ldr	r2, [pc, #56]	; (8001398 <SCH_Dispatch_Tasks+0x74>)
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	011b      	lsls	r3, r3, #4
 8001362:	4413      	add	r3, r2
 8001364:	330c      	adds	r3, #12
 8001366:	460a      	mov	r2, r1
 8001368:	701a      	strb	r2, [r3, #0]
			if (SCH_tasks_G[Index].Period == 0) {
 800136a:	4a0b      	ldr	r2, [pc, #44]	; (8001398 <SCH_Dispatch_Tasks+0x74>)
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	011b      	lsls	r3, r3, #4
 8001370:	4413      	add	r3, r2
 8001372:	3308      	adds	r3, #8
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	2b00      	cmp	r3, #0
 8001378:	d102      	bne.n	8001380 <SCH_Dispatch_Tasks+0x5c>
				SCH_Delete_Task(Index);
 800137a:	6878      	ldr	r0, [r7, #4]
 800137c:	f000 f80e 	bl	800139c <SCH_Delete_Task>
	for (Index = 0; Index < SCH_MAX_TASKS; Index++) {
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	3301      	adds	r3, #1
 8001384:	607b      	str	r3, [r7, #4]
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	2b27      	cmp	r3, #39	; 0x27
 800138a:	d9d1      	bls.n	8001330 <SCH_Dispatch_Tasks+0xc>
			}
		}
	}
}
 800138c:	bf00      	nop
 800138e:	bf00      	nop
 8001390:	3708      	adds	r7, #8
 8001392:	46bd      	mov	sp, r7
 8001394:	bd80      	pop	{r7, pc}
 8001396:	bf00      	nop
 8001398:	200001f0 	.word	0x200001f0

0800139c <SCH_Delete_Task>:
unsigned char SCH_Delete_Task(const uint32_t TASK_INDEX) {
 800139c:	b480      	push	{r7}
 800139e:	b085      	sub	sp, #20
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
	int Return_code;
	if (SCH_tasks_G[TASK_INDEX].pTask == 0) {
 80013a4:	4a16      	ldr	r2, [pc, #88]	; (8001400 <SCH_Delete_Task+0x64>)
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	011b      	lsls	r3, r3, #4
 80013aa:	4413      	add	r3, r2
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d102      	bne.n	80013b8 <SCH_Delete_Task+0x1c>
		Return_code = 1;
 80013b2:	2301      	movs	r3, #1
 80013b4:	60fb      	str	r3, [r7, #12]
 80013b6:	e001      	b.n	80013bc <SCH_Delete_Task+0x20>
	}
	else {
		Return_code = 0;
 80013b8:	2300      	movs	r3, #0
 80013ba:	60fb      	str	r3, [r7, #12]
	}
	SCH_tasks_G[TASK_INDEX].pTask = 0x0000;
 80013bc:	4a10      	ldr	r2, [pc, #64]	; (8001400 <SCH_Delete_Task+0x64>)
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	011b      	lsls	r3, r3, #4
 80013c2:	4413      	add	r3, r2
 80013c4:	2200      	movs	r2, #0
 80013c6:	601a      	str	r2, [r3, #0]
	SCH_tasks_G[TASK_INDEX].Delay = 0;
 80013c8:	4a0d      	ldr	r2, [pc, #52]	; (8001400 <SCH_Delete_Task+0x64>)
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	011b      	lsls	r3, r3, #4
 80013ce:	4413      	add	r3, r2
 80013d0:	3304      	adds	r3, #4
 80013d2:	2200      	movs	r2, #0
 80013d4:	601a      	str	r2, [r3, #0]
	SCH_tasks_G[TASK_INDEX].Period = 0;
 80013d6:	4a0a      	ldr	r2, [pc, #40]	; (8001400 <SCH_Delete_Task+0x64>)
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	011b      	lsls	r3, r3, #4
 80013dc:	4413      	add	r3, r2
 80013de:	3308      	adds	r3, #8
 80013e0:	2200      	movs	r2, #0
 80013e2:	601a      	str	r2, [r3, #0]
	SCH_tasks_G[TASK_INDEX].RunMe = 0;
 80013e4:	4a06      	ldr	r2, [pc, #24]	; (8001400 <SCH_Delete_Task+0x64>)
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	011b      	lsls	r3, r3, #4
 80013ea:	4413      	add	r3, r2
 80013ec:	330c      	adds	r3, #12
 80013ee:	2200      	movs	r2, #0
 80013f0:	701a      	strb	r2, [r3, #0]
	return Return_code; // return status
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	b2db      	uxtb	r3, r3
}
 80013f6:	4618      	mov	r0, r3
 80013f8:	3714      	adds	r7, #20
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bc80      	pop	{r7}
 80013fe:	4770      	bx	lr
 8001400:	200001f0 	.word	0x200001f0

08001404 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001404:	b480      	push	{r7}
 8001406:	b085      	sub	sp, #20
 8001408:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800140a:	4b15      	ldr	r3, [pc, #84]	; (8001460 <HAL_MspInit+0x5c>)
 800140c:	699b      	ldr	r3, [r3, #24]
 800140e:	4a14      	ldr	r2, [pc, #80]	; (8001460 <HAL_MspInit+0x5c>)
 8001410:	f043 0301 	orr.w	r3, r3, #1
 8001414:	6193      	str	r3, [r2, #24]
 8001416:	4b12      	ldr	r3, [pc, #72]	; (8001460 <HAL_MspInit+0x5c>)
 8001418:	699b      	ldr	r3, [r3, #24]
 800141a:	f003 0301 	and.w	r3, r3, #1
 800141e:	60bb      	str	r3, [r7, #8]
 8001420:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001422:	4b0f      	ldr	r3, [pc, #60]	; (8001460 <HAL_MspInit+0x5c>)
 8001424:	69db      	ldr	r3, [r3, #28]
 8001426:	4a0e      	ldr	r2, [pc, #56]	; (8001460 <HAL_MspInit+0x5c>)
 8001428:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800142c:	61d3      	str	r3, [r2, #28]
 800142e:	4b0c      	ldr	r3, [pc, #48]	; (8001460 <HAL_MspInit+0x5c>)
 8001430:	69db      	ldr	r3, [r3, #28]
 8001432:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001436:	607b      	str	r3, [r7, #4]
 8001438:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800143a:	4b0a      	ldr	r3, [pc, #40]	; (8001464 <HAL_MspInit+0x60>)
 800143c:	685b      	ldr	r3, [r3, #4]
 800143e:	60fb      	str	r3, [r7, #12]
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001446:	60fb      	str	r3, [r7, #12]
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800144e:	60fb      	str	r3, [r7, #12]
 8001450:	4a04      	ldr	r2, [pc, #16]	; (8001464 <HAL_MspInit+0x60>)
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001456:	bf00      	nop
 8001458:	3714      	adds	r7, #20
 800145a:	46bd      	mov	sp, r7
 800145c:	bc80      	pop	{r7}
 800145e:	4770      	bx	lr
 8001460:	40021000 	.word	0x40021000
 8001464:	40010000 	.word	0x40010000

08001468 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b084      	sub	sp, #16
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001478:	d113      	bne.n	80014a2 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800147a:	4b0c      	ldr	r3, [pc, #48]	; (80014ac <HAL_TIM_Base_MspInit+0x44>)
 800147c:	69db      	ldr	r3, [r3, #28]
 800147e:	4a0b      	ldr	r2, [pc, #44]	; (80014ac <HAL_TIM_Base_MspInit+0x44>)
 8001480:	f043 0301 	orr.w	r3, r3, #1
 8001484:	61d3      	str	r3, [r2, #28]
 8001486:	4b09      	ldr	r3, [pc, #36]	; (80014ac <HAL_TIM_Base_MspInit+0x44>)
 8001488:	69db      	ldr	r3, [r3, #28]
 800148a:	f003 0301 	and.w	r3, r3, #1
 800148e:	60fb      	str	r3, [r7, #12]
 8001490:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001492:	2200      	movs	r2, #0
 8001494:	2100      	movs	r1, #0
 8001496:	201c      	movs	r0, #28
 8001498:	f000 fbab 	bl	8001bf2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800149c:	201c      	movs	r0, #28
 800149e:	f000 fbc4 	bl	8001c2a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80014a2:	bf00      	nop
 80014a4:	3710      	adds	r7, #16
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bd80      	pop	{r7, pc}
 80014aa:	bf00      	nop
 80014ac:	40021000 	.word	0x40021000

080014b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014b0:	b480      	push	{r7}
 80014b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80014b4:	e7fe      	b.n	80014b4 <NMI_Handler+0x4>

080014b6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014b6:	b480      	push	{r7}
 80014b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014ba:	e7fe      	b.n	80014ba <HardFault_Handler+0x4>

080014bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014bc:	b480      	push	{r7}
 80014be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014c0:	e7fe      	b.n	80014c0 <MemManage_Handler+0x4>

080014c2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014c2:	b480      	push	{r7}
 80014c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014c6:	e7fe      	b.n	80014c6 <BusFault_Handler+0x4>

080014c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014c8:	b480      	push	{r7}
 80014ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014cc:	e7fe      	b.n	80014cc <UsageFault_Handler+0x4>

080014ce <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014ce:	b480      	push	{r7}
 80014d0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014d2:	bf00      	nop
 80014d4:	46bd      	mov	sp, r7
 80014d6:	bc80      	pop	{r7}
 80014d8:	4770      	bx	lr

080014da <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014da:	b480      	push	{r7}
 80014dc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014de:	bf00      	nop
 80014e0:	46bd      	mov	sp, r7
 80014e2:	bc80      	pop	{r7}
 80014e4:	4770      	bx	lr

080014e6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014e6:	b480      	push	{r7}
 80014e8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014ea:	bf00      	nop
 80014ec:	46bd      	mov	sp, r7
 80014ee:	bc80      	pop	{r7}
 80014f0:	4770      	bx	lr

080014f2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014f2:	b580      	push	{r7, lr}
 80014f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014f6:	f000 fa89 	bl	8001a0c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014fa:	bf00      	nop
 80014fc:	bd80      	pop	{r7, pc}
	...

08001500 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001504:	4802      	ldr	r0, [pc, #8]	; (8001510 <TIM2_IRQHandler+0x10>)
 8001506:	f001 fa15 	bl	8002934 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800150a:	bf00      	nop
 800150c:	bd80      	pop	{r7, pc}
 800150e:	bf00      	nop
 8001510:	20000198 	.word	0x20000198

08001514 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001514:	b480      	push	{r7}
 8001516:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001518:	bf00      	nop
 800151a:	46bd      	mov	sp, r7
 800151c:	bc80      	pop	{r7}
 800151e:	4770      	bx	lr

08001520 <setTimer>:
 *      Author: Thảo Quảng
 */
#include "timer.h"

int TIMER_CYCLE = 1;
void setTimer(int index, int counter){
 8001520:	b480      	push	{r7}
 8001522:	b083      	sub	sp, #12
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
 8001528:	6039      	str	r1, [r7, #0]
	timer_flag[index] = 0;
 800152a:	4a09      	ldr	r2, [pc, #36]	; (8001550 <setTimer+0x30>)
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	2100      	movs	r1, #0
 8001530:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	timer_counter[index] = counter / TIMER_CYCLE;
 8001534:	4b07      	ldr	r3, [pc, #28]	; (8001554 <setTimer+0x34>)
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	683a      	ldr	r2, [r7, #0]
 800153a:	fb92 f2f3 	sdiv	r2, r2, r3
 800153e:	4906      	ldr	r1, [pc, #24]	; (8001558 <setTimer+0x38>)
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001546:	bf00      	nop
 8001548:	370c      	adds	r7, #12
 800154a:	46bd      	mov	sp, r7
 800154c:	bc80      	pop	{r7}
 800154e:	4770      	bx	lr
 8001550:	20000470 	.word	0x20000470
 8001554:	20000014 	.word	0x20000014
 8001558:	20000498 	.word	0x20000498

0800155c <timerRun>:

int timer_flag[10];
int timer_counter[10];
void timerRun(){
 800155c:	b480      	push	{r7}
 800155e:	b083      	sub	sp, #12
 8001560:	af00      	add	r7, sp, #0
	for (int i = 0; i < 10; i++) {
 8001562:	2300      	movs	r3, #0
 8001564:	607b      	str	r3, [r7, #4]
 8001566:	e01c      	b.n	80015a2 <timerRun+0x46>
		if (timer_counter[i] >= 0) {
 8001568:	4a12      	ldr	r2, [pc, #72]	; (80015b4 <timerRun+0x58>)
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001570:	2b00      	cmp	r3, #0
 8001572:	db13      	blt.n	800159c <timerRun+0x40>
			timer_counter[i]--;
 8001574:	4a0f      	ldr	r2, [pc, #60]	; (80015b4 <timerRun+0x58>)
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800157c:	1e5a      	subs	r2, r3, #1
 800157e:	490d      	ldr	r1, [pc, #52]	; (80015b4 <timerRun+0x58>)
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			if (timer_counter[i] <= 0) {
 8001586:	4a0b      	ldr	r2, [pc, #44]	; (80015b4 <timerRun+0x58>)
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800158e:	2b00      	cmp	r3, #0
 8001590:	dc04      	bgt.n	800159c <timerRun+0x40>
				timer_flag[i] = 1;
 8001592:	4a09      	ldr	r2, [pc, #36]	; (80015b8 <timerRun+0x5c>)
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	2101      	movs	r1, #1
 8001598:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i = 0; i < 10; i++) {
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	3301      	adds	r3, #1
 80015a0:	607b      	str	r3, [r7, #4]
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	2b09      	cmp	r3, #9
 80015a6:	dddf      	ble.n	8001568 <timerRun+0xc>
			}
		}
	}
}
 80015a8:	bf00      	nop
 80015aa:	bf00      	nop
 80015ac:	370c      	adds	r7, #12
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bc80      	pop	{r7}
 80015b2:	4770      	bx	lr
 80015b4:	20000498 	.word	0x20000498
 80015b8:	20000470 	.word	0x20000470

080015bc <trafficGreenRed>:

int redTime = 5;
int yellowTime = 2;
int greenTime = 3;

void trafficGreenRed() {
 80015bc:	b580      	push	{r7, lr}
 80015be:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, GPIO_PIN_RESET);
 80015c0:	2200      	movs	r2, #0
 80015c2:	2108      	movs	r1, #8
 80015c4:	480e      	ldr	r0, [pc, #56]	; (8001600 <trafficGreenRed+0x44>)
 80015c6:	f000 fcf6 	bl	8001fb6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED5_GPIO_Port, LED5_Pin, GPIO_PIN_RESET);
 80015ca:	2200      	movs	r2, #0
 80015cc:	2110      	movs	r1, #16
 80015ce:	480c      	ldr	r0, [pc, #48]	; (8001600 <trafficGreenRed+0x44>)
 80015d0:	f000 fcf1 	bl	8001fb6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED6_GPIO_Port, LED6_Pin, GPIO_PIN_SET);
 80015d4:	2201      	movs	r2, #1
 80015d6:	2120      	movs	r1, #32
 80015d8:	4809      	ldr	r0, [pc, #36]	; (8001600 <trafficGreenRed+0x44>)
 80015da:	f000 fcec 	bl	8001fb6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 80015de:	2201      	movs	r2, #1
 80015e0:	2101      	movs	r1, #1
 80015e2:	4807      	ldr	r0, [pc, #28]	; (8001600 <trafficGreenRed+0x44>)
 80015e4:	f000 fce7 	bl	8001fb6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 80015e8:	2200      	movs	r2, #0
 80015ea:	2102      	movs	r1, #2
 80015ec:	4804      	ldr	r0, [pc, #16]	; (8001600 <trafficGreenRed+0x44>)
 80015ee:	f000 fce2 	bl	8001fb6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET);
 80015f2:	2200      	movs	r2, #0
 80015f4:	2104      	movs	r1, #4
 80015f6:	4802      	ldr	r0, [pc, #8]	; (8001600 <trafficGreenRed+0x44>)
 80015f8:	f000 fcdd 	bl	8001fb6 <HAL_GPIO_WritePin>
}
 80015fc:	bf00      	nop
 80015fe:	bd80      	pop	{r7, pc}
 8001600:	40011000 	.word	0x40011000

08001604 <trafficYellowRed>:
void trafficYellowRed() {
 8001604:	b580      	push	{r7, lr}
 8001606:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, GPIO_PIN_RESET);
 8001608:	2200      	movs	r2, #0
 800160a:	2108      	movs	r1, #8
 800160c:	480e      	ldr	r0, [pc, #56]	; (8001648 <trafficYellowRed+0x44>)
 800160e:	f000 fcd2 	bl	8001fb6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED5_GPIO_Port, LED5_Pin, GPIO_PIN_SET);
 8001612:	2201      	movs	r2, #1
 8001614:	2110      	movs	r1, #16
 8001616:	480c      	ldr	r0, [pc, #48]	; (8001648 <trafficYellowRed+0x44>)
 8001618:	f000 fccd 	bl	8001fb6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED6_GPIO_Port, LED6_Pin, GPIO_PIN_RESET);
 800161c:	2200      	movs	r2, #0
 800161e:	2120      	movs	r1, #32
 8001620:	4809      	ldr	r0, [pc, #36]	; (8001648 <trafficYellowRed+0x44>)
 8001622:	f000 fcc8 	bl	8001fb6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 8001626:	2201      	movs	r2, #1
 8001628:	2101      	movs	r1, #1
 800162a:	4807      	ldr	r0, [pc, #28]	; (8001648 <trafficYellowRed+0x44>)
 800162c:	f000 fcc3 	bl	8001fb6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 8001630:	2200      	movs	r2, #0
 8001632:	2102      	movs	r1, #2
 8001634:	4804      	ldr	r0, [pc, #16]	; (8001648 <trafficYellowRed+0x44>)
 8001636:	f000 fcbe 	bl	8001fb6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET);
 800163a:	2200      	movs	r2, #0
 800163c:	2104      	movs	r1, #4
 800163e:	4802      	ldr	r0, [pc, #8]	; (8001648 <trafficYellowRed+0x44>)
 8001640:	f000 fcb9 	bl	8001fb6 <HAL_GPIO_WritePin>
}
 8001644:	bf00      	nop
 8001646:	bd80      	pop	{r7, pc}
 8001648:	40011000 	.word	0x40011000

0800164c <trafficRedGreen>:
void trafficRedGreen() {
 800164c:	b580      	push	{r7, lr}
 800164e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, GPIO_PIN_SET);
 8001650:	2201      	movs	r2, #1
 8001652:	2108      	movs	r1, #8
 8001654:	480e      	ldr	r0, [pc, #56]	; (8001690 <trafficRedGreen+0x44>)
 8001656:	f000 fcae 	bl	8001fb6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED5_GPIO_Port, LED5_Pin, GPIO_PIN_RESET);
 800165a:	2200      	movs	r2, #0
 800165c:	2110      	movs	r1, #16
 800165e:	480c      	ldr	r0, [pc, #48]	; (8001690 <trafficRedGreen+0x44>)
 8001660:	f000 fca9 	bl	8001fb6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED6_GPIO_Port, LED6_Pin, GPIO_PIN_RESET);
 8001664:	2200      	movs	r2, #0
 8001666:	2120      	movs	r1, #32
 8001668:	4809      	ldr	r0, [pc, #36]	; (8001690 <trafficRedGreen+0x44>)
 800166a:	f000 fca4 	bl	8001fb6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 800166e:	2200      	movs	r2, #0
 8001670:	2101      	movs	r1, #1
 8001672:	4807      	ldr	r0, [pc, #28]	; (8001690 <trafficRedGreen+0x44>)
 8001674:	f000 fc9f 	bl	8001fb6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 8001678:	2200      	movs	r2, #0
 800167a:	2102      	movs	r1, #2
 800167c:	4804      	ldr	r0, [pc, #16]	; (8001690 <trafficRedGreen+0x44>)
 800167e:	f000 fc9a 	bl	8001fb6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_SET);
 8001682:	2201      	movs	r2, #1
 8001684:	2104      	movs	r1, #4
 8001686:	4802      	ldr	r0, [pc, #8]	; (8001690 <trafficRedGreen+0x44>)
 8001688:	f000 fc95 	bl	8001fb6 <HAL_GPIO_WritePin>
}
 800168c:	bf00      	nop
 800168e:	bd80      	pop	{r7, pc}
 8001690:	40011000 	.word	0x40011000

08001694 <trafficRedYellow>:
void trafficRedYellow() {
 8001694:	b580      	push	{r7, lr}
 8001696:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, GPIO_PIN_SET);
 8001698:	2201      	movs	r2, #1
 800169a:	2108      	movs	r1, #8
 800169c:	480e      	ldr	r0, [pc, #56]	; (80016d8 <trafficRedYellow+0x44>)
 800169e:	f000 fc8a 	bl	8001fb6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED5_GPIO_Port, LED5_Pin, GPIO_PIN_RESET);
 80016a2:	2200      	movs	r2, #0
 80016a4:	2110      	movs	r1, #16
 80016a6:	480c      	ldr	r0, [pc, #48]	; (80016d8 <trafficRedYellow+0x44>)
 80016a8:	f000 fc85 	bl	8001fb6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED6_GPIO_Port, LED6_Pin, GPIO_PIN_RESET);
 80016ac:	2200      	movs	r2, #0
 80016ae:	2120      	movs	r1, #32
 80016b0:	4809      	ldr	r0, [pc, #36]	; (80016d8 <trafficRedYellow+0x44>)
 80016b2:	f000 fc80 	bl	8001fb6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 80016b6:	2200      	movs	r2, #0
 80016b8:	2101      	movs	r1, #1
 80016ba:	4807      	ldr	r0, [pc, #28]	; (80016d8 <trafficRedYellow+0x44>)
 80016bc:	f000 fc7b 	bl	8001fb6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
 80016c0:	2201      	movs	r2, #1
 80016c2:	2102      	movs	r1, #2
 80016c4:	4804      	ldr	r0, [pc, #16]	; (80016d8 <trafficRedYellow+0x44>)
 80016c6:	f000 fc76 	bl	8001fb6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET);
 80016ca:	2200      	movs	r2, #0
 80016cc:	2104      	movs	r1, #4
 80016ce:	4802      	ldr	r0, [pc, #8]	; (80016d8 <trafficRedYellow+0x44>)
 80016d0:	f000 fc71 	bl	8001fb6 <HAL_GPIO_WritePin>
}
 80016d4:	bf00      	nop
 80016d6:	bd80      	pop	{r7, pc}
 80016d8:	40011000 	.word	0x40011000

080016dc <updateRedTime>:

void updateRedTime() {
 80016dc:	b480      	push	{r7}
 80016de:	af00      	add	r7, sp, #0
	if (redTime < 99) {
 80016e0:	4b08      	ldr	r3, [pc, #32]	; (8001704 <updateRedTime+0x28>)
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	2b62      	cmp	r3, #98	; 0x62
 80016e6:	dc09      	bgt.n	80016fc <updateRedTime+0x20>
		redTime++;
 80016e8:	4b06      	ldr	r3, [pc, #24]	; (8001704 <updateRedTime+0x28>)
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	3301      	adds	r3, #1
 80016ee:	4a05      	ldr	r2, [pc, #20]	; (8001704 <updateRedTime+0x28>)
 80016f0:	6013      	str	r3, [r2, #0]
		greenTime++;
 80016f2:	4b05      	ldr	r3, [pc, #20]	; (8001708 <updateRedTime+0x2c>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	3301      	adds	r3, #1
 80016f8:	4a03      	ldr	r2, [pc, #12]	; (8001708 <updateRedTime+0x2c>)
 80016fa:	6013      	str	r3, [r2, #0]
	}
}
 80016fc:	bf00      	nop
 80016fe:	46bd      	mov	sp, r7
 8001700:	bc80      	pop	{r7}
 8001702:	4770      	bx	lr
 8001704:	20000018 	.word	0x20000018
 8001708:	20000020 	.word	0x20000020

0800170c <updateGreenTime>:
void updateGreenTime() {
 800170c:	b480      	push	{r7}
 800170e:	af00      	add	r7, sp, #0
	if (redTime < 99) {
 8001710:	4b08      	ldr	r3, [pc, #32]	; (8001734 <updateGreenTime+0x28>)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	2b62      	cmp	r3, #98	; 0x62
 8001716:	dc09      	bgt.n	800172c <updateGreenTime+0x20>
		greenTime++;
 8001718:	4b07      	ldr	r3, [pc, #28]	; (8001738 <updateGreenTime+0x2c>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	3301      	adds	r3, #1
 800171e:	4a06      	ldr	r2, [pc, #24]	; (8001738 <updateGreenTime+0x2c>)
 8001720:	6013      	str	r3, [r2, #0]
		redTime++;
 8001722:	4b04      	ldr	r3, [pc, #16]	; (8001734 <updateGreenTime+0x28>)
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	3301      	adds	r3, #1
 8001728:	4a02      	ldr	r2, [pc, #8]	; (8001734 <updateGreenTime+0x28>)
 800172a:	6013      	str	r3, [r2, #0]
	}
}
 800172c:	bf00      	nop
 800172e:	46bd      	mov	sp, r7
 8001730:	bc80      	pop	{r7}
 8001732:	4770      	bx	lr
 8001734:	20000018 	.word	0x20000018
 8001738:	20000020 	.word	0x20000020

0800173c <updateYellowTime>:
void updateYellowTime() {
 800173c:	b480      	push	{r7}
 800173e:	af00      	add	r7, sp, #0
	if (redTime < 99 && yellowTime < greenTime) {
 8001740:	4b0b      	ldr	r3, [pc, #44]	; (8001770 <updateYellowTime+0x34>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	2b62      	cmp	r3, #98	; 0x62
 8001746:	dc0f      	bgt.n	8001768 <updateYellowTime+0x2c>
 8001748:	4b0a      	ldr	r3, [pc, #40]	; (8001774 <updateYellowTime+0x38>)
 800174a:	681a      	ldr	r2, [r3, #0]
 800174c:	4b0a      	ldr	r3, [pc, #40]	; (8001778 <updateYellowTime+0x3c>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	429a      	cmp	r2, r3
 8001752:	da09      	bge.n	8001768 <updateYellowTime+0x2c>
		yellowTime++;
 8001754:	4b07      	ldr	r3, [pc, #28]	; (8001774 <updateYellowTime+0x38>)
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	3301      	adds	r3, #1
 800175a:	4a06      	ldr	r2, [pc, #24]	; (8001774 <updateYellowTime+0x38>)
 800175c:	6013      	str	r3, [r2, #0]
		redTime++;
 800175e:	4b04      	ldr	r3, [pc, #16]	; (8001770 <updateYellowTime+0x34>)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	3301      	adds	r3, #1
 8001764:	4a02      	ldr	r2, [pc, #8]	; (8001770 <updateYellowTime+0x34>)
 8001766:	6013      	str	r3, [r2, #0]
	}
}
 8001768:	bf00      	nop
 800176a:	46bd      	mov	sp, r7
 800176c:	bc80      	pop	{r7}
 800176e:	4770      	bx	lr
 8001770:	20000018 	.word	0x20000018
 8001774:	2000001c 	.word	0x2000001c
 8001778:	20000020 	.word	0x20000020

0800177c <setRedTime>:

void setRedTime(int redValue) {
 800177c:	b480      	push	{r7}
 800177e:	b083      	sub	sp, #12
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
	redTime = redValue;
 8001784:	4a03      	ldr	r2, [pc, #12]	; (8001794 <setRedTime+0x18>)
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	6013      	str	r3, [r2, #0]
}
 800178a:	bf00      	nop
 800178c:	370c      	adds	r7, #12
 800178e:	46bd      	mov	sp, r7
 8001790:	bc80      	pop	{r7}
 8001792:	4770      	bx	lr
 8001794:	20000018 	.word	0x20000018

08001798 <setYellowTime>:
void setYellowTime(int yellowValue) {
 8001798:	b480      	push	{r7}
 800179a:	b083      	sub	sp, #12
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
	yellowTime = yellowValue;
 80017a0:	4a03      	ldr	r2, [pc, #12]	; (80017b0 <setYellowTime+0x18>)
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	6013      	str	r3, [r2, #0]
}
 80017a6:	bf00      	nop
 80017a8:	370c      	adds	r7, #12
 80017aa:	46bd      	mov	sp, r7
 80017ac:	bc80      	pop	{r7}
 80017ae:	4770      	bx	lr
 80017b0:	2000001c 	.word	0x2000001c

080017b4 <setGreenTime>:
void setGreenTime(int greenValue) {
 80017b4:	b480      	push	{r7}
 80017b6:	b083      	sub	sp, #12
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
	greenTime = greenValue;
 80017bc:	4a03      	ldr	r2, [pc, #12]	; (80017cc <setGreenTime+0x18>)
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	6013      	str	r3, [r2, #0]
}
 80017c2:	bf00      	nop
 80017c4:	370c      	adds	r7, #12
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bc80      	pop	{r7}
 80017ca:	4770      	bx	lr
 80017cc:	20000020 	.word	0x20000020

080017d0 <clearTrafficLight>:

void clearTrafficLight() {
 80017d0:	b580      	push	{r7, lr}
 80017d2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, GPIO_PIN_RESET);
 80017d4:	2200      	movs	r2, #0
 80017d6:	2108      	movs	r1, #8
 80017d8:	480e      	ldr	r0, [pc, #56]	; (8001814 <clearTrafficLight+0x44>)
 80017da:	f000 fbec 	bl	8001fb6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED5_GPIO_Port, LED5_Pin, GPIO_PIN_RESET);
 80017de:	2200      	movs	r2, #0
 80017e0:	2110      	movs	r1, #16
 80017e2:	480c      	ldr	r0, [pc, #48]	; (8001814 <clearTrafficLight+0x44>)
 80017e4:	f000 fbe7 	bl	8001fb6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED6_GPIO_Port, LED6_Pin, GPIO_PIN_RESET);
 80017e8:	2200      	movs	r2, #0
 80017ea:	2120      	movs	r1, #32
 80017ec:	4809      	ldr	r0, [pc, #36]	; (8001814 <clearTrafficLight+0x44>)
 80017ee:	f000 fbe2 	bl	8001fb6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 80017f2:	2200      	movs	r2, #0
 80017f4:	2101      	movs	r1, #1
 80017f6:	4807      	ldr	r0, [pc, #28]	; (8001814 <clearTrafficLight+0x44>)
 80017f8:	f000 fbdd 	bl	8001fb6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 80017fc:	2200      	movs	r2, #0
 80017fe:	2102      	movs	r1, #2
 8001800:	4804      	ldr	r0, [pc, #16]	; (8001814 <clearTrafficLight+0x44>)
 8001802:	f000 fbd8 	bl	8001fb6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET);
 8001806:	2200      	movs	r2, #0
 8001808:	2104      	movs	r1, #4
 800180a:	4802      	ldr	r0, [pc, #8]	; (8001814 <clearTrafficLight+0x44>)
 800180c:	f000 fbd3 	bl	8001fb6 <HAL_GPIO_WritePin>
}
 8001810:	bf00      	nop
 8001812:	bd80      	pop	{r7, pc}
 8001814:	40011000 	.word	0x40011000

08001818 <blinkRedLed>:

void blinkRedLed() {
 8001818:	b580      	push	{r7, lr}
 800181a:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LED4_GPIO_Port, LED4_Pin);
 800181c:	2108      	movs	r1, #8
 800181e:	480e      	ldr	r0, [pc, #56]	; (8001858 <blinkRedLed+0x40>)
 8001820:	f000 fbe1 	bl	8001fe6 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 8001824:	2101      	movs	r1, #1
 8001826:	480c      	ldr	r0, [pc, #48]	; (8001858 <blinkRedLed+0x40>)
 8001828:	f000 fbdd 	bl	8001fe6 <HAL_GPIO_TogglePin>
	HAL_GPIO_WritePin(LED5_GPIO_Port, LED5_Pin, GPIO_PIN_RESET);
 800182c:	2200      	movs	r2, #0
 800182e:	2110      	movs	r1, #16
 8001830:	4809      	ldr	r0, [pc, #36]	; (8001858 <blinkRedLed+0x40>)
 8001832:	f000 fbc0 	bl	8001fb6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED6_GPIO_Port, LED6_Pin, GPIO_PIN_RESET);
 8001836:	2200      	movs	r2, #0
 8001838:	2120      	movs	r1, #32
 800183a:	4807      	ldr	r0, [pc, #28]	; (8001858 <blinkRedLed+0x40>)
 800183c:	f000 fbbb 	bl	8001fb6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 8001840:	2200      	movs	r2, #0
 8001842:	2102      	movs	r1, #2
 8001844:	4804      	ldr	r0, [pc, #16]	; (8001858 <blinkRedLed+0x40>)
 8001846:	f000 fbb6 	bl	8001fb6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET);
 800184a:	2200      	movs	r2, #0
 800184c:	2104      	movs	r1, #4
 800184e:	4802      	ldr	r0, [pc, #8]	; (8001858 <blinkRedLed+0x40>)
 8001850:	f000 fbb1 	bl	8001fb6 <HAL_GPIO_WritePin>
}
 8001854:	bf00      	nop
 8001856:	bd80      	pop	{r7, pc}
 8001858:	40011000 	.word	0x40011000

0800185c <blinkYellowLed>:
void blinkYellowLed() {
 800185c:	b580      	push	{r7, lr}
 800185e:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LED5_GPIO_Port, LED5_Pin);
 8001860:	2110      	movs	r1, #16
 8001862:	480e      	ldr	r0, [pc, #56]	; (800189c <blinkYellowLed+0x40>)
 8001864:	f000 fbbf 	bl	8001fe6 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 8001868:	2102      	movs	r1, #2
 800186a:	480c      	ldr	r0, [pc, #48]	; (800189c <blinkYellowLed+0x40>)
 800186c:	f000 fbbb 	bl	8001fe6 <HAL_GPIO_TogglePin>
	HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, GPIO_PIN_RESET);
 8001870:	2200      	movs	r2, #0
 8001872:	2108      	movs	r1, #8
 8001874:	4809      	ldr	r0, [pc, #36]	; (800189c <blinkYellowLed+0x40>)
 8001876:	f000 fb9e 	bl	8001fb6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED6_GPIO_Port, LED6_Pin, GPIO_PIN_RESET);
 800187a:	2200      	movs	r2, #0
 800187c:	2120      	movs	r1, #32
 800187e:	4807      	ldr	r0, [pc, #28]	; (800189c <blinkYellowLed+0x40>)
 8001880:	f000 fb99 	bl	8001fb6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8001884:	2200      	movs	r2, #0
 8001886:	2101      	movs	r1, #1
 8001888:	4804      	ldr	r0, [pc, #16]	; (800189c <blinkYellowLed+0x40>)
 800188a:	f000 fb94 	bl	8001fb6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET);
 800188e:	2200      	movs	r2, #0
 8001890:	2104      	movs	r1, #4
 8001892:	4802      	ldr	r0, [pc, #8]	; (800189c <blinkYellowLed+0x40>)
 8001894:	f000 fb8f 	bl	8001fb6 <HAL_GPIO_WritePin>
}
 8001898:	bf00      	nop
 800189a:	bd80      	pop	{r7, pc}
 800189c:	40011000 	.word	0x40011000

080018a0 <blinkGreenLed>:
void blinkGreenLed() {
 80018a0:	b580      	push	{r7, lr}
 80018a2:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LED6_GPIO_Port, LED6_Pin);
 80018a4:	2120      	movs	r1, #32
 80018a6:	480e      	ldr	r0, [pc, #56]	; (80018e0 <blinkGreenLed+0x40>)
 80018a8:	f000 fb9d 	bl	8001fe6 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin);
 80018ac:	2104      	movs	r1, #4
 80018ae:	480c      	ldr	r0, [pc, #48]	; (80018e0 <blinkGreenLed+0x40>)
 80018b0:	f000 fb99 	bl	8001fe6 <HAL_GPIO_TogglePin>
	HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, GPIO_PIN_RESET);
 80018b4:	2200      	movs	r2, #0
 80018b6:	2108      	movs	r1, #8
 80018b8:	4809      	ldr	r0, [pc, #36]	; (80018e0 <blinkGreenLed+0x40>)
 80018ba:	f000 fb7c 	bl	8001fb6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED5_GPIO_Port, LED5_Pin, GPIO_PIN_RESET);
 80018be:	2200      	movs	r2, #0
 80018c0:	2110      	movs	r1, #16
 80018c2:	4807      	ldr	r0, [pc, #28]	; (80018e0 <blinkGreenLed+0x40>)
 80018c4:	f000 fb77 	bl	8001fb6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 80018c8:	2200      	movs	r2, #0
 80018ca:	2101      	movs	r1, #1
 80018cc:	4804      	ldr	r0, [pc, #16]	; (80018e0 <blinkGreenLed+0x40>)
 80018ce:	f000 fb72 	bl	8001fb6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 80018d2:	2200      	movs	r2, #0
 80018d4:	2102      	movs	r1, #2
 80018d6:	4802      	ldr	r0, [pc, #8]	; (80018e0 <blinkGreenLed+0x40>)
 80018d8:	f000 fb6d 	bl	8001fb6 <HAL_GPIO_WritePin>
}
 80018dc:	bf00      	nop
 80018de:	bd80      	pop	{r7, pc}
 80018e0:	40011000 	.word	0x40011000

080018e4 <blinkAllLed>:

void blinkAllLed() {
 80018e4:	b580      	push	{r7, lr}
 80018e6:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LED4_GPIO_Port, LED4_Pin);
 80018e8:	2108      	movs	r1, #8
 80018ea:	480c      	ldr	r0, [pc, #48]	; (800191c <blinkAllLed+0x38>)
 80018ec:	f000 fb7b 	bl	8001fe6 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 80018f0:	2101      	movs	r1, #1
 80018f2:	480a      	ldr	r0, [pc, #40]	; (800191c <blinkAllLed+0x38>)
 80018f4:	f000 fb77 	bl	8001fe6 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(LED5_GPIO_Port, LED5_Pin);
 80018f8:	2110      	movs	r1, #16
 80018fa:	4808      	ldr	r0, [pc, #32]	; (800191c <blinkAllLed+0x38>)
 80018fc:	f000 fb73 	bl	8001fe6 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 8001900:	2102      	movs	r1, #2
 8001902:	4806      	ldr	r0, [pc, #24]	; (800191c <blinkAllLed+0x38>)
 8001904:	f000 fb6f 	bl	8001fe6 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(LED6_GPIO_Port, LED6_Pin);
 8001908:	2120      	movs	r1, #32
 800190a:	4804      	ldr	r0, [pc, #16]	; (800191c <blinkAllLed+0x38>)
 800190c:	f000 fb6b 	bl	8001fe6 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin);
 8001910:	2104      	movs	r1, #4
 8001912:	4802      	ldr	r0, [pc, #8]	; (800191c <blinkAllLed+0x38>)
 8001914:	f000 fb67 	bl	8001fe6 <HAL_GPIO_TogglePin>
}
 8001918:	bf00      	nop
 800191a:	bd80      	pop	{r7, pc}
 800191c:	40011000 	.word	0x40011000

08001920 <blinkDot>:

void blinkDot() {
 8001920:	b580      	push	{r7, lr}
 8001922:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LED7_GPIO_Port, LED7_Pin);
 8001924:	2180      	movs	r1, #128	; 0x80
 8001926:	4802      	ldr	r0, [pc, #8]	; (8001930 <blinkDot+0x10>)
 8001928:	f000 fb5d 	bl	8001fe6 <HAL_GPIO_TogglePin>
}
 800192c:	bf00      	nop
 800192e:	bd80      	pop	{r7, pc}
 8001930:	40011000 	.word	0x40011000

08001934 <Reset_Handler>:
 8001934:	f7ff fdee 	bl	8001514 <SystemInit>
 8001938:	480b      	ldr	r0, [pc, #44]	; (8001968 <LoopFillZerobss+0xe>)
 800193a:	490c      	ldr	r1, [pc, #48]	; (800196c <LoopFillZerobss+0x12>)
 800193c:	4a0c      	ldr	r2, [pc, #48]	; (8001970 <LoopFillZerobss+0x16>)
 800193e:	2300      	movs	r3, #0
 8001940:	e002      	b.n	8001948 <LoopCopyDataInit>

08001942 <CopyDataInit>:
 8001942:	58d4      	ldr	r4, [r2, r3]
 8001944:	50c4      	str	r4, [r0, r3]
 8001946:	3304      	adds	r3, #4

08001948 <LoopCopyDataInit>:
 8001948:	18c4      	adds	r4, r0, r3
 800194a:	428c      	cmp	r4, r1
 800194c:	d3f9      	bcc.n	8001942 <CopyDataInit>
 800194e:	4a09      	ldr	r2, [pc, #36]	; (8001974 <LoopFillZerobss+0x1a>)
 8001950:	4c09      	ldr	r4, [pc, #36]	; (8001978 <LoopFillZerobss+0x1e>)
 8001952:	2300      	movs	r3, #0
 8001954:	e001      	b.n	800195a <LoopFillZerobss>

08001956 <FillZerobss>:
 8001956:	6013      	str	r3, [r2, #0]
 8001958:	3204      	adds	r2, #4

0800195a <LoopFillZerobss>:
 800195a:	42a2      	cmp	r2, r4
 800195c:	d3fb      	bcc.n	8001956 <FillZerobss>
 800195e:	f001 fb67 	bl	8003030 <__libc_init_array>
 8001962:	f7ff f955 	bl	8000c10 <main>
 8001966:	4770      	bx	lr
 8001968:	20000000 	.word	0x20000000
 800196c:	2000002c 	.word	0x2000002c
 8001970:	080030bc 	.word	0x080030bc
 8001974:	2000002c 	.word	0x2000002c
 8001978:	200004c4 	.word	0x200004c4

0800197c <ADC1_2_IRQHandler>:
 800197c:	e7fe      	b.n	800197c <ADC1_2_IRQHandler>
	...

08001980 <HAL_Init>:
 8001980:	b580      	push	{r7, lr}
 8001982:	af00      	add	r7, sp, #0
 8001984:	4b08      	ldr	r3, [pc, #32]	; (80019a8 <HAL_Init+0x28>)
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	4a07      	ldr	r2, [pc, #28]	; (80019a8 <HAL_Init+0x28>)
 800198a:	f043 0310 	orr.w	r3, r3, #16
 800198e:	6013      	str	r3, [r2, #0]
 8001990:	2003      	movs	r0, #3
 8001992:	f000 f923 	bl	8001bdc <HAL_NVIC_SetPriorityGrouping>
 8001996:	200f      	movs	r0, #15
 8001998:	f000 f808 	bl	80019ac <HAL_InitTick>
 800199c:	f7ff fd32 	bl	8001404 <HAL_MspInit>
 80019a0:	2300      	movs	r3, #0
 80019a2:	4618      	mov	r0, r3
 80019a4:	bd80      	pop	{r7, pc}
 80019a6:	bf00      	nop
 80019a8:	40022000 	.word	0x40022000

080019ac <HAL_InitTick>:
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b082      	sub	sp, #8
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
 80019b4:	4b12      	ldr	r3, [pc, #72]	; (8001a00 <HAL_InitTick+0x54>)
 80019b6:	681a      	ldr	r2, [r3, #0]
 80019b8:	4b12      	ldr	r3, [pc, #72]	; (8001a04 <HAL_InitTick+0x58>)
 80019ba:	781b      	ldrb	r3, [r3, #0]
 80019bc:	4619      	mov	r1, r3
 80019be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80019c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80019ca:	4618      	mov	r0, r3
 80019cc:	f000 f93b 	bl	8001c46 <HAL_SYSTICK_Config>
 80019d0:	4603      	mov	r3, r0
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d001      	beq.n	80019da <HAL_InitTick+0x2e>
 80019d6:	2301      	movs	r3, #1
 80019d8:	e00e      	b.n	80019f8 <HAL_InitTick+0x4c>
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	2b0f      	cmp	r3, #15
 80019de:	d80a      	bhi.n	80019f6 <HAL_InitTick+0x4a>
 80019e0:	2200      	movs	r2, #0
 80019e2:	6879      	ldr	r1, [r7, #4]
 80019e4:	f04f 30ff 	mov.w	r0, #4294967295
 80019e8:	f000 f903 	bl	8001bf2 <HAL_NVIC_SetPriority>
 80019ec:	4a06      	ldr	r2, [pc, #24]	; (8001a08 <HAL_InitTick+0x5c>)
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	6013      	str	r3, [r2, #0]
 80019f2:	2300      	movs	r3, #0
 80019f4:	e000      	b.n	80019f8 <HAL_InitTick+0x4c>
 80019f6:	2301      	movs	r3, #1
 80019f8:	4618      	mov	r0, r3
 80019fa:	3708      	adds	r7, #8
 80019fc:	46bd      	mov	sp, r7
 80019fe:	bd80      	pop	{r7, pc}
 8001a00:	20000010 	.word	0x20000010
 8001a04:	20000028 	.word	0x20000028
 8001a08:	20000024 	.word	0x20000024

08001a0c <HAL_IncTick>:
 8001a0c:	b480      	push	{r7}
 8001a0e:	af00      	add	r7, sp, #0
 8001a10:	4b05      	ldr	r3, [pc, #20]	; (8001a28 <HAL_IncTick+0x1c>)
 8001a12:	781b      	ldrb	r3, [r3, #0]
 8001a14:	461a      	mov	r2, r3
 8001a16:	4b05      	ldr	r3, [pc, #20]	; (8001a2c <HAL_IncTick+0x20>)
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	4413      	add	r3, r2
 8001a1c:	4a03      	ldr	r2, [pc, #12]	; (8001a2c <HAL_IncTick+0x20>)
 8001a1e:	6013      	str	r3, [r2, #0]
 8001a20:	bf00      	nop
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bc80      	pop	{r7}
 8001a26:	4770      	bx	lr
 8001a28:	20000028 	.word	0x20000028
 8001a2c:	200004c0 	.word	0x200004c0

08001a30 <HAL_GetTick>:
 8001a30:	b480      	push	{r7}
 8001a32:	af00      	add	r7, sp, #0
 8001a34:	4b02      	ldr	r3, [pc, #8]	; (8001a40 <HAL_GetTick+0x10>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	4618      	mov	r0, r3
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bc80      	pop	{r7}
 8001a3e:	4770      	bx	lr
 8001a40:	200004c0 	.word	0x200004c0

08001a44 <__NVIC_SetPriorityGrouping>:
 8001a44:	b480      	push	{r7}
 8001a46:	b085      	sub	sp, #20
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	f003 0307 	and.w	r3, r3, #7
 8001a52:	60fb      	str	r3, [r7, #12]
 8001a54:	4b0c      	ldr	r3, [pc, #48]	; (8001a88 <__NVIC_SetPriorityGrouping+0x44>)
 8001a56:	68db      	ldr	r3, [r3, #12]
 8001a58:	60bb      	str	r3, [r7, #8]
 8001a5a:	68ba      	ldr	r2, [r7, #8]
 8001a5c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001a60:	4013      	ands	r3, r2
 8001a62:	60bb      	str	r3, [r7, #8]
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	021a      	lsls	r2, r3, #8
 8001a68:	68bb      	ldr	r3, [r7, #8]
 8001a6a:	4313      	orrs	r3, r2
 8001a6c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001a70:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a74:	60bb      	str	r3, [r7, #8]
 8001a76:	4a04      	ldr	r2, [pc, #16]	; (8001a88 <__NVIC_SetPriorityGrouping+0x44>)
 8001a78:	68bb      	ldr	r3, [r7, #8]
 8001a7a:	60d3      	str	r3, [r2, #12]
 8001a7c:	bf00      	nop
 8001a7e:	3714      	adds	r7, #20
 8001a80:	46bd      	mov	sp, r7
 8001a82:	bc80      	pop	{r7}
 8001a84:	4770      	bx	lr
 8001a86:	bf00      	nop
 8001a88:	e000ed00 	.word	0xe000ed00

08001a8c <__NVIC_GetPriorityGrouping>:
 8001a8c:	b480      	push	{r7}
 8001a8e:	af00      	add	r7, sp, #0
 8001a90:	4b04      	ldr	r3, [pc, #16]	; (8001aa4 <__NVIC_GetPriorityGrouping+0x18>)
 8001a92:	68db      	ldr	r3, [r3, #12]
 8001a94:	0a1b      	lsrs	r3, r3, #8
 8001a96:	f003 0307 	and.w	r3, r3, #7
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	bc80      	pop	{r7}
 8001aa0:	4770      	bx	lr
 8001aa2:	bf00      	nop
 8001aa4:	e000ed00 	.word	0xe000ed00

08001aa8 <__NVIC_EnableIRQ>:
 8001aa8:	b480      	push	{r7}
 8001aaa:	b083      	sub	sp, #12
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	4603      	mov	r3, r0
 8001ab0:	71fb      	strb	r3, [r7, #7]
 8001ab2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	db0b      	blt.n	8001ad2 <__NVIC_EnableIRQ+0x2a>
 8001aba:	79fb      	ldrb	r3, [r7, #7]
 8001abc:	f003 021f 	and.w	r2, r3, #31
 8001ac0:	4906      	ldr	r1, [pc, #24]	; (8001adc <__NVIC_EnableIRQ+0x34>)
 8001ac2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ac6:	095b      	lsrs	r3, r3, #5
 8001ac8:	2001      	movs	r0, #1
 8001aca:	fa00 f202 	lsl.w	r2, r0, r2
 8001ace:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8001ad2:	bf00      	nop
 8001ad4:	370c      	adds	r7, #12
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bc80      	pop	{r7}
 8001ada:	4770      	bx	lr
 8001adc:	e000e100 	.word	0xe000e100

08001ae0 <__NVIC_SetPriority>:
 8001ae0:	b480      	push	{r7}
 8001ae2:	b083      	sub	sp, #12
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	6039      	str	r1, [r7, #0]
 8001aea:	71fb      	strb	r3, [r7, #7]
 8001aec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	db0a      	blt.n	8001b0a <__NVIC_SetPriority+0x2a>
 8001af4:	683b      	ldr	r3, [r7, #0]
 8001af6:	b2da      	uxtb	r2, r3
 8001af8:	490c      	ldr	r1, [pc, #48]	; (8001b2c <__NVIC_SetPriority+0x4c>)
 8001afa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001afe:	0112      	lsls	r2, r2, #4
 8001b00:	b2d2      	uxtb	r2, r2
 8001b02:	440b      	add	r3, r1
 8001b04:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
 8001b08:	e00a      	b.n	8001b20 <__NVIC_SetPriority+0x40>
 8001b0a:	683b      	ldr	r3, [r7, #0]
 8001b0c:	b2da      	uxtb	r2, r3
 8001b0e:	4908      	ldr	r1, [pc, #32]	; (8001b30 <__NVIC_SetPriority+0x50>)
 8001b10:	79fb      	ldrb	r3, [r7, #7]
 8001b12:	f003 030f 	and.w	r3, r3, #15
 8001b16:	3b04      	subs	r3, #4
 8001b18:	0112      	lsls	r2, r2, #4
 8001b1a:	b2d2      	uxtb	r2, r2
 8001b1c:	440b      	add	r3, r1
 8001b1e:	761a      	strb	r2, [r3, #24]
 8001b20:	bf00      	nop
 8001b22:	370c      	adds	r7, #12
 8001b24:	46bd      	mov	sp, r7
 8001b26:	bc80      	pop	{r7}
 8001b28:	4770      	bx	lr
 8001b2a:	bf00      	nop
 8001b2c:	e000e100 	.word	0xe000e100
 8001b30:	e000ed00 	.word	0xe000ed00

08001b34 <NVIC_EncodePriority>:
 8001b34:	b480      	push	{r7}
 8001b36:	b089      	sub	sp, #36	; 0x24
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	60f8      	str	r0, [r7, #12]
 8001b3c:	60b9      	str	r1, [r7, #8]
 8001b3e:	607a      	str	r2, [r7, #4]
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	f003 0307 	and.w	r3, r3, #7
 8001b46:	61fb      	str	r3, [r7, #28]
 8001b48:	69fb      	ldr	r3, [r7, #28]
 8001b4a:	f1c3 0307 	rsb	r3, r3, #7
 8001b4e:	2b04      	cmp	r3, #4
 8001b50:	bf28      	it	cs
 8001b52:	2304      	movcs	r3, #4
 8001b54:	61bb      	str	r3, [r7, #24]
 8001b56:	69fb      	ldr	r3, [r7, #28]
 8001b58:	3304      	adds	r3, #4
 8001b5a:	2b06      	cmp	r3, #6
 8001b5c:	d902      	bls.n	8001b64 <NVIC_EncodePriority+0x30>
 8001b5e:	69fb      	ldr	r3, [r7, #28]
 8001b60:	3b03      	subs	r3, #3
 8001b62:	e000      	b.n	8001b66 <NVIC_EncodePriority+0x32>
 8001b64:	2300      	movs	r3, #0
 8001b66:	617b      	str	r3, [r7, #20]
 8001b68:	f04f 32ff 	mov.w	r2, #4294967295
 8001b6c:	69bb      	ldr	r3, [r7, #24]
 8001b6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b72:	43da      	mvns	r2, r3
 8001b74:	68bb      	ldr	r3, [r7, #8]
 8001b76:	401a      	ands	r2, r3
 8001b78:	697b      	ldr	r3, [r7, #20]
 8001b7a:	409a      	lsls	r2, r3
 8001b7c:	f04f 31ff 	mov.w	r1, #4294967295
 8001b80:	697b      	ldr	r3, [r7, #20]
 8001b82:	fa01 f303 	lsl.w	r3, r1, r3
 8001b86:	43d9      	mvns	r1, r3
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	400b      	ands	r3, r1
 8001b8c:	4313      	orrs	r3, r2
 8001b8e:	4618      	mov	r0, r3
 8001b90:	3724      	adds	r7, #36	; 0x24
 8001b92:	46bd      	mov	sp, r7
 8001b94:	bc80      	pop	{r7}
 8001b96:	4770      	bx	lr

08001b98 <SysTick_Config>:
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b082      	sub	sp, #8
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	3b01      	subs	r3, #1
 8001ba4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001ba8:	d301      	bcc.n	8001bae <SysTick_Config+0x16>
 8001baa:	2301      	movs	r3, #1
 8001bac:	e00f      	b.n	8001bce <SysTick_Config+0x36>
 8001bae:	4a0a      	ldr	r2, [pc, #40]	; (8001bd8 <SysTick_Config+0x40>)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	3b01      	subs	r3, #1
 8001bb4:	6053      	str	r3, [r2, #4]
 8001bb6:	210f      	movs	r1, #15
 8001bb8:	f04f 30ff 	mov.w	r0, #4294967295
 8001bbc:	f7ff ff90 	bl	8001ae0 <__NVIC_SetPriority>
 8001bc0:	4b05      	ldr	r3, [pc, #20]	; (8001bd8 <SysTick_Config+0x40>)
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	609a      	str	r2, [r3, #8]
 8001bc6:	4b04      	ldr	r3, [pc, #16]	; (8001bd8 <SysTick_Config+0x40>)
 8001bc8:	2207      	movs	r2, #7
 8001bca:	601a      	str	r2, [r3, #0]
 8001bcc:	2300      	movs	r3, #0
 8001bce:	4618      	mov	r0, r3
 8001bd0:	3708      	adds	r7, #8
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	bd80      	pop	{r7, pc}
 8001bd6:	bf00      	nop
 8001bd8:	e000e010 	.word	0xe000e010

08001bdc <HAL_NVIC_SetPriorityGrouping>:
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b082      	sub	sp, #8
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
 8001be4:	6878      	ldr	r0, [r7, #4]
 8001be6:	f7ff ff2d 	bl	8001a44 <__NVIC_SetPriorityGrouping>
 8001bea:	bf00      	nop
 8001bec:	3708      	adds	r7, #8
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	bd80      	pop	{r7, pc}

08001bf2 <HAL_NVIC_SetPriority>:
 8001bf2:	b580      	push	{r7, lr}
 8001bf4:	b086      	sub	sp, #24
 8001bf6:	af00      	add	r7, sp, #0
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	60b9      	str	r1, [r7, #8]
 8001bfc:	607a      	str	r2, [r7, #4]
 8001bfe:	73fb      	strb	r3, [r7, #15]
 8001c00:	2300      	movs	r3, #0
 8001c02:	617b      	str	r3, [r7, #20]
 8001c04:	f7ff ff42 	bl	8001a8c <__NVIC_GetPriorityGrouping>
 8001c08:	6178      	str	r0, [r7, #20]
 8001c0a:	687a      	ldr	r2, [r7, #4]
 8001c0c:	68b9      	ldr	r1, [r7, #8]
 8001c0e:	6978      	ldr	r0, [r7, #20]
 8001c10:	f7ff ff90 	bl	8001b34 <NVIC_EncodePriority>
 8001c14:	4602      	mov	r2, r0
 8001c16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c1a:	4611      	mov	r1, r2
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	f7ff ff5f 	bl	8001ae0 <__NVIC_SetPriority>
 8001c22:	bf00      	nop
 8001c24:	3718      	adds	r7, #24
 8001c26:	46bd      	mov	sp, r7
 8001c28:	bd80      	pop	{r7, pc}

08001c2a <HAL_NVIC_EnableIRQ>:
 8001c2a:	b580      	push	{r7, lr}
 8001c2c:	b082      	sub	sp, #8
 8001c2e:	af00      	add	r7, sp, #0
 8001c30:	4603      	mov	r3, r0
 8001c32:	71fb      	strb	r3, [r7, #7]
 8001c34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c38:	4618      	mov	r0, r3
 8001c3a:	f7ff ff35 	bl	8001aa8 <__NVIC_EnableIRQ>
 8001c3e:	bf00      	nop
 8001c40:	3708      	adds	r7, #8
 8001c42:	46bd      	mov	sp, r7
 8001c44:	bd80      	pop	{r7, pc}

08001c46 <HAL_SYSTICK_Config>:
 8001c46:	b580      	push	{r7, lr}
 8001c48:	b082      	sub	sp, #8
 8001c4a:	af00      	add	r7, sp, #0
 8001c4c:	6078      	str	r0, [r7, #4]
 8001c4e:	6878      	ldr	r0, [r7, #4]
 8001c50:	f7ff ffa2 	bl	8001b98 <SysTick_Config>
 8001c54:	4603      	mov	r3, r0
 8001c56:	4618      	mov	r0, r3
 8001c58:	3708      	adds	r7, #8
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	bd80      	pop	{r7, pc}
	...

08001c60 <HAL_GPIO_Init>:
 8001c60:	b480      	push	{r7}
 8001c62:	b08b      	sub	sp, #44	; 0x2c
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
 8001c68:	6039      	str	r1, [r7, #0]
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	627b      	str	r3, [r7, #36]	; 0x24
 8001c6e:	2300      	movs	r3, #0
 8001c70:	623b      	str	r3, [r7, #32]
 8001c72:	e179      	b.n	8001f68 <HAL_GPIO_Init+0x308>
 8001c74:	2201      	movs	r2, #1
 8001c76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c78:	fa02 f303 	lsl.w	r3, r2, r3
 8001c7c:	61fb      	str	r3, [r7, #28]
 8001c7e:	683b      	ldr	r3, [r7, #0]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	69fa      	ldr	r2, [r7, #28]
 8001c84:	4013      	ands	r3, r2
 8001c86:	61bb      	str	r3, [r7, #24]
 8001c88:	69ba      	ldr	r2, [r7, #24]
 8001c8a:	69fb      	ldr	r3, [r7, #28]
 8001c8c:	429a      	cmp	r2, r3
 8001c8e:	f040 8168 	bne.w	8001f62 <HAL_GPIO_Init+0x302>
 8001c92:	683b      	ldr	r3, [r7, #0]
 8001c94:	685b      	ldr	r3, [r3, #4]
 8001c96:	4a96      	ldr	r2, [pc, #600]	; (8001ef0 <HAL_GPIO_Init+0x290>)
 8001c98:	4293      	cmp	r3, r2
 8001c9a:	d05e      	beq.n	8001d5a <HAL_GPIO_Init+0xfa>
 8001c9c:	4a94      	ldr	r2, [pc, #592]	; (8001ef0 <HAL_GPIO_Init+0x290>)
 8001c9e:	4293      	cmp	r3, r2
 8001ca0:	d875      	bhi.n	8001d8e <HAL_GPIO_Init+0x12e>
 8001ca2:	4a94      	ldr	r2, [pc, #592]	; (8001ef4 <HAL_GPIO_Init+0x294>)
 8001ca4:	4293      	cmp	r3, r2
 8001ca6:	d058      	beq.n	8001d5a <HAL_GPIO_Init+0xfa>
 8001ca8:	4a92      	ldr	r2, [pc, #584]	; (8001ef4 <HAL_GPIO_Init+0x294>)
 8001caa:	4293      	cmp	r3, r2
 8001cac:	d86f      	bhi.n	8001d8e <HAL_GPIO_Init+0x12e>
 8001cae:	4a92      	ldr	r2, [pc, #584]	; (8001ef8 <HAL_GPIO_Init+0x298>)
 8001cb0:	4293      	cmp	r3, r2
 8001cb2:	d052      	beq.n	8001d5a <HAL_GPIO_Init+0xfa>
 8001cb4:	4a90      	ldr	r2, [pc, #576]	; (8001ef8 <HAL_GPIO_Init+0x298>)
 8001cb6:	4293      	cmp	r3, r2
 8001cb8:	d869      	bhi.n	8001d8e <HAL_GPIO_Init+0x12e>
 8001cba:	4a90      	ldr	r2, [pc, #576]	; (8001efc <HAL_GPIO_Init+0x29c>)
 8001cbc:	4293      	cmp	r3, r2
 8001cbe:	d04c      	beq.n	8001d5a <HAL_GPIO_Init+0xfa>
 8001cc0:	4a8e      	ldr	r2, [pc, #568]	; (8001efc <HAL_GPIO_Init+0x29c>)
 8001cc2:	4293      	cmp	r3, r2
 8001cc4:	d863      	bhi.n	8001d8e <HAL_GPIO_Init+0x12e>
 8001cc6:	4a8e      	ldr	r2, [pc, #568]	; (8001f00 <HAL_GPIO_Init+0x2a0>)
 8001cc8:	4293      	cmp	r3, r2
 8001cca:	d046      	beq.n	8001d5a <HAL_GPIO_Init+0xfa>
 8001ccc:	4a8c      	ldr	r2, [pc, #560]	; (8001f00 <HAL_GPIO_Init+0x2a0>)
 8001cce:	4293      	cmp	r3, r2
 8001cd0:	d85d      	bhi.n	8001d8e <HAL_GPIO_Init+0x12e>
 8001cd2:	2b12      	cmp	r3, #18
 8001cd4:	d82a      	bhi.n	8001d2c <HAL_GPIO_Init+0xcc>
 8001cd6:	2b12      	cmp	r3, #18
 8001cd8:	d859      	bhi.n	8001d8e <HAL_GPIO_Init+0x12e>
 8001cda:	a201      	add	r2, pc, #4	; (adr r2, 8001ce0 <HAL_GPIO_Init+0x80>)
 8001cdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ce0:	08001d5b 	.word	0x08001d5b
 8001ce4:	08001d35 	.word	0x08001d35
 8001ce8:	08001d47 	.word	0x08001d47
 8001cec:	08001d89 	.word	0x08001d89
 8001cf0:	08001d8f 	.word	0x08001d8f
 8001cf4:	08001d8f 	.word	0x08001d8f
 8001cf8:	08001d8f 	.word	0x08001d8f
 8001cfc:	08001d8f 	.word	0x08001d8f
 8001d00:	08001d8f 	.word	0x08001d8f
 8001d04:	08001d8f 	.word	0x08001d8f
 8001d08:	08001d8f 	.word	0x08001d8f
 8001d0c:	08001d8f 	.word	0x08001d8f
 8001d10:	08001d8f 	.word	0x08001d8f
 8001d14:	08001d8f 	.word	0x08001d8f
 8001d18:	08001d8f 	.word	0x08001d8f
 8001d1c:	08001d8f 	.word	0x08001d8f
 8001d20:	08001d8f 	.word	0x08001d8f
 8001d24:	08001d3d 	.word	0x08001d3d
 8001d28:	08001d51 	.word	0x08001d51
 8001d2c:	4a75      	ldr	r2, [pc, #468]	; (8001f04 <HAL_GPIO_Init+0x2a4>)
 8001d2e:	4293      	cmp	r3, r2
 8001d30:	d013      	beq.n	8001d5a <HAL_GPIO_Init+0xfa>
 8001d32:	e02c      	b.n	8001d8e <HAL_GPIO_Init+0x12e>
 8001d34:	683b      	ldr	r3, [r7, #0]
 8001d36:	68db      	ldr	r3, [r3, #12]
 8001d38:	623b      	str	r3, [r7, #32]
 8001d3a:	e029      	b.n	8001d90 <HAL_GPIO_Init+0x130>
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	68db      	ldr	r3, [r3, #12]
 8001d40:	3304      	adds	r3, #4
 8001d42:	623b      	str	r3, [r7, #32]
 8001d44:	e024      	b.n	8001d90 <HAL_GPIO_Init+0x130>
 8001d46:	683b      	ldr	r3, [r7, #0]
 8001d48:	68db      	ldr	r3, [r3, #12]
 8001d4a:	3308      	adds	r3, #8
 8001d4c:	623b      	str	r3, [r7, #32]
 8001d4e:	e01f      	b.n	8001d90 <HAL_GPIO_Init+0x130>
 8001d50:	683b      	ldr	r3, [r7, #0]
 8001d52:	68db      	ldr	r3, [r3, #12]
 8001d54:	330c      	adds	r3, #12
 8001d56:	623b      	str	r3, [r7, #32]
 8001d58:	e01a      	b.n	8001d90 <HAL_GPIO_Init+0x130>
 8001d5a:	683b      	ldr	r3, [r7, #0]
 8001d5c:	689b      	ldr	r3, [r3, #8]
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d102      	bne.n	8001d68 <HAL_GPIO_Init+0x108>
 8001d62:	2304      	movs	r3, #4
 8001d64:	623b      	str	r3, [r7, #32]
 8001d66:	e013      	b.n	8001d90 <HAL_GPIO_Init+0x130>
 8001d68:	683b      	ldr	r3, [r7, #0]
 8001d6a:	689b      	ldr	r3, [r3, #8]
 8001d6c:	2b01      	cmp	r3, #1
 8001d6e:	d105      	bne.n	8001d7c <HAL_GPIO_Init+0x11c>
 8001d70:	2308      	movs	r3, #8
 8001d72:	623b      	str	r3, [r7, #32]
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	69fa      	ldr	r2, [r7, #28]
 8001d78:	611a      	str	r2, [r3, #16]
 8001d7a:	e009      	b.n	8001d90 <HAL_GPIO_Init+0x130>
 8001d7c:	2308      	movs	r3, #8
 8001d7e:	623b      	str	r3, [r7, #32]
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	69fa      	ldr	r2, [r7, #28]
 8001d84:	615a      	str	r2, [r3, #20]
 8001d86:	e003      	b.n	8001d90 <HAL_GPIO_Init+0x130>
 8001d88:	2300      	movs	r3, #0
 8001d8a:	623b      	str	r3, [r7, #32]
 8001d8c:	e000      	b.n	8001d90 <HAL_GPIO_Init+0x130>
 8001d8e:	bf00      	nop
 8001d90:	69bb      	ldr	r3, [r7, #24]
 8001d92:	2bff      	cmp	r3, #255	; 0xff
 8001d94:	d801      	bhi.n	8001d9a <HAL_GPIO_Init+0x13a>
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	e001      	b.n	8001d9e <HAL_GPIO_Init+0x13e>
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	3304      	adds	r3, #4
 8001d9e:	617b      	str	r3, [r7, #20]
 8001da0:	69bb      	ldr	r3, [r7, #24]
 8001da2:	2bff      	cmp	r3, #255	; 0xff
 8001da4:	d802      	bhi.n	8001dac <HAL_GPIO_Init+0x14c>
 8001da6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001da8:	009b      	lsls	r3, r3, #2
 8001daa:	e002      	b.n	8001db2 <HAL_GPIO_Init+0x152>
 8001dac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dae:	3b08      	subs	r3, #8
 8001db0:	009b      	lsls	r3, r3, #2
 8001db2:	613b      	str	r3, [r7, #16]
 8001db4:	697b      	ldr	r3, [r7, #20]
 8001db6:	681a      	ldr	r2, [r3, #0]
 8001db8:	210f      	movs	r1, #15
 8001dba:	693b      	ldr	r3, [r7, #16]
 8001dbc:	fa01 f303 	lsl.w	r3, r1, r3
 8001dc0:	43db      	mvns	r3, r3
 8001dc2:	401a      	ands	r2, r3
 8001dc4:	6a39      	ldr	r1, [r7, #32]
 8001dc6:	693b      	ldr	r3, [r7, #16]
 8001dc8:	fa01 f303 	lsl.w	r3, r1, r3
 8001dcc:	431a      	orrs	r2, r3
 8001dce:	697b      	ldr	r3, [r7, #20]
 8001dd0:	601a      	str	r2, [r3, #0]
 8001dd2:	683b      	ldr	r3, [r7, #0]
 8001dd4:	685b      	ldr	r3, [r3, #4]
 8001dd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	f000 80c1 	beq.w	8001f62 <HAL_GPIO_Init+0x302>
 8001de0:	4b49      	ldr	r3, [pc, #292]	; (8001f08 <HAL_GPIO_Init+0x2a8>)
 8001de2:	699b      	ldr	r3, [r3, #24]
 8001de4:	4a48      	ldr	r2, [pc, #288]	; (8001f08 <HAL_GPIO_Init+0x2a8>)
 8001de6:	f043 0301 	orr.w	r3, r3, #1
 8001dea:	6193      	str	r3, [r2, #24]
 8001dec:	4b46      	ldr	r3, [pc, #280]	; (8001f08 <HAL_GPIO_Init+0x2a8>)
 8001dee:	699b      	ldr	r3, [r3, #24]
 8001df0:	f003 0301 	and.w	r3, r3, #1
 8001df4:	60bb      	str	r3, [r7, #8]
 8001df6:	68bb      	ldr	r3, [r7, #8]
 8001df8:	4a44      	ldr	r2, [pc, #272]	; (8001f0c <HAL_GPIO_Init+0x2ac>)
 8001dfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dfc:	089b      	lsrs	r3, r3, #2
 8001dfe:	3302      	adds	r3, #2
 8001e00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e04:	60fb      	str	r3, [r7, #12]
 8001e06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e08:	f003 0303 	and.w	r3, r3, #3
 8001e0c:	009b      	lsls	r3, r3, #2
 8001e0e:	220f      	movs	r2, #15
 8001e10:	fa02 f303 	lsl.w	r3, r2, r3
 8001e14:	43db      	mvns	r3, r3
 8001e16:	68fa      	ldr	r2, [r7, #12]
 8001e18:	4013      	ands	r3, r2
 8001e1a:	60fb      	str	r3, [r7, #12]
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	4a3c      	ldr	r2, [pc, #240]	; (8001f10 <HAL_GPIO_Init+0x2b0>)
 8001e20:	4293      	cmp	r3, r2
 8001e22:	d01f      	beq.n	8001e64 <HAL_GPIO_Init+0x204>
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	4a3b      	ldr	r2, [pc, #236]	; (8001f14 <HAL_GPIO_Init+0x2b4>)
 8001e28:	4293      	cmp	r3, r2
 8001e2a:	d019      	beq.n	8001e60 <HAL_GPIO_Init+0x200>
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	4a3a      	ldr	r2, [pc, #232]	; (8001f18 <HAL_GPIO_Init+0x2b8>)
 8001e30:	4293      	cmp	r3, r2
 8001e32:	d013      	beq.n	8001e5c <HAL_GPIO_Init+0x1fc>
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	4a39      	ldr	r2, [pc, #228]	; (8001f1c <HAL_GPIO_Init+0x2bc>)
 8001e38:	4293      	cmp	r3, r2
 8001e3a:	d00d      	beq.n	8001e58 <HAL_GPIO_Init+0x1f8>
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	4a38      	ldr	r2, [pc, #224]	; (8001f20 <HAL_GPIO_Init+0x2c0>)
 8001e40:	4293      	cmp	r3, r2
 8001e42:	d007      	beq.n	8001e54 <HAL_GPIO_Init+0x1f4>
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	4a37      	ldr	r2, [pc, #220]	; (8001f24 <HAL_GPIO_Init+0x2c4>)
 8001e48:	4293      	cmp	r3, r2
 8001e4a:	d101      	bne.n	8001e50 <HAL_GPIO_Init+0x1f0>
 8001e4c:	2305      	movs	r3, #5
 8001e4e:	e00a      	b.n	8001e66 <HAL_GPIO_Init+0x206>
 8001e50:	2306      	movs	r3, #6
 8001e52:	e008      	b.n	8001e66 <HAL_GPIO_Init+0x206>
 8001e54:	2304      	movs	r3, #4
 8001e56:	e006      	b.n	8001e66 <HAL_GPIO_Init+0x206>
 8001e58:	2303      	movs	r3, #3
 8001e5a:	e004      	b.n	8001e66 <HAL_GPIO_Init+0x206>
 8001e5c:	2302      	movs	r3, #2
 8001e5e:	e002      	b.n	8001e66 <HAL_GPIO_Init+0x206>
 8001e60:	2301      	movs	r3, #1
 8001e62:	e000      	b.n	8001e66 <HAL_GPIO_Init+0x206>
 8001e64:	2300      	movs	r3, #0
 8001e66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e68:	f002 0203 	and.w	r2, r2, #3
 8001e6c:	0092      	lsls	r2, r2, #2
 8001e6e:	4093      	lsls	r3, r2
 8001e70:	68fa      	ldr	r2, [r7, #12]
 8001e72:	4313      	orrs	r3, r2
 8001e74:	60fb      	str	r3, [r7, #12]
 8001e76:	4925      	ldr	r1, [pc, #148]	; (8001f0c <HAL_GPIO_Init+0x2ac>)
 8001e78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e7a:	089b      	lsrs	r3, r3, #2
 8001e7c:	3302      	adds	r3, #2
 8001e7e:	68fa      	ldr	r2, [r7, #12]
 8001e80:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8001e84:	683b      	ldr	r3, [r7, #0]
 8001e86:	685b      	ldr	r3, [r3, #4]
 8001e88:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d006      	beq.n	8001e9e <HAL_GPIO_Init+0x23e>
 8001e90:	4b25      	ldr	r3, [pc, #148]	; (8001f28 <HAL_GPIO_Init+0x2c8>)
 8001e92:	689a      	ldr	r2, [r3, #8]
 8001e94:	4924      	ldr	r1, [pc, #144]	; (8001f28 <HAL_GPIO_Init+0x2c8>)
 8001e96:	69bb      	ldr	r3, [r7, #24]
 8001e98:	4313      	orrs	r3, r2
 8001e9a:	608b      	str	r3, [r1, #8]
 8001e9c:	e006      	b.n	8001eac <HAL_GPIO_Init+0x24c>
 8001e9e:	4b22      	ldr	r3, [pc, #136]	; (8001f28 <HAL_GPIO_Init+0x2c8>)
 8001ea0:	689a      	ldr	r2, [r3, #8]
 8001ea2:	69bb      	ldr	r3, [r7, #24]
 8001ea4:	43db      	mvns	r3, r3
 8001ea6:	4920      	ldr	r1, [pc, #128]	; (8001f28 <HAL_GPIO_Init+0x2c8>)
 8001ea8:	4013      	ands	r3, r2
 8001eaa:	608b      	str	r3, [r1, #8]
 8001eac:	683b      	ldr	r3, [r7, #0]
 8001eae:	685b      	ldr	r3, [r3, #4]
 8001eb0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d006      	beq.n	8001ec6 <HAL_GPIO_Init+0x266>
 8001eb8:	4b1b      	ldr	r3, [pc, #108]	; (8001f28 <HAL_GPIO_Init+0x2c8>)
 8001eba:	68da      	ldr	r2, [r3, #12]
 8001ebc:	491a      	ldr	r1, [pc, #104]	; (8001f28 <HAL_GPIO_Init+0x2c8>)
 8001ebe:	69bb      	ldr	r3, [r7, #24]
 8001ec0:	4313      	orrs	r3, r2
 8001ec2:	60cb      	str	r3, [r1, #12]
 8001ec4:	e006      	b.n	8001ed4 <HAL_GPIO_Init+0x274>
 8001ec6:	4b18      	ldr	r3, [pc, #96]	; (8001f28 <HAL_GPIO_Init+0x2c8>)
 8001ec8:	68da      	ldr	r2, [r3, #12]
 8001eca:	69bb      	ldr	r3, [r7, #24]
 8001ecc:	43db      	mvns	r3, r3
 8001ece:	4916      	ldr	r1, [pc, #88]	; (8001f28 <HAL_GPIO_Init+0x2c8>)
 8001ed0:	4013      	ands	r3, r2
 8001ed2:	60cb      	str	r3, [r1, #12]
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	685b      	ldr	r3, [r3, #4]
 8001ed8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d025      	beq.n	8001f2c <HAL_GPIO_Init+0x2cc>
 8001ee0:	4b11      	ldr	r3, [pc, #68]	; (8001f28 <HAL_GPIO_Init+0x2c8>)
 8001ee2:	685a      	ldr	r2, [r3, #4]
 8001ee4:	4910      	ldr	r1, [pc, #64]	; (8001f28 <HAL_GPIO_Init+0x2c8>)
 8001ee6:	69bb      	ldr	r3, [r7, #24]
 8001ee8:	4313      	orrs	r3, r2
 8001eea:	604b      	str	r3, [r1, #4]
 8001eec:	e025      	b.n	8001f3a <HAL_GPIO_Init+0x2da>
 8001eee:	bf00      	nop
 8001ef0:	10320000 	.word	0x10320000
 8001ef4:	10310000 	.word	0x10310000
 8001ef8:	10220000 	.word	0x10220000
 8001efc:	10210000 	.word	0x10210000
 8001f00:	10120000 	.word	0x10120000
 8001f04:	10110000 	.word	0x10110000
 8001f08:	40021000 	.word	0x40021000
 8001f0c:	40010000 	.word	0x40010000
 8001f10:	40010800 	.word	0x40010800
 8001f14:	40010c00 	.word	0x40010c00
 8001f18:	40011000 	.word	0x40011000
 8001f1c:	40011400 	.word	0x40011400
 8001f20:	40011800 	.word	0x40011800
 8001f24:	40011c00 	.word	0x40011c00
 8001f28:	40010400 	.word	0x40010400
 8001f2c:	4b15      	ldr	r3, [pc, #84]	; (8001f84 <HAL_GPIO_Init+0x324>)
 8001f2e:	685a      	ldr	r2, [r3, #4]
 8001f30:	69bb      	ldr	r3, [r7, #24]
 8001f32:	43db      	mvns	r3, r3
 8001f34:	4913      	ldr	r1, [pc, #76]	; (8001f84 <HAL_GPIO_Init+0x324>)
 8001f36:	4013      	ands	r3, r2
 8001f38:	604b      	str	r3, [r1, #4]
 8001f3a:	683b      	ldr	r3, [r7, #0]
 8001f3c:	685b      	ldr	r3, [r3, #4]
 8001f3e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d006      	beq.n	8001f54 <HAL_GPIO_Init+0x2f4>
 8001f46:	4b0f      	ldr	r3, [pc, #60]	; (8001f84 <HAL_GPIO_Init+0x324>)
 8001f48:	681a      	ldr	r2, [r3, #0]
 8001f4a:	490e      	ldr	r1, [pc, #56]	; (8001f84 <HAL_GPIO_Init+0x324>)
 8001f4c:	69bb      	ldr	r3, [r7, #24]
 8001f4e:	4313      	orrs	r3, r2
 8001f50:	600b      	str	r3, [r1, #0]
 8001f52:	e006      	b.n	8001f62 <HAL_GPIO_Init+0x302>
 8001f54:	4b0b      	ldr	r3, [pc, #44]	; (8001f84 <HAL_GPIO_Init+0x324>)
 8001f56:	681a      	ldr	r2, [r3, #0]
 8001f58:	69bb      	ldr	r3, [r7, #24]
 8001f5a:	43db      	mvns	r3, r3
 8001f5c:	4909      	ldr	r1, [pc, #36]	; (8001f84 <HAL_GPIO_Init+0x324>)
 8001f5e:	4013      	ands	r3, r2
 8001f60:	600b      	str	r3, [r1, #0]
 8001f62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f64:	3301      	adds	r3, #1
 8001f66:	627b      	str	r3, [r7, #36]	; 0x24
 8001f68:	683b      	ldr	r3, [r7, #0]
 8001f6a:	681a      	ldr	r2, [r3, #0]
 8001f6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f6e:	fa22 f303 	lsr.w	r3, r2, r3
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	f47f ae7e 	bne.w	8001c74 <HAL_GPIO_Init+0x14>
 8001f78:	bf00      	nop
 8001f7a:	bf00      	nop
 8001f7c:	372c      	adds	r7, #44	; 0x2c
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	bc80      	pop	{r7}
 8001f82:	4770      	bx	lr
 8001f84:	40010400 	.word	0x40010400

08001f88 <HAL_GPIO_ReadPin>:
 8001f88:	b480      	push	{r7}
 8001f8a:	b085      	sub	sp, #20
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
 8001f90:	460b      	mov	r3, r1
 8001f92:	807b      	strh	r3, [r7, #2]
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	689a      	ldr	r2, [r3, #8]
 8001f98:	887b      	ldrh	r3, [r7, #2]
 8001f9a:	4013      	ands	r3, r2
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d002      	beq.n	8001fa6 <HAL_GPIO_ReadPin+0x1e>
 8001fa0:	2301      	movs	r3, #1
 8001fa2:	73fb      	strb	r3, [r7, #15]
 8001fa4:	e001      	b.n	8001faa <HAL_GPIO_ReadPin+0x22>
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	73fb      	strb	r3, [r7, #15]
 8001faa:	7bfb      	ldrb	r3, [r7, #15]
 8001fac:	4618      	mov	r0, r3
 8001fae:	3714      	adds	r7, #20
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	bc80      	pop	{r7}
 8001fb4:	4770      	bx	lr

08001fb6 <HAL_GPIO_WritePin>:
 8001fb6:	b480      	push	{r7}
 8001fb8:	b083      	sub	sp, #12
 8001fba:	af00      	add	r7, sp, #0
 8001fbc:	6078      	str	r0, [r7, #4]
 8001fbe:	460b      	mov	r3, r1
 8001fc0:	807b      	strh	r3, [r7, #2]
 8001fc2:	4613      	mov	r3, r2
 8001fc4:	707b      	strb	r3, [r7, #1]
 8001fc6:	787b      	ldrb	r3, [r7, #1]
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d003      	beq.n	8001fd4 <HAL_GPIO_WritePin+0x1e>
 8001fcc:	887a      	ldrh	r2, [r7, #2]
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	611a      	str	r2, [r3, #16]
 8001fd2:	e003      	b.n	8001fdc <HAL_GPIO_WritePin+0x26>
 8001fd4:	887b      	ldrh	r3, [r7, #2]
 8001fd6:	041a      	lsls	r2, r3, #16
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	611a      	str	r2, [r3, #16]
 8001fdc:	bf00      	nop
 8001fde:	370c      	adds	r7, #12
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	bc80      	pop	{r7}
 8001fe4:	4770      	bx	lr

08001fe6 <HAL_GPIO_TogglePin>:
 8001fe6:	b480      	push	{r7}
 8001fe8:	b085      	sub	sp, #20
 8001fea:	af00      	add	r7, sp, #0
 8001fec:	6078      	str	r0, [r7, #4]
 8001fee:	460b      	mov	r3, r1
 8001ff0:	807b      	strh	r3, [r7, #2]
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	68db      	ldr	r3, [r3, #12]
 8001ff6:	60fb      	str	r3, [r7, #12]
 8001ff8:	887a      	ldrh	r2, [r7, #2]
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	4013      	ands	r3, r2
 8001ffe:	041a      	lsls	r2, r3, #16
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	43d9      	mvns	r1, r3
 8002004:	887b      	ldrh	r3, [r7, #2]
 8002006:	400b      	ands	r3, r1
 8002008:	431a      	orrs	r2, r3
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	611a      	str	r2, [r3, #16]
 800200e:	bf00      	nop
 8002010:	3714      	adds	r7, #20
 8002012:	46bd      	mov	sp, r7
 8002014:	bc80      	pop	{r7}
 8002016:	4770      	bx	lr

08002018 <HAL_RCC_OscConfig>:
 8002018:	b580      	push	{r7, lr}
 800201a:	b086      	sub	sp, #24
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	2b00      	cmp	r3, #0
 8002024:	d101      	bne.n	800202a <HAL_RCC_OscConfig+0x12>
 8002026:	2301      	movs	r3, #1
 8002028:	e272      	b.n	8002510 <HAL_RCC_OscConfig+0x4f8>
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f003 0301 	and.w	r3, r3, #1
 8002032:	2b00      	cmp	r3, #0
 8002034:	f000 8087 	beq.w	8002146 <HAL_RCC_OscConfig+0x12e>
 8002038:	4b92      	ldr	r3, [pc, #584]	; (8002284 <HAL_RCC_OscConfig+0x26c>)
 800203a:	685b      	ldr	r3, [r3, #4]
 800203c:	f003 030c 	and.w	r3, r3, #12
 8002040:	2b04      	cmp	r3, #4
 8002042:	d00c      	beq.n	800205e <HAL_RCC_OscConfig+0x46>
 8002044:	4b8f      	ldr	r3, [pc, #572]	; (8002284 <HAL_RCC_OscConfig+0x26c>)
 8002046:	685b      	ldr	r3, [r3, #4]
 8002048:	f003 030c 	and.w	r3, r3, #12
 800204c:	2b08      	cmp	r3, #8
 800204e:	d112      	bne.n	8002076 <HAL_RCC_OscConfig+0x5e>
 8002050:	4b8c      	ldr	r3, [pc, #560]	; (8002284 <HAL_RCC_OscConfig+0x26c>)
 8002052:	685b      	ldr	r3, [r3, #4]
 8002054:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002058:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800205c:	d10b      	bne.n	8002076 <HAL_RCC_OscConfig+0x5e>
 800205e:	4b89      	ldr	r3, [pc, #548]	; (8002284 <HAL_RCC_OscConfig+0x26c>)
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002066:	2b00      	cmp	r3, #0
 8002068:	d06c      	beq.n	8002144 <HAL_RCC_OscConfig+0x12c>
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	685b      	ldr	r3, [r3, #4]
 800206e:	2b00      	cmp	r3, #0
 8002070:	d168      	bne.n	8002144 <HAL_RCC_OscConfig+0x12c>
 8002072:	2301      	movs	r3, #1
 8002074:	e24c      	b.n	8002510 <HAL_RCC_OscConfig+0x4f8>
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	685b      	ldr	r3, [r3, #4]
 800207a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800207e:	d106      	bne.n	800208e <HAL_RCC_OscConfig+0x76>
 8002080:	4b80      	ldr	r3, [pc, #512]	; (8002284 <HAL_RCC_OscConfig+0x26c>)
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	4a7f      	ldr	r2, [pc, #508]	; (8002284 <HAL_RCC_OscConfig+0x26c>)
 8002086:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800208a:	6013      	str	r3, [r2, #0]
 800208c:	e02e      	b.n	80020ec <HAL_RCC_OscConfig+0xd4>
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	685b      	ldr	r3, [r3, #4]
 8002092:	2b00      	cmp	r3, #0
 8002094:	d10c      	bne.n	80020b0 <HAL_RCC_OscConfig+0x98>
 8002096:	4b7b      	ldr	r3, [pc, #492]	; (8002284 <HAL_RCC_OscConfig+0x26c>)
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	4a7a      	ldr	r2, [pc, #488]	; (8002284 <HAL_RCC_OscConfig+0x26c>)
 800209c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80020a0:	6013      	str	r3, [r2, #0]
 80020a2:	4b78      	ldr	r3, [pc, #480]	; (8002284 <HAL_RCC_OscConfig+0x26c>)
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	4a77      	ldr	r2, [pc, #476]	; (8002284 <HAL_RCC_OscConfig+0x26c>)
 80020a8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80020ac:	6013      	str	r3, [r2, #0]
 80020ae:	e01d      	b.n	80020ec <HAL_RCC_OscConfig+0xd4>
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	685b      	ldr	r3, [r3, #4]
 80020b4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80020b8:	d10c      	bne.n	80020d4 <HAL_RCC_OscConfig+0xbc>
 80020ba:	4b72      	ldr	r3, [pc, #456]	; (8002284 <HAL_RCC_OscConfig+0x26c>)
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	4a71      	ldr	r2, [pc, #452]	; (8002284 <HAL_RCC_OscConfig+0x26c>)
 80020c0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80020c4:	6013      	str	r3, [r2, #0]
 80020c6:	4b6f      	ldr	r3, [pc, #444]	; (8002284 <HAL_RCC_OscConfig+0x26c>)
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	4a6e      	ldr	r2, [pc, #440]	; (8002284 <HAL_RCC_OscConfig+0x26c>)
 80020cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020d0:	6013      	str	r3, [r2, #0]
 80020d2:	e00b      	b.n	80020ec <HAL_RCC_OscConfig+0xd4>
 80020d4:	4b6b      	ldr	r3, [pc, #428]	; (8002284 <HAL_RCC_OscConfig+0x26c>)
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	4a6a      	ldr	r2, [pc, #424]	; (8002284 <HAL_RCC_OscConfig+0x26c>)
 80020da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80020de:	6013      	str	r3, [r2, #0]
 80020e0:	4b68      	ldr	r3, [pc, #416]	; (8002284 <HAL_RCC_OscConfig+0x26c>)
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	4a67      	ldr	r2, [pc, #412]	; (8002284 <HAL_RCC_OscConfig+0x26c>)
 80020e6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80020ea:	6013      	str	r3, [r2, #0]
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	685b      	ldr	r3, [r3, #4]
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d013      	beq.n	800211c <HAL_RCC_OscConfig+0x104>
 80020f4:	f7ff fc9c 	bl	8001a30 <HAL_GetTick>
 80020f8:	6138      	str	r0, [r7, #16]
 80020fa:	e008      	b.n	800210e <HAL_RCC_OscConfig+0xf6>
 80020fc:	f7ff fc98 	bl	8001a30 <HAL_GetTick>
 8002100:	4602      	mov	r2, r0
 8002102:	693b      	ldr	r3, [r7, #16]
 8002104:	1ad3      	subs	r3, r2, r3
 8002106:	2b64      	cmp	r3, #100	; 0x64
 8002108:	d901      	bls.n	800210e <HAL_RCC_OscConfig+0xf6>
 800210a:	2303      	movs	r3, #3
 800210c:	e200      	b.n	8002510 <HAL_RCC_OscConfig+0x4f8>
 800210e:	4b5d      	ldr	r3, [pc, #372]	; (8002284 <HAL_RCC_OscConfig+0x26c>)
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002116:	2b00      	cmp	r3, #0
 8002118:	d0f0      	beq.n	80020fc <HAL_RCC_OscConfig+0xe4>
 800211a:	e014      	b.n	8002146 <HAL_RCC_OscConfig+0x12e>
 800211c:	f7ff fc88 	bl	8001a30 <HAL_GetTick>
 8002120:	6138      	str	r0, [r7, #16]
 8002122:	e008      	b.n	8002136 <HAL_RCC_OscConfig+0x11e>
 8002124:	f7ff fc84 	bl	8001a30 <HAL_GetTick>
 8002128:	4602      	mov	r2, r0
 800212a:	693b      	ldr	r3, [r7, #16]
 800212c:	1ad3      	subs	r3, r2, r3
 800212e:	2b64      	cmp	r3, #100	; 0x64
 8002130:	d901      	bls.n	8002136 <HAL_RCC_OscConfig+0x11e>
 8002132:	2303      	movs	r3, #3
 8002134:	e1ec      	b.n	8002510 <HAL_RCC_OscConfig+0x4f8>
 8002136:	4b53      	ldr	r3, [pc, #332]	; (8002284 <HAL_RCC_OscConfig+0x26c>)
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800213e:	2b00      	cmp	r3, #0
 8002140:	d1f0      	bne.n	8002124 <HAL_RCC_OscConfig+0x10c>
 8002142:	e000      	b.n	8002146 <HAL_RCC_OscConfig+0x12e>
 8002144:	bf00      	nop
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f003 0302 	and.w	r3, r3, #2
 800214e:	2b00      	cmp	r3, #0
 8002150:	d063      	beq.n	800221a <HAL_RCC_OscConfig+0x202>
 8002152:	4b4c      	ldr	r3, [pc, #304]	; (8002284 <HAL_RCC_OscConfig+0x26c>)
 8002154:	685b      	ldr	r3, [r3, #4]
 8002156:	f003 030c 	and.w	r3, r3, #12
 800215a:	2b00      	cmp	r3, #0
 800215c:	d00b      	beq.n	8002176 <HAL_RCC_OscConfig+0x15e>
 800215e:	4b49      	ldr	r3, [pc, #292]	; (8002284 <HAL_RCC_OscConfig+0x26c>)
 8002160:	685b      	ldr	r3, [r3, #4]
 8002162:	f003 030c 	and.w	r3, r3, #12
 8002166:	2b08      	cmp	r3, #8
 8002168:	d11c      	bne.n	80021a4 <HAL_RCC_OscConfig+0x18c>
 800216a:	4b46      	ldr	r3, [pc, #280]	; (8002284 <HAL_RCC_OscConfig+0x26c>)
 800216c:	685b      	ldr	r3, [r3, #4]
 800216e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002172:	2b00      	cmp	r3, #0
 8002174:	d116      	bne.n	80021a4 <HAL_RCC_OscConfig+0x18c>
 8002176:	4b43      	ldr	r3, [pc, #268]	; (8002284 <HAL_RCC_OscConfig+0x26c>)
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f003 0302 	and.w	r3, r3, #2
 800217e:	2b00      	cmp	r3, #0
 8002180:	d005      	beq.n	800218e <HAL_RCC_OscConfig+0x176>
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	691b      	ldr	r3, [r3, #16]
 8002186:	2b01      	cmp	r3, #1
 8002188:	d001      	beq.n	800218e <HAL_RCC_OscConfig+0x176>
 800218a:	2301      	movs	r3, #1
 800218c:	e1c0      	b.n	8002510 <HAL_RCC_OscConfig+0x4f8>
 800218e:	4b3d      	ldr	r3, [pc, #244]	; (8002284 <HAL_RCC_OscConfig+0x26c>)
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	695b      	ldr	r3, [r3, #20]
 800219a:	00db      	lsls	r3, r3, #3
 800219c:	4939      	ldr	r1, [pc, #228]	; (8002284 <HAL_RCC_OscConfig+0x26c>)
 800219e:	4313      	orrs	r3, r2
 80021a0:	600b      	str	r3, [r1, #0]
 80021a2:	e03a      	b.n	800221a <HAL_RCC_OscConfig+0x202>
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	691b      	ldr	r3, [r3, #16]
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d020      	beq.n	80021ee <HAL_RCC_OscConfig+0x1d6>
 80021ac:	4b36      	ldr	r3, [pc, #216]	; (8002288 <HAL_RCC_OscConfig+0x270>)
 80021ae:	2201      	movs	r2, #1
 80021b0:	601a      	str	r2, [r3, #0]
 80021b2:	f7ff fc3d 	bl	8001a30 <HAL_GetTick>
 80021b6:	6138      	str	r0, [r7, #16]
 80021b8:	e008      	b.n	80021cc <HAL_RCC_OscConfig+0x1b4>
 80021ba:	f7ff fc39 	bl	8001a30 <HAL_GetTick>
 80021be:	4602      	mov	r2, r0
 80021c0:	693b      	ldr	r3, [r7, #16]
 80021c2:	1ad3      	subs	r3, r2, r3
 80021c4:	2b02      	cmp	r3, #2
 80021c6:	d901      	bls.n	80021cc <HAL_RCC_OscConfig+0x1b4>
 80021c8:	2303      	movs	r3, #3
 80021ca:	e1a1      	b.n	8002510 <HAL_RCC_OscConfig+0x4f8>
 80021cc:	4b2d      	ldr	r3, [pc, #180]	; (8002284 <HAL_RCC_OscConfig+0x26c>)
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f003 0302 	and.w	r3, r3, #2
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d0f0      	beq.n	80021ba <HAL_RCC_OscConfig+0x1a2>
 80021d8:	4b2a      	ldr	r3, [pc, #168]	; (8002284 <HAL_RCC_OscConfig+0x26c>)
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	695b      	ldr	r3, [r3, #20]
 80021e4:	00db      	lsls	r3, r3, #3
 80021e6:	4927      	ldr	r1, [pc, #156]	; (8002284 <HAL_RCC_OscConfig+0x26c>)
 80021e8:	4313      	orrs	r3, r2
 80021ea:	600b      	str	r3, [r1, #0]
 80021ec:	e015      	b.n	800221a <HAL_RCC_OscConfig+0x202>
 80021ee:	4b26      	ldr	r3, [pc, #152]	; (8002288 <HAL_RCC_OscConfig+0x270>)
 80021f0:	2200      	movs	r2, #0
 80021f2:	601a      	str	r2, [r3, #0]
 80021f4:	f7ff fc1c 	bl	8001a30 <HAL_GetTick>
 80021f8:	6138      	str	r0, [r7, #16]
 80021fa:	e008      	b.n	800220e <HAL_RCC_OscConfig+0x1f6>
 80021fc:	f7ff fc18 	bl	8001a30 <HAL_GetTick>
 8002200:	4602      	mov	r2, r0
 8002202:	693b      	ldr	r3, [r7, #16]
 8002204:	1ad3      	subs	r3, r2, r3
 8002206:	2b02      	cmp	r3, #2
 8002208:	d901      	bls.n	800220e <HAL_RCC_OscConfig+0x1f6>
 800220a:	2303      	movs	r3, #3
 800220c:	e180      	b.n	8002510 <HAL_RCC_OscConfig+0x4f8>
 800220e:	4b1d      	ldr	r3, [pc, #116]	; (8002284 <HAL_RCC_OscConfig+0x26c>)
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f003 0302 	and.w	r3, r3, #2
 8002216:	2b00      	cmp	r3, #0
 8002218:	d1f0      	bne.n	80021fc <HAL_RCC_OscConfig+0x1e4>
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f003 0308 	and.w	r3, r3, #8
 8002222:	2b00      	cmp	r3, #0
 8002224:	d03a      	beq.n	800229c <HAL_RCC_OscConfig+0x284>
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	699b      	ldr	r3, [r3, #24]
 800222a:	2b00      	cmp	r3, #0
 800222c:	d019      	beq.n	8002262 <HAL_RCC_OscConfig+0x24a>
 800222e:	4b17      	ldr	r3, [pc, #92]	; (800228c <HAL_RCC_OscConfig+0x274>)
 8002230:	2201      	movs	r2, #1
 8002232:	601a      	str	r2, [r3, #0]
 8002234:	f7ff fbfc 	bl	8001a30 <HAL_GetTick>
 8002238:	6138      	str	r0, [r7, #16]
 800223a:	e008      	b.n	800224e <HAL_RCC_OscConfig+0x236>
 800223c:	f7ff fbf8 	bl	8001a30 <HAL_GetTick>
 8002240:	4602      	mov	r2, r0
 8002242:	693b      	ldr	r3, [r7, #16]
 8002244:	1ad3      	subs	r3, r2, r3
 8002246:	2b02      	cmp	r3, #2
 8002248:	d901      	bls.n	800224e <HAL_RCC_OscConfig+0x236>
 800224a:	2303      	movs	r3, #3
 800224c:	e160      	b.n	8002510 <HAL_RCC_OscConfig+0x4f8>
 800224e:	4b0d      	ldr	r3, [pc, #52]	; (8002284 <HAL_RCC_OscConfig+0x26c>)
 8002250:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002252:	f003 0302 	and.w	r3, r3, #2
 8002256:	2b00      	cmp	r3, #0
 8002258:	d0f0      	beq.n	800223c <HAL_RCC_OscConfig+0x224>
 800225a:	2001      	movs	r0, #1
 800225c:	f000 fa9c 	bl	8002798 <RCC_Delay>
 8002260:	e01c      	b.n	800229c <HAL_RCC_OscConfig+0x284>
 8002262:	4b0a      	ldr	r3, [pc, #40]	; (800228c <HAL_RCC_OscConfig+0x274>)
 8002264:	2200      	movs	r2, #0
 8002266:	601a      	str	r2, [r3, #0]
 8002268:	f7ff fbe2 	bl	8001a30 <HAL_GetTick>
 800226c:	6138      	str	r0, [r7, #16]
 800226e:	e00f      	b.n	8002290 <HAL_RCC_OscConfig+0x278>
 8002270:	f7ff fbde 	bl	8001a30 <HAL_GetTick>
 8002274:	4602      	mov	r2, r0
 8002276:	693b      	ldr	r3, [r7, #16]
 8002278:	1ad3      	subs	r3, r2, r3
 800227a:	2b02      	cmp	r3, #2
 800227c:	d908      	bls.n	8002290 <HAL_RCC_OscConfig+0x278>
 800227e:	2303      	movs	r3, #3
 8002280:	e146      	b.n	8002510 <HAL_RCC_OscConfig+0x4f8>
 8002282:	bf00      	nop
 8002284:	40021000 	.word	0x40021000
 8002288:	42420000 	.word	0x42420000
 800228c:	42420480 	.word	0x42420480
 8002290:	4b92      	ldr	r3, [pc, #584]	; (80024dc <HAL_RCC_OscConfig+0x4c4>)
 8002292:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002294:	f003 0302 	and.w	r3, r3, #2
 8002298:	2b00      	cmp	r3, #0
 800229a:	d1e9      	bne.n	8002270 <HAL_RCC_OscConfig+0x258>
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f003 0304 	and.w	r3, r3, #4
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	f000 80a6 	beq.w	80023f6 <HAL_RCC_OscConfig+0x3de>
 80022aa:	2300      	movs	r3, #0
 80022ac:	75fb      	strb	r3, [r7, #23]
 80022ae:	4b8b      	ldr	r3, [pc, #556]	; (80024dc <HAL_RCC_OscConfig+0x4c4>)
 80022b0:	69db      	ldr	r3, [r3, #28]
 80022b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d10d      	bne.n	80022d6 <HAL_RCC_OscConfig+0x2be>
 80022ba:	4b88      	ldr	r3, [pc, #544]	; (80024dc <HAL_RCC_OscConfig+0x4c4>)
 80022bc:	69db      	ldr	r3, [r3, #28]
 80022be:	4a87      	ldr	r2, [pc, #540]	; (80024dc <HAL_RCC_OscConfig+0x4c4>)
 80022c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022c4:	61d3      	str	r3, [r2, #28]
 80022c6:	4b85      	ldr	r3, [pc, #532]	; (80024dc <HAL_RCC_OscConfig+0x4c4>)
 80022c8:	69db      	ldr	r3, [r3, #28]
 80022ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022ce:	60bb      	str	r3, [r7, #8]
 80022d0:	68bb      	ldr	r3, [r7, #8]
 80022d2:	2301      	movs	r3, #1
 80022d4:	75fb      	strb	r3, [r7, #23]
 80022d6:	4b82      	ldr	r3, [pc, #520]	; (80024e0 <HAL_RCC_OscConfig+0x4c8>)
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d118      	bne.n	8002314 <HAL_RCC_OscConfig+0x2fc>
 80022e2:	4b7f      	ldr	r3, [pc, #508]	; (80024e0 <HAL_RCC_OscConfig+0x4c8>)
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	4a7e      	ldr	r2, [pc, #504]	; (80024e0 <HAL_RCC_OscConfig+0x4c8>)
 80022e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022ec:	6013      	str	r3, [r2, #0]
 80022ee:	f7ff fb9f 	bl	8001a30 <HAL_GetTick>
 80022f2:	6138      	str	r0, [r7, #16]
 80022f4:	e008      	b.n	8002308 <HAL_RCC_OscConfig+0x2f0>
 80022f6:	f7ff fb9b 	bl	8001a30 <HAL_GetTick>
 80022fa:	4602      	mov	r2, r0
 80022fc:	693b      	ldr	r3, [r7, #16]
 80022fe:	1ad3      	subs	r3, r2, r3
 8002300:	2b64      	cmp	r3, #100	; 0x64
 8002302:	d901      	bls.n	8002308 <HAL_RCC_OscConfig+0x2f0>
 8002304:	2303      	movs	r3, #3
 8002306:	e103      	b.n	8002510 <HAL_RCC_OscConfig+0x4f8>
 8002308:	4b75      	ldr	r3, [pc, #468]	; (80024e0 <HAL_RCC_OscConfig+0x4c8>)
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002310:	2b00      	cmp	r3, #0
 8002312:	d0f0      	beq.n	80022f6 <HAL_RCC_OscConfig+0x2de>
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	68db      	ldr	r3, [r3, #12]
 8002318:	2b01      	cmp	r3, #1
 800231a:	d106      	bne.n	800232a <HAL_RCC_OscConfig+0x312>
 800231c:	4b6f      	ldr	r3, [pc, #444]	; (80024dc <HAL_RCC_OscConfig+0x4c4>)
 800231e:	6a1b      	ldr	r3, [r3, #32]
 8002320:	4a6e      	ldr	r2, [pc, #440]	; (80024dc <HAL_RCC_OscConfig+0x4c4>)
 8002322:	f043 0301 	orr.w	r3, r3, #1
 8002326:	6213      	str	r3, [r2, #32]
 8002328:	e02d      	b.n	8002386 <HAL_RCC_OscConfig+0x36e>
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	68db      	ldr	r3, [r3, #12]
 800232e:	2b00      	cmp	r3, #0
 8002330:	d10c      	bne.n	800234c <HAL_RCC_OscConfig+0x334>
 8002332:	4b6a      	ldr	r3, [pc, #424]	; (80024dc <HAL_RCC_OscConfig+0x4c4>)
 8002334:	6a1b      	ldr	r3, [r3, #32]
 8002336:	4a69      	ldr	r2, [pc, #420]	; (80024dc <HAL_RCC_OscConfig+0x4c4>)
 8002338:	f023 0301 	bic.w	r3, r3, #1
 800233c:	6213      	str	r3, [r2, #32]
 800233e:	4b67      	ldr	r3, [pc, #412]	; (80024dc <HAL_RCC_OscConfig+0x4c4>)
 8002340:	6a1b      	ldr	r3, [r3, #32]
 8002342:	4a66      	ldr	r2, [pc, #408]	; (80024dc <HAL_RCC_OscConfig+0x4c4>)
 8002344:	f023 0304 	bic.w	r3, r3, #4
 8002348:	6213      	str	r3, [r2, #32]
 800234a:	e01c      	b.n	8002386 <HAL_RCC_OscConfig+0x36e>
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	68db      	ldr	r3, [r3, #12]
 8002350:	2b05      	cmp	r3, #5
 8002352:	d10c      	bne.n	800236e <HAL_RCC_OscConfig+0x356>
 8002354:	4b61      	ldr	r3, [pc, #388]	; (80024dc <HAL_RCC_OscConfig+0x4c4>)
 8002356:	6a1b      	ldr	r3, [r3, #32]
 8002358:	4a60      	ldr	r2, [pc, #384]	; (80024dc <HAL_RCC_OscConfig+0x4c4>)
 800235a:	f043 0304 	orr.w	r3, r3, #4
 800235e:	6213      	str	r3, [r2, #32]
 8002360:	4b5e      	ldr	r3, [pc, #376]	; (80024dc <HAL_RCC_OscConfig+0x4c4>)
 8002362:	6a1b      	ldr	r3, [r3, #32]
 8002364:	4a5d      	ldr	r2, [pc, #372]	; (80024dc <HAL_RCC_OscConfig+0x4c4>)
 8002366:	f043 0301 	orr.w	r3, r3, #1
 800236a:	6213      	str	r3, [r2, #32]
 800236c:	e00b      	b.n	8002386 <HAL_RCC_OscConfig+0x36e>
 800236e:	4b5b      	ldr	r3, [pc, #364]	; (80024dc <HAL_RCC_OscConfig+0x4c4>)
 8002370:	6a1b      	ldr	r3, [r3, #32]
 8002372:	4a5a      	ldr	r2, [pc, #360]	; (80024dc <HAL_RCC_OscConfig+0x4c4>)
 8002374:	f023 0301 	bic.w	r3, r3, #1
 8002378:	6213      	str	r3, [r2, #32]
 800237a:	4b58      	ldr	r3, [pc, #352]	; (80024dc <HAL_RCC_OscConfig+0x4c4>)
 800237c:	6a1b      	ldr	r3, [r3, #32]
 800237e:	4a57      	ldr	r2, [pc, #348]	; (80024dc <HAL_RCC_OscConfig+0x4c4>)
 8002380:	f023 0304 	bic.w	r3, r3, #4
 8002384:	6213      	str	r3, [r2, #32]
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	68db      	ldr	r3, [r3, #12]
 800238a:	2b00      	cmp	r3, #0
 800238c:	d015      	beq.n	80023ba <HAL_RCC_OscConfig+0x3a2>
 800238e:	f7ff fb4f 	bl	8001a30 <HAL_GetTick>
 8002392:	6138      	str	r0, [r7, #16]
 8002394:	e00a      	b.n	80023ac <HAL_RCC_OscConfig+0x394>
 8002396:	f7ff fb4b 	bl	8001a30 <HAL_GetTick>
 800239a:	4602      	mov	r2, r0
 800239c:	693b      	ldr	r3, [r7, #16]
 800239e:	1ad3      	subs	r3, r2, r3
 80023a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80023a4:	4293      	cmp	r3, r2
 80023a6:	d901      	bls.n	80023ac <HAL_RCC_OscConfig+0x394>
 80023a8:	2303      	movs	r3, #3
 80023aa:	e0b1      	b.n	8002510 <HAL_RCC_OscConfig+0x4f8>
 80023ac:	4b4b      	ldr	r3, [pc, #300]	; (80024dc <HAL_RCC_OscConfig+0x4c4>)
 80023ae:	6a1b      	ldr	r3, [r3, #32]
 80023b0:	f003 0302 	and.w	r3, r3, #2
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d0ee      	beq.n	8002396 <HAL_RCC_OscConfig+0x37e>
 80023b8:	e014      	b.n	80023e4 <HAL_RCC_OscConfig+0x3cc>
 80023ba:	f7ff fb39 	bl	8001a30 <HAL_GetTick>
 80023be:	6138      	str	r0, [r7, #16]
 80023c0:	e00a      	b.n	80023d8 <HAL_RCC_OscConfig+0x3c0>
 80023c2:	f7ff fb35 	bl	8001a30 <HAL_GetTick>
 80023c6:	4602      	mov	r2, r0
 80023c8:	693b      	ldr	r3, [r7, #16]
 80023ca:	1ad3      	subs	r3, r2, r3
 80023cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80023d0:	4293      	cmp	r3, r2
 80023d2:	d901      	bls.n	80023d8 <HAL_RCC_OscConfig+0x3c0>
 80023d4:	2303      	movs	r3, #3
 80023d6:	e09b      	b.n	8002510 <HAL_RCC_OscConfig+0x4f8>
 80023d8:	4b40      	ldr	r3, [pc, #256]	; (80024dc <HAL_RCC_OscConfig+0x4c4>)
 80023da:	6a1b      	ldr	r3, [r3, #32]
 80023dc:	f003 0302 	and.w	r3, r3, #2
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d1ee      	bne.n	80023c2 <HAL_RCC_OscConfig+0x3aa>
 80023e4:	7dfb      	ldrb	r3, [r7, #23]
 80023e6:	2b01      	cmp	r3, #1
 80023e8:	d105      	bne.n	80023f6 <HAL_RCC_OscConfig+0x3de>
 80023ea:	4b3c      	ldr	r3, [pc, #240]	; (80024dc <HAL_RCC_OscConfig+0x4c4>)
 80023ec:	69db      	ldr	r3, [r3, #28]
 80023ee:	4a3b      	ldr	r2, [pc, #236]	; (80024dc <HAL_RCC_OscConfig+0x4c4>)
 80023f0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80023f4:	61d3      	str	r3, [r2, #28]
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	69db      	ldr	r3, [r3, #28]
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	f000 8087 	beq.w	800250e <HAL_RCC_OscConfig+0x4f6>
 8002400:	4b36      	ldr	r3, [pc, #216]	; (80024dc <HAL_RCC_OscConfig+0x4c4>)
 8002402:	685b      	ldr	r3, [r3, #4]
 8002404:	f003 030c 	and.w	r3, r3, #12
 8002408:	2b08      	cmp	r3, #8
 800240a:	d061      	beq.n	80024d0 <HAL_RCC_OscConfig+0x4b8>
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	69db      	ldr	r3, [r3, #28]
 8002410:	2b02      	cmp	r3, #2
 8002412:	d146      	bne.n	80024a2 <HAL_RCC_OscConfig+0x48a>
 8002414:	4b33      	ldr	r3, [pc, #204]	; (80024e4 <HAL_RCC_OscConfig+0x4cc>)
 8002416:	2200      	movs	r2, #0
 8002418:	601a      	str	r2, [r3, #0]
 800241a:	f7ff fb09 	bl	8001a30 <HAL_GetTick>
 800241e:	6138      	str	r0, [r7, #16]
 8002420:	e008      	b.n	8002434 <HAL_RCC_OscConfig+0x41c>
 8002422:	f7ff fb05 	bl	8001a30 <HAL_GetTick>
 8002426:	4602      	mov	r2, r0
 8002428:	693b      	ldr	r3, [r7, #16]
 800242a:	1ad3      	subs	r3, r2, r3
 800242c:	2b02      	cmp	r3, #2
 800242e:	d901      	bls.n	8002434 <HAL_RCC_OscConfig+0x41c>
 8002430:	2303      	movs	r3, #3
 8002432:	e06d      	b.n	8002510 <HAL_RCC_OscConfig+0x4f8>
 8002434:	4b29      	ldr	r3, [pc, #164]	; (80024dc <HAL_RCC_OscConfig+0x4c4>)
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800243c:	2b00      	cmp	r3, #0
 800243e:	d1f0      	bne.n	8002422 <HAL_RCC_OscConfig+0x40a>
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	6a1b      	ldr	r3, [r3, #32]
 8002444:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002448:	d108      	bne.n	800245c <HAL_RCC_OscConfig+0x444>
 800244a:	4b24      	ldr	r3, [pc, #144]	; (80024dc <HAL_RCC_OscConfig+0x4c4>)
 800244c:	685b      	ldr	r3, [r3, #4]
 800244e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	689b      	ldr	r3, [r3, #8]
 8002456:	4921      	ldr	r1, [pc, #132]	; (80024dc <HAL_RCC_OscConfig+0x4c4>)
 8002458:	4313      	orrs	r3, r2
 800245a:	604b      	str	r3, [r1, #4]
 800245c:	4b1f      	ldr	r3, [pc, #124]	; (80024dc <HAL_RCC_OscConfig+0x4c4>)
 800245e:	685b      	ldr	r3, [r3, #4]
 8002460:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	6a19      	ldr	r1, [r3, #32]
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800246c:	430b      	orrs	r3, r1
 800246e:	491b      	ldr	r1, [pc, #108]	; (80024dc <HAL_RCC_OscConfig+0x4c4>)
 8002470:	4313      	orrs	r3, r2
 8002472:	604b      	str	r3, [r1, #4]
 8002474:	4b1b      	ldr	r3, [pc, #108]	; (80024e4 <HAL_RCC_OscConfig+0x4cc>)
 8002476:	2201      	movs	r2, #1
 8002478:	601a      	str	r2, [r3, #0]
 800247a:	f7ff fad9 	bl	8001a30 <HAL_GetTick>
 800247e:	6138      	str	r0, [r7, #16]
 8002480:	e008      	b.n	8002494 <HAL_RCC_OscConfig+0x47c>
 8002482:	f7ff fad5 	bl	8001a30 <HAL_GetTick>
 8002486:	4602      	mov	r2, r0
 8002488:	693b      	ldr	r3, [r7, #16]
 800248a:	1ad3      	subs	r3, r2, r3
 800248c:	2b02      	cmp	r3, #2
 800248e:	d901      	bls.n	8002494 <HAL_RCC_OscConfig+0x47c>
 8002490:	2303      	movs	r3, #3
 8002492:	e03d      	b.n	8002510 <HAL_RCC_OscConfig+0x4f8>
 8002494:	4b11      	ldr	r3, [pc, #68]	; (80024dc <HAL_RCC_OscConfig+0x4c4>)
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800249c:	2b00      	cmp	r3, #0
 800249e:	d0f0      	beq.n	8002482 <HAL_RCC_OscConfig+0x46a>
 80024a0:	e035      	b.n	800250e <HAL_RCC_OscConfig+0x4f6>
 80024a2:	4b10      	ldr	r3, [pc, #64]	; (80024e4 <HAL_RCC_OscConfig+0x4cc>)
 80024a4:	2200      	movs	r2, #0
 80024a6:	601a      	str	r2, [r3, #0]
 80024a8:	f7ff fac2 	bl	8001a30 <HAL_GetTick>
 80024ac:	6138      	str	r0, [r7, #16]
 80024ae:	e008      	b.n	80024c2 <HAL_RCC_OscConfig+0x4aa>
 80024b0:	f7ff fabe 	bl	8001a30 <HAL_GetTick>
 80024b4:	4602      	mov	r2, r0
 80024b6:	693b      	ldr	r3, [r7, #16]
 80024b8:	1ad3      	subs	r3, r2, r3
 80024ba:	2b02      	cmp	r3, #2
 80024bc:	d901      	bls.n	80024c2 <HAL_RCC_OscConfig+0x4aa>
 80024be:	2303      	movs	r3, #3
 80024c0:	e026      	b.n	8002510 <HAL_RCC_OscConfig+0x4f8>
 80024c2:	4b06      	ldr	r3, [pc, #24]	; (80024dc <HAL_RCC_OscConfig+0x4c4>)
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d1f0      	bne.n	80024b0 <HAL_RCC_OscConfig+0x498>
 80024ce:	e01e      	b.n	800250e <HAL_RCC_OscConfig+0x4f6>
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	69db      	ldr	r3, [r3, #28]
 80024d4:	2b01      	cmp	r3, #1
 80024d6:	d107      	bne.n	80024e8 <HAL_RCC_OscConfig+0x4d0>
 80024d8:	2301      	movs	r3, #1
 80024da:	e019      	b.n	8002510 <HAL_RCC_OscConfig+0x4f8>
 80024dc:	40021000 	.word	0x40021000
 80024e0:	40007000 	.word	0x40007000
 80024e4:	42420060 	.word	0x42420060
 80024e8:	4b0b      	ldr	r3, [pc, #44]	; (8002518 <HAL_RCC_OscConfig+0x500>)
 80024ea:	685b      	ldr	r3, [r3, #4]
 80024ec:	60fb      	str	r3, [r7, #12]
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	6a1b      	ldr	r3, [r3, #32]
 80024f8:	429a      	cmp	r2, r3
 80024fa:	d106      	bne.n	800250a <HAL_RCC_OscConfig+0x4f2>
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002506:	429a      	cmp	r2, r3
 8002508:	d001      	beq.n	800250e <HAL_RCC_OscConfig+0x4f6>
 800250a:	2301      	movs	r3, #1
 800250c:	e000      	b.n	8002510 <HAL_RCC_OscConfig+0x4f8>
 800250e:	2300      	movs	r3, #0
 8002510:	4618      	mov	r0, r3
 8002512:	3718      	adds	r7, #24
 8002514:	46bd      	mov	sp, r7
 8002516:	bd80      	pop	{r7, pc}
 8002518:	40021000 	.word	0x40021000

0800251c <HAL_RCC_ClockConfig>:
 800251c:	b580      	push	{r7, lr}
 800251e:	b084      	sub	sp, #16
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]
 8002524:	6039      	str	r1, [r7, #0]
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	2b00      	cmp	r3, #0
 800252a:	d101      	bne.n	8002530 <HAL_RCC_ClockConfig+0x14>
 800252c:	2301      	movs	r3, #1
 800252e:	e0d0      	b.n	80026d2 <HAL_RCC_ClockConfig+0x1b6>
 8002530:	4b6a      	ldr	r3, [pc, #424]	; (80026dc <HAL_RCC_ClockConfig+0x1c0>)
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f003 0307 	and.w	r3, r3, #7
 8002538:	683a      	ldr	r2, [r7, #0]
 800253a:	429a      	cmp	r2, r3
 800253c:	d910      	bls.n	8002560 <HAL_RCC_ClockConfig+0x44>
 800253e:	4b67      	ldr	r3, [pc, #412]	; (80026dc <HAL_RCC_ClockConfig+0x1c0>)
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f023 0207 	bic.w	r2, r3, #7
 8002546:	4965      	ldr	r1, [pc, #404]	; (80026dc <HAL_RCC_ClockConfig+0x1c0>)
 8002548:	683b      	ldr	r3, [r7, #0]
 800254a:	4313      	orrs	r3, r2
 800254c:	600b      	str	r3, [r1, #0]
 800254e:	4b63      	ldr	r3, [pc, #396]	; (80026dc <HAL_RCC_ClockConfig+0x1c0>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f003 0307 	and.w	r3, r3, #7
 8002556:	683a      	ldr	r2, [r7, #0]
 8002558:	429a      	cmp	r2, r3
 800255a:	d001      	beq.n	8002560 <HAL_RCC_ClockConfig+0x44>
 800255c:	2301      	movs	r3, #1
 800255e:	e0b8      	b.n	80026d2 <HAL_RCC_ClockConfig+0x1b6>
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f003 0302 	and.w	r3, r3, #2
 8002568:	2b00      	cmp	r3, #0
 800256a:	d020      	beq.n	80025ae <HAL_RCC_ClockConfig+0x92>
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f003 0304 	and.w	r3, r3, #4
 8002574:	2b00      	cmp	r3, #0
 8002576:	d005      	beq.n	8002584 <HAL_RCC_ClockConfig+0x68>
 8002578:	4b59      	ldr	r3, [pc, #356]	; (80026e0 <HAL_RCC_ClockConfig+0x1c4>)
 800257a:	685b      	ldr	r3, [r3, #4]
 800257c:	4a58      	ldr	r2, [pc, #352]	; (80026e0 <HAL_RCC_ClockConfig+0x1c4>)
 800257e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002582:	6053      	str	r3, [r2, #4]
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f003 0308 	and.w	r3, r3, #8
 800258c:	2b00      	cmp	r3, #0
 800258e:	d005      	beq.n	800259c <HAL_RCC_ClockConfig+0x80>
 8002590:	4b53      	ldr	r3, [pc, #332]	; (80026e0 <HAL_RCC_ClockConfig+0x1c4>)
 8002592:	685b      	ldr	r3, [r3, #4]
 8002594:	4a52      	ldr	r2, [pc, #328]	; (80026e0 <HAL_RCC_ClockConfig+0x1c4>)
 8002596:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800259a:	6053      	str	r3, [r2, #4]
 800259c:	4b50      	ldr	r3, [pc, #320]	; (80026e0 <HAL_RCC_ClockConfig+0x1c4>)
 800259e:	685b      	ldr	r3, [r3, #4]
 80025a0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	689b      	ldr	r3, [r3, #8]
 80025a8:	494d      	ldr	r1, [pc, #308]	; (80026e0 <HAL_RCC_ClockConfig+0x1c4>)
 80025aa:	4313      	orrs	r3, r2
 80025ac:	604b      	str	r3, [r1, #4]
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f003 0301 	and.w	r3, r3, #1
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d040      	beq.n	800263c <HAL_RCC_ClockConfig+0x120>
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	685b      	ldr	r3, [r3, #4]
 80025be:	2b01      	cmp	r3, #1
 80025c0:	d107      	bne.n	80025d2 <HAL_RCC_ClockConfig+0xb6>
 80025c2:	4b47      	ldr	r3, [pc, #284]	; (80026e0 <HAL_RCC_ClockConfig+0x1c4>)
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d115      	bne.n	80025fa <HAL_RCC_ClockConfig+0xde>
 80025ce:	2301      	movs	r3, #1
 80025d0:	e07f      	b.n	80026d2 <HAL_RCC_ClockConfig+0x1b6>
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	685b      	ldr	r3, [r3, #4]
 80025d6:	2b02      	cmp	r3, #2
 80025d8:	d107      	bne.n	80025ea <HAL_RCC_ClockConfig+0xce>
 80025da:	4b41      	ldr	r3, [pc, #260]	; (80026e0 <HAL_RCC_ClockConfig+0x1c4>)
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d109      	bne.n	80025fa <HAL_RCC_ClockConfig+0xde>
 80025e6:	2301      	movs	r3, #1
 80025e8:	e073      	b.n	80026d2 <HAL_RCC_ClockConfig+0x1b6>
 80025ea:	4b3d      	ldr	r3, [pc, #244]	; (80026e0 <HAL_RCC_ClockConfig+0x1c4>)
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f003 0302 	and.w	r3, r3, #2
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d101      	bne.n	80025fa <HAL_RCC_ClockConfig+0xde>
 80025f6:	2301      	movs	r3, #1
 80025f8:	e06b      	b.n	80026d2 <HAL_RCC_ClockConfig+0x1b6>
 80025fa:	4b39      	ldr	r3, [pc, #228]	; (80026e0 <HAL_RCC_ClockConfig+0x1c4>)
 80025fc:	685b      	ldr	r3, [r3, #4]
 80025fe:	f023 0203 	bic.w	r2, r3, #3
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	685b      	ldr	r3, [r3, #4]
 8002606:	4936      	ldr	r1, [pc, #216]	; (80026e0 <HAL_RCC_ClockConfig+0x1c4>)
 8002608:	4313      	orrs	r3, r2
 800260a:	604b      	str	r3, [r1, #4]
 800260c:	f7ff fa10 	bl	8001a30 <HAL_GetTick>
 8002610:	60f8      	str	r0, [r7, #12]
 8002612:	e00a      	b.n	800262a <HAL_RCC_ClockConfig+0x10e>
 8002614:	f7ff fa0c 	bl	8001a30 <HAL_GetTick>
 8002618:	4602      	mov	r2, r0
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	1ad3      	subs	r3, r2, r3
 800261e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002622:	4293      	cmp	r3, r2
 8002624:	d901      	bls.n	800262a <HAL_RCC_ClockConfig+0x10e>
 8002626:	2303      	movs	r3, #3
 8002628:	e053      	b.n	80026d2 <HAL_RCC_ClockConfig+0x1b6>
 800262a:	4b2d      	ldr	r3, [pc, #180]	; (80026e0 <HAL_RCC_ClockConfig+0x1c4>)
 800262c:	685b      	ldr	r3, [r3, #4]
 800262e:	f003 020c 	and.w	r2, r3, #12
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	685b      	ldr	r3, [r3, #4]
 8002636:	009b      	lsls	r3, r3, #2
 8002638:	429a      	cmp	r2, r3
 800263a:	d1eb      	bne.n	8002614 <HAL_RCC_ClockConfig+0xf8>
 800263c:	4b27      	ldr	r3, [pc, #156]	; (80026dc <HAL_RCC_ClockConfig+0x1c0>)
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f003 0307 	and.w	r3, r3, #7
 8002644:	683a      	ldr	r2, [r7, #0]
 8002646:	429a      	cmp	r2, r3
 8002648:	d210      	bcs.n	800266c <HAL_RCC_ClockConfig+0x150>
 800264a:	4b24      	ldr	r3, [pc, #144]	; (80026dc <HAL_RCC_ClockConfig+0x1c0>)
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f023 0207 	bic.w	r2, r3, #7
 8002652:	4922      	ldr	r1, [pc, #136]	; (80026dc <HAL_RCC_ClockConfig+0x1c0>)
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	4313      	orrs	r3, r2
 8002658:	600b      	str	r3, [r1, #0]
 800265a:	4b20      	ldr	r3, [pc, #128]	; (80026dc <HAL_RCC_ClockConfig+0x1c0>)
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f003 0307 	and.w	r3, r3, #7
 8002662:	683a      	ldr	r2, [r7, #0]
 8002664:	429a      	cmp	r2, r3
 8002666:	d001      	beq.n	800266c <HAL_RCC_ClockConfig+0x150>
 8002668:	2301      	movs	r3, #1
 800266a:	e032      	b.n	80026d2 <HAL_RCC_ClockConfig+0x1b6>
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f003 0304 	and.w	r3, r3, #4
 8002674:	2b00      	cmp	r3, #0
 8002676:	d008      	beq.n	800268a <HAL_RCC_ClockConfig+0x16e>
 8002678:	4b19      	ldr	r3, [pc, #100]	; (80026e0 <HAL_RCC_ClockConfig+0x1c4>)
 800267a:	685b      	ldr	r3, [r3, #4]
 800267c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	68db      	ldr	r3, [r3, #12]
 8002684:	4916      	ldr	r1, [pc, #88]	; (80026e0 <HAL_RCC_ClockConfig+0x1c4>)
 8002686:	4313      	orrs	r3, r2
 8002688:	604b      	str	r3, [r1, #4]
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f003 0308 	and.w	r3, r3, #8
 8002692:	2b00      	cmp	r3, #0
 8002694:	d009      	beq.n	80026aa <HAL_RCC_ClockConfig+0x18e>
 8002696:	4b12      	ldr	r3, [pc, #72]	; (80026e0 <HAL_RCC_ClockConfig+0x1c4>)
 8002698:	685b      	ldr	r3, [r3, #4]
 800269a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	691b      	ldr	r3, [r3, #16]
 80026a2:	00db      	lsls	r3, r3, #3
 80026a4:	490e      	ldr	r1, [pc, #56]	; (80026e0 <HAL_RCC_ClockConfig+0x1c4>)
 80026a6:	4313      	orrs	r3, r2
 80026a8:	604b      	str	r3, [r1, #4]
 80026aa:	f000 f821 	bl	80026f0 <HAL_RCC_GetSysClockFreq>
 80026ae:	4602      	mov	r2, r0
 80026b0:	4b0b      	ldr	r3, [pc, #44]	; (80026e0 <HAL_RCC_ClockConfig+0x1c4>)
 80026b2:	685b      	ldr	r3, [r3, #4]
 80026b4:	091b      	lsrs	r3, r3, #4
 80026b6:	f003 030f 	and.w	r3, r3, #15
 80026ba:	490a      	ldr	r1, [pc, #40]	; (80026e4 <HAL_RCC_ClockConfig+0x1c8>)
 80026bc:	5ccb      	ldrb	r3, [r1, r3]
 80026be:	fa22 f303 	lsr.w	r3, r2, r3
 80026c2:	4a09      	ldr	r2, [pc, #36]	; (80026e8 <HAL_RCC_ClockConfig+0x1cc>)
 80026c4:	6013      	str	r3, [r2, #0]
 80026c6:	4b09      	ldr	r3, [pc, #36]	; (80026ec <HAL_RCC_ClockConfig+0x1d0>)
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	4618      	mov	r0, r3
 80026cc:	f7ff f96e 	bl	80019ac <HAL_InitTick>
 80026d0:	2300      	movs	r3, #0
 80026d2:	4618      	mov	r0, r3
 80026d4:	3710      	adds	r7, #16
 80026d6:	46bd      	mov	sp, r7
 80026d8:	bd80      	pop	{r7, pc}
 80026da:	bf00      	nop
 80026dc:	40022000 	.word	0x40022000
 80026e0:	40021000 	.word	0x40021000
 80026e4:	08003090 	.word	0x08003090
 80026e8:	20000010 	.word	0x20000010
 80026ec:	20000024 	.word	0x20000024

080026f0 <HAL_RCC_GetSysClockFreq>:
 80026f0:	b480      	push	{r7}
 80026f2:	b087      	sub	sp, #28
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	2300      	movs	r3, #0
 80026f8:	60fb      	str	r3, [r7, #12]
 80026fa:	2300      	movs	r3, #0
 80026fc:	60bb      	str	r3, [r7, #8]
 80026fe:	2300      	movs	r3, #0
 8002700:	617b      	str	r3, [r7, #20]
 8002702:	2300      	movs	r3, #0
 8002704:	607b      	str	r3, [r7, #4]
 8002706:	2300      	movs	r3, #0
 8002708:	613b      	str	r3, [r7, #16]
 800270a:	4b1e      	ldr	r3, [pc, #120]	; (8002784 <HAL_RCC_GetSysClockFreq+0x94>)
 800270c:	685b      	ldr	r3, [r3, #4]
 800270e:	60fb      	str	r3, [r7, #12]
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	f003 030c 	and.w	r3, r3, #12
 8002716:	2b04      	cmp	r3, #4
 8002718:	d002      	beq.n	8002720 <HAL_RCC_GetSysClockFreq+0x30>
 800271a:	2b08      	cmp	r3, #8
 800271c:	d003      	beq.n	8002726 <HAL_RCC_GetSysClockFreq+0x36>
 800271e:	e027      	b.n	8002770 <HAL_RCC_GetSysClockFreq+0x80>
 8002720:	4b19      	ldr	r3, [pc, #100]	; (8002788 <HAL_RCC_GetSysClockFreq+0x98>)
 8002722:	613b      	str	r3, [r7, #16]
 8002724:	e027      	b.n	8002776 <HAL_RCC_GetSysClockFreq+0x86>
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	0c9b      	lsrs	r3, r3, #18
 800272a:	f003 030f 	and.w	r3, r3, #15
 800272e:	4a17      	ldr	r2, [pc, #92]	; (800278c <HAL_RCC_GetSysClockFreq+0x9c>)
 8002730:	5cd3      	ldrb	r3, [r2, r3]
 8002732:	607b      	str	r3, [r7, #4]
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800273a:	2b00      	cmp	r3, #0
 800273c:	d010      	beq.n	8002760 <HAL_RCC_GetSysClockFreq+0x70>
 800273e:	4b11      	ldr	r3, [pc, #68]	; (8002784 <HAL_RCC_GetSysClockFreq+0x94>)
 8002740:	685b      	ldr	r3, [r3, #4]
 8002742:	0c5b      	lsrs	r3, r3, #17
 8002744:	f003 0301 	and.w	r3, r3, #1
 8002748:	4a11      	ldr	r2, [pc, #68]	; (8002790 <HAL_RCC_GetSysClockFreq+0xa0>)
 800274a:	5cd3      	ldrb	r3, [r2, r3]
 800274c:	60bb      	str	r3, [r7, #8]
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	4a0d      	ldr	r2, [pc, #52]	; (8002788 <HAL_RCC_GetSysClockFreq+0x98>)
 8002752:	fb03 f202 	mul.w	r2, r3, r2
 8002756:	68bb      	ldr	r3, [r7, #8]
 8002758:	fbb2 f3f3 	udiv	r3, r2, r3
 800275c:	617b      	str	r3, [r7, #20]
 800275e:	e004      	b.n	800276a <HAL_RCC_GetSysClockFreq+0x7a>
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	4a0c      	ldr	r2, [pc, #48]	; (8002794 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002764:	fb02 f303 	mul.w	r3, r2, r3
 8002768:	617b      	str	r3, [r7, #20]
 800276a:	697b      	ldr	r3, [r7, #20]
 800276c:	613b      	str	r3, [r7, #16]
 800276e:	e002      	b.n	8002776 <HAL_RCC_GetSysClockFreq+0x86>
 8002770:	4b05      	ldr	r3, [pc, #20]	; (8002788 <HAL_RCC_GetSysClockFreq+0x98>)
 8002772:	613b      	str	r3, [r7, #16]
 8002774:	bf00      	nop
 8002776:	693b      	ldr	r3, [r7, #16]
 8002778:	4618      	mov	r0, r3
 800277a:	371c      	adds	r7, #28
 800277c:	46bd      	mov	sp, r7
 800277e:	bc80      	pop	{r7}
 8002780:	4770      	bx	lr
 8002782:	bf00      	nop
 8002784:	40021000 	.word	0x40021000
 8002788:	007a1200 	.word	0x007a1200
 800278c:	080030a0 	.word	0x080030a0
 8002790:	080030b0 	.word	0x080030b0
 8002794:	003d0900 	.word	0x003d0900

08002798 <RCC_Delay>:
 8002798:	b480      	push	{r7}
 800279a:	b085      	sub	sp, #20
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
 80027a0:	4b0a      	ldr	r3, [pc, #40]	; (80027cc <RCC_Delay+0x34>)
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	4a0a      	ldr	r2, [pc, #40]	; (80027d0 <RCC_Delay+0x38>)
 80027a6:	fba2 2303 	umull	r2, r3, r2, r3
 80027aa:	0a5b      	lsrs	r3, r3, #9
 80027ac:	687a      	ldr	r2, [r7, #4]
 80027ae:	fb02 f303 	mul.w	r3, r2, r3
 80027b2:	60fb      	str	r3, [r7, #12]
 80027b4:	bf00      	nop
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	1e5a      	subs	r2, r3, #1
 80027ba:	60fa      	str	r2, [r7, #12]
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d1f9      	bne.n	80027b4 <RCC_Delay+0x1c>
 80027c0:	bf00      	nop
 80027c2:	bf00      	nop
 80027c4:	3714      	adds	r7, #20
 80027c6:	46bd      	mov	sp, r7
 80027c8:	bc80      	pop	{r7}
 80027ca:	4770      	bx	lr
 80027cc:	20000010 	.word	0x20000010
 80027d0:	10624dd3 	.word	0x10624dd3

080027d4 <HAL_TIM_Base_Init>:
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b082      	sub	sp, #8
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d101      	bne.n	80027e6 <HAL_TIM_Base_Init+0x12>
 80027e2:	2301      	movs	r3, #1
 80027e4:	e041      	b.n	800286a <HAL_TIM_Base_Init+0x96>
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027ec:	b2db      	uxtb	r3, r3
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d106      	bne.n	8002800 <HAL_TIM_Base_Init+0x2c>
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	2200      	movs	r2, #0
 80027f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80027fa:	6878      	ldr	r0, [r7, #4]
 80027fc:	f7fe fe34 	bl	8001468 <HAL_TIM_Base_MspInit>
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	2202      	movs	r2, #2
 8002804:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681a      	ldr	r2, [r3, #0]
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	3304      	adds	r3, #4
 8002810:	4619      	mov	r1, r3
 8002812:	4610      	mov	r0, r2
 8002814:	f000 fa6a 	bl	8002cec <TIM_Base_SetConfig>
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	2201      	movs	r2, #1
 800281c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	2201      	movs	r2, #1
 8002824:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	2201      	movs	r2, #1
 800282c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	2201      	movs	r2, #1
 8002834:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	2201      	movs	r2, #1
 800283c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	2201      	movs	r2, #1
 8002844:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	2201      	movs	r2, #1
 800284c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	2201      	movs	r2, #1
 8002854:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	2201      	movs	r2, #1
 800285c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	2201      	movs	r2, #1
 8002864:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8002868:	2300      	movs	r3, #0
 800286a:	4618      	mov	r0, r3
 800286c:	3708      	adds	r7, #8
 800286e:	46bd      	mov	sp, r7
 8002870:	bd80      	pop	{r7, pc}
	...

08002874 <HAL_TIM_Base_Start_IT>:
 8002874:	b480      	push	{r7}
 8002876:	b085      	sub	sp, #20
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002882:	b2db      	uxtb	r3, r3
 8002884:	2b01      	cmp	r3, #1
 8002886:	d001      	beq.n	800288c <HAL_TIM_Base_Start_IT+0x18>
 8002888:	2301      	movs	r3, #1
 800288a:	e044      	b.n	8002916 <HAL_TIM_Base_Start_IT+0xa2>
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	2202      	movs	r2, #2
 8002890:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	68da      	ldr	r2, [r3, #12]
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f042 0201 	orr.w	r2, r2, #1
 80028a2:	60da      	str	r2, [r3, #12]
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	4a1d      	ldr	r2, [pc, #116]	; (8002920 <HAL_TIM_Base_Start_IT+0xac>)
 80028aa:	4293      	cmp	r3, r2
 80028ac:	d018      	beq.n	80028e0 <HAL_TIM_Base_Start_IT+0x6c>
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	4a1c      	ldr	r2, [pc, #112]	; (8002924 <HAL_TIM_Base_Start_IT+0xb0>)
 80028b4:	4293      	cmp	r3, r2
 80028b6:	d013      	beq.n	80028e0 <HAL_TIM_Base_Start_IT+0x6c>
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028c0:	d00e      	beq.n	80028e0 <HAL_TIM_Base_Start_IT+0x6c>
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	4a18      	ldr	r2, [pc, #96]	; (8002928 <HAL_TIM_Base_Start_IT+0xb4>)
 80028c8:	4293      	cmp	r3, r2
 80028ca:	d009      	beq.n	80028e0 <HAL_TIM_Base_Start_IT+0x6c>
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	4a16      	ldr	r2, [pc, #88]	; (800292c <HAL_TIM_Base_Start_IT+0xb8>)
 80028d2:	4293      	cmp	r3, r2
 80028d4:	d004      	beq.n	80028e0 <HAL_TIM_Base_Start_IT+0x6c>
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	4a15      	ldr	r2, [pc, #84]	; (8002930 <HAL_TIM_Base_Start_IT+0xbc>)
 80028dc:	4293      	cmp	r3, r2
 80028de:	d111      	bne.n	8002904 <HAL_TIM_Base_Start_IT+0x90>
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	689b      	ldr	r3, [r3, #8]
 80028e6:	f003 0307 	and.w	r3, r3, #7
 80028ea:	60fb      	str	r3, [r7, #12]
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	2b06      	cmp	r3, #6
 80028f0:	d010      	beq.n	8002914 <HAL_TIM_Base_Start_IT+0xa0>
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	681a      	ldr	r2, [r3, #0]
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f042 0201 	orr.w	r2, r2, #1
 8002900:	601a      	str	r2, [r3, #0]
 8002902:	e007      	b.n	8002914 <HAL_TIM_Base_Start_IT+0xa0>
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	681a      	ldr	r2, [r3, #0]
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f042 0201 	orr.w	r2, r2, #1
 8002912:	601a      	str	r2, [r3, #0]
 8002914:	2300      	movs	r3, #0
 8002916:	4618      	mov	r0, r3
 8002918:	3714      	adds	r7, #20
 800291a:	46bd      	mov	sp, r7
 800291c:	bc80      	pop	{r7}
 800291e:	4770      	bx	lr
 8002920:	40012c00 	.word	0x40012c00
 8002924:	40013400 	.word	0x40013400
 8002928:	40000400 	.word	0x40000400
 800292c:	40000800 	.word	0x40000800
 8002930:	40000c00 	.word	0x40000c00

08002934 <HAL_TIM_IRQHandler>:
 8002934:	b580      	push	{r7, lr}
 8002936:	b084      	sub	sp, #16
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	68db      	ldr	r3, [r3, #12]
 8002942:	60fb      	str	r3, [r7, #12]
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	691b      	ldr	r3, [r3, #16]
 800294a:	60bb      	str	r3, [r7, #8]
 800294c:	68bb      	ldr	r3, [r7, #8]
 800294e:	f003 0302 	and.w	r3, r3, #2
 8002952:	2b00      	cmp	r3, #0
 8002954:	d020      	beq.n	8002998 <HAL_TIM_IRQHandler+0x64>
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	f003 0302 	and.w	r3, r3, #2
 800295c:	2b00      	cmp	r3, #0
 800295e:	d01b      	beq.n	8002998 <HAL_TIM_IRQHandler+0x64>
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f06f 0202 	mvn.w	r2, #2
 8002968:	611a      	str	r2, [r3, #16]
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	2201      	movs	r2, #1
 800296e:	771a      	strb	r2, [r3, #28]
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	699b      	ldr	r3, [r3, #24]
 8002976:	f003 0303 	and.w	r3, r3, #3
 800297a:	2b00      	cmp	r3, #0
 800297c:	d003      	beq.n	8002986 <HAL_TIM_IRQHandler+0x52>
 800297e:	6878      	ldr	r0, [r7, #4]
 8002980:	f000 f998 	bl	8002cb4 <HAL_TIM_IC_CaptureCallback>
 8002984:	e005      	b.n	8002992 <HAL_TIM_IRQHandler+0x5e>
 8002986:	6878      	ldr	r0, [r7, #4]
 8002988:	f000 f98b 	bl	8002ca2 <HAL_TIM_OC_DelayElapsedCallback>
 800298c:	6878      	ldr	r0, [r7, #4]
 800298e:	f000 f99a 	bl	8002cc6 <HAL_TIM_PWM_PulseFinishedCallback>
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	2200      	movs	r2, #0
 8002996:	771a      	strb	r2, [r3, #28]
 8002998:	68bb      	ldr	r3, [r7, #8]
 800299a:	f003 0304 	and.w	r3, r3, #4
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d020      	beq.n	80029e4 <HAL_TIM_IRQHandler+0xb0>
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	f003 0304 	and.w	r3, r3, #4
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d01b      	beq.n	80029e4 <HAL_TIM_IRQHandler+0xb0>
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f06f 0204 	mvn.w	r2, #4
 80029b4:	611a      	str	r2, [r3, #16]
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	2202      	movs	r2, #2
 80029ba:	771a      	strb	r2, [r3, #28]
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	699b      	ldr	r3, [r3, #24]
 80029c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d003      	beq.n	80029d2 <HAL_TIM_IRQHandler+0x9e>
 80029ca:	6878      	ldr	r0, [r7, #4]
 80029cc:	f000 f972 	bl	8002cb4 <HAL_TIM_IC_CaptureCallback>
 80029d0:	e005      	b.n	80029de <HAL_TIM_IRQHandler+0xaa>
 80029d2:	6878      	ldr	r0, [r7, #4]
 80029d4:	f000 f965 	bl	8002ca2 <HAL_TIM_OC_DelayElapsedCallback>
 80029d8:	6878      	ldr	r0, [r7, #4]
 80029da:	f000 f974 	bl	8002cc6 <HAL_TIM_PWM_PulseFinishedCallback>
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	2200      	movs	r2, #0
 80029e2:	771a      	strb	r2, [r3, #28]
 80029e4:	68bb      	ldr	r3, [r7, #8]
 80029e6:	f003 0308 	and.w	r3, r3, #8
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d020      	beq.n	8002a30 <HAL_TIM_IRQHandler+0xfc>
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	f003 0308 	and.w	r3, r3, #8
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d01b      	beq.n	8002a30 <HAL_TIM_IRQHandler+0xfc>
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f06f 0208 	mvn.w	r2, #8
 8002a00:	611a      	str	r2, [r3, #16]
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	2204      	movs	r2, #4
 8002a06:	771a      	strb	r2, [r3, #28]
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	69db      	ldr	r3, [r3, #28]
 8002a0e:	f003 0303 	and.w	r3, r3, #3
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d003      	beq.n	8002a1e <HAL_TIM_IRQHandler+0xea>
 8002a16:	6878      	ldr	r0, [r7, #4]
 8002a18:	f000 f94c 	bl	8002cb4 <HAL_TIM_IC_CaptureCallback>
 8002a1c:	e005      	b.n	8002a2a <HAL_TIM_IRQHandler+0xf6>
 8002a1e:	6878      	ldr	r0, [r7, #4]
 8002a20:	f000 f93f 	bl	8002ca2 <HAL_TIM_OC_DelayElapsedCallback>
 8002a24:	6878      	ldr	r0, [r7, #4]
 8002a26:	f000 f94e 	bl	8002cc6 <HAL_TIM_PWM_PulseFinishedCallback>
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	771a      	strb	r2, [r3, #28]
 8002a30:	68bb      	ldr	r3, [r7, #8]
 8002a32:	f003 0310 	and.w	r3, r3, #16
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d020      	beq.n	8002a7c <HAL_TIM_IRQHandler+0x148>
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	f003 0310 	and.w	r3, r3, #16
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d01b      	beq.n	8002a7c <HAL_TIM_IRQHandler+0x148>
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f06f 0210 	mvn.w	r2, #16
 8002a4c:	611a      	str	r2, [r3, #16]
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	2208      	movs	r2, #8
 8002a52:	771a      	strb	r2, [r3, #28]
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	69db      	ldr	r3, [r3, #28]
 8002a5a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d003      	beq.n	8002a6a <HAL_TIM_IRQHandler+0x136>
 8002a62:	6878      	ldr	r0, [r7, #4]
 8002a64:	f000 f926 	bl	8002cb4 <HAL_TIM_IC_CaptureCallback>
 8002a68:	e005      	b.n	8002a76 <HAL_TIM_IRQHandler+0x142>
 8002a6a:	6878      	ldr	r0, [r7, #4]
 8002a6c:	f000 f919 	bl	8002ca2 <HAL_TIM_OC_DelayElapsedCallback>
 8002a70:	6878      	ldr	r0, [r7, #4]
 8002a72:	f000 f928 	bl	8002cc6 <HAL_TIM_PWM_PulseFinishedCallback>
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	2200      	movs	r2, #0
 8002a7a:	771a      	strb	r2, [r3, #28]
 8002a7c:	68bb      	ldr	r3, [r7, #8]
 8002a7e:	f003 0301 	and.w	r3, r3, #1
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d00c      	beq.n	8002aa0 <HAL_TIM_IRQHandler+0x16c>
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	f003 0301 	and.w	r3, r3, #1
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d007      	beq.n	8002aa0 <HAL_TIM_IRQHandler+0x16c>
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f06f 0201 	mvn.w	r2, #1
 8002a98:	611a      	str	r2, [r3, #16]
 8002a9a:	6878      	ldr	r0, [r7, #4]
 8002a9c:	f7fe fa06 	bl	8000eac <HAL_TIM_PeriodElapsedCallback>
 8002aa0:	68bb      	ldr	r3, [r7, #8]
 8002aa2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d00c      	beq.n	8002ac4 <HAL_TIM_IRQHandler+0x190>
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d007      	beq.n	8002ac4 <HAL_TIM_IRQHandler+0x190>
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002abc:	611a      	str	r2, [r3, #16]
 8002abe:	6878      	ldr	r0, [r7, #4]
 8002ac0:	f000 faa5 	bl	800300e <HAL_TIMEx_BreakCallback>
 8002ac4:	68bb      	ldr	r3, [r7, #8]
 8002ac6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d00c      	beq.n	8002ae8 <HAL_TIM_IRQHandler+0x1b4>
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d007      	beq.n	8002ae8 <HAL_TIM_IRQHandler+0x1b4>
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002ae0:	611a      	str	r2, [r3, #16]
 8002ae2:	6878      	ldr	r0, [r7, #4]
 8002ae4:	f000 f8f8 	bl	8002cd8 <HAL_TIM_TriggerCallback>
 8002ae8:	68bb      	ldr	r3, [r7, #8]
 8002aea:	f003 0320 	and.w	r3, r3, #32
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d00c      	beq.n	8002b0c <HAL_TIM_IRQHandler+0x1d8>
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	f003 0320 	and.w	r3, r3, #32
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d007      	beq.n	8002b0c <HAL_TIM_IRQHandler+0x1d8>
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f06f 0220 	mvn.w	r2, #32
 8002b04:	611a      	str	r2, [r3, #16]
 8002b06:	6878      	ldr	r0, [r7, #4]
 8002b08:	f000 fa78 	bl	8002ffc <HAL_TIMEx_CommutCallback>
 8002b0c:	bf00      	nop
 8002b0e:	3710      	adds	r7, #16
 8002b10:	46bd      	mov	sp, r7
 8002b12:	bd80      	pop	{r7, pc}

08002b14 <HAL_TIM_ConfigClockSource>:
 8002b14:	b580      	push	{r7, lr}
 8002b16:	b084      	sub	sp, #16
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]
 8002b1c:	6039      	str	r1, [r7, #0]
 8002b1e:	2300      	movs	r3, #0
 8002b20:	73fb      	strb	r3, [r7, #15]
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b28:	2b01      	cmp	r3, #1
 8002b2a:	d101      	bne.n	8002b30 <HAL_TIM_ConfigClockSource+0x1c>
 8002b2c:	2302      	movs	r3, #2
 8002b2e:	e0b4      	b.n	8002c9a <HAL_TIM_ConfigClockSource+0x186>
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	2201      	movs	r2, #1
 8002b34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	2202      	movs	r2, #2
 8002b3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	689b      	ldr	r3, [r3, #8]
 8002b46:	60bb      	str	r3, [r7, #8]
 8002b48:	68bb      	ldr	r3, [r7, #8]
 8002b4a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002b4e:	60bb      	str	r3, [r7, #8]
 8002b50:	68bb      	ldr	r3, [r7, #8]
 8002b52:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002b56:	60bb      	str	r3, [r7, #8]
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	68ba      	ldr	r2, [r7, #8]
 8002b5e:	609a      	str	r2, [r3, #8]
 8002b60:	683b      	ldr	r3, [r7, #0]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b68:	d03e      	beq.n	8002be8 <HAL_TIM_ConfigClockSource+0xd4>
 8002b6a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b6e:	f200 8087 	bhi.w	8002c80 <HAL_TIM_ConfigClockSource+0x16c>
 8002b72:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b76:	f000 8086 	beq.w	8002c86 <HAL_TIM_ConfigClockSource+0x172>
 8002b7a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b7e:	d87f      	bhi.n	8002c80 <HAL_TIM_ConfigClockSource+0x16c>
 8002b80:	2b70      	cmp	r3, #112	; 0x70
 8002b82:	d01a      	beq.n	8002bba <HAL_TIM_ConfigClockSource+0xa6>
 8002b84:	2b70      	cmp	r3, #112	; 0x70
 8002b86:	d87b      	bhi.n	8002c80 <HAL_TIM_ConfigClockSource+0x16c>
 8002b88:	2b60      	cmp	r3, #96	; 0x60
 8002b8a:	d050      	beq.n	8002c2e <HAL_TIM_ConfigClockSource+0x11a>
 8002b8c:	2b60      	cmp	r3, #96	; 0x60
 8002b8e:	d877      	bhi.n	8002c80 <HAL_TIM_ConfigClockSource+0x16c>
 8002b90:	2b50      	cmp	r3, #80	; 0x50
 8002b92:	d03c      	beq.n	8002c0e <HAL_TIM_ConfigClockSource+0xfa>
 8002b94:	2b50      	cmp	r3, #80	; 0x50
 8002b96:	d873      	bhi.n	8002c80 <HAL_TIM_ConfigClockSource+0x16c>
 8002b98:	2b40      	cmp	r3, #64	; 0x40
 8002b9a:	d058      	beq.n	8002c4e <HAL_TIM_ConfigClockSource+0x13a>
 8002b9c:	2b40      	cmp	r3, #64	; 0x40
 8002b9e:	d86f      	bhi.n	8002c80 <HAL_TIM_ConfigClockSource+0x16c>
 8002ba0:	2b30      	cmp	r3, #48	; 0x30
 8002ba2:	d064      	beq.n	8002c6e <HAL_TIM_ConfigClockSource+0x15a>
 8002ba4:	2b30      	cmp	r3, #48	; 0x30
 8002ba6:	d86b      	bhi.n	8002c80 <HAL_TIM_ConfigClockSource+0x16c>
 8002ba8:	2b20      	cmp	r3, #32
 8002baa:	d060      	beq.n	8002c6e <HAL_TIM_ConfigClockSource+0x15a>
 8002bac:	2b20      	cmp	r3, #32
 8002bae:	d867      	bhi.n	8002c80 <HAL_TIM_ConfigClockSource+0x16c>
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d05c      	beq.n	8002c6e <HAL_TIM_ConfigClockSource+0x15a>
 8002bb4:	2b10      	cmp	r3, #16
 8002bb6:	d05a      	beq.n	8002c6e <HAL_TIM_ConfigClockSource+0x15a>
 8002bb8:	e062      	b.n	8002c80 <HAL_TIM_ConfigClockSource+0x16c>
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	6818      	ldr	r0, [r3, #0]
 8002bbe:	683b      	ldr	r3, [r7, #0]
 8002bc0:	6899      	ldr	r1, [r3, #8]
 8002bc2:	683b      	ldr	r3, [r7, #0]
 8002bc4:	685a      	ldr	r2, [r3, #4]
 8002bc6:	683b      	ldr	r3, [r7, #0]
 8002bc8:	68db      	ldr	r3, [r3, #12]
 8002bca:	f000 f98c 	bl	8002ee6 <TIM_ETR_SetConfig>
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	689b      	ldr	r3, [r3, #8]
 8002bd4:	60bb      	str	r3, [r7, #8]
 8002bd6:	68bb      	ldr	r3, [r7, #8]
 8002bd8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002bdc:	60bb      	str	r3, [r7, #8]
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	68ba      	ldr	r2, [r7, #8]
 8002be4:	609a      	str	r2, [r3, #8]
 8002be6:	e04f      	b.n	8002c88 <HAL_TIM_ConfigClockSource+0x174>
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	6818      	ldr	r0, [r3, #0]
 8002bec:	683b      	ldr	r3, [r7, #0]
 8002bee:	6899      	ldr	r1, [r3, #8]
 8002bf0:	683b      	ldr	r3, [r7, #0]
 8002bf2:	685a      	ldr	r2, [r3, #4]
 8002bf4:	683b      	ldr	r3, [r7, #0]
 8002bf6:	68db      	ldr	r3, [r3, #12]
 8002bf8:	f000 f975 	bl	8002ee6 <TIM_ETR_SetConfig>
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	689a      	ldr	r2, [r3, #8]
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002c0a:	609a      	str	r2, [r3, #8]
 8002c0c:	e03c      	b.n	8002c88 <HAL_TIM_ConfigClockSource+0x174>
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	6818      	ldr	r0, [r3, #0]
 8002c12:	683b      	ldr	r3, [r7, #0]
 8002c14:	6859      	ldr	r1, [r3, #4]
 8002c16:	683b      	ldr	r3, [r7, #0]
 8002c18:	68db      	ldr	r3, [r3, #12]
 8002c1a:	461a      	mov	r2, r3
 8002c1c:	f000 f8ec 	bl	8002df8 <TIM_TI1_ConfigInputStage>
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	2150      	movs	r1, #80	; 0x50
 8002c26:	4618      	mov	r0, r3
 8002c28:	f000 f943 	bl	8002eb2 <TIM_ITRx_SetConfig>
 8002c2c:	e02c      	b.n	8002c88 <HAL_TIM_ConfigClockSource+0x174>
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	6818      	ldr	r0, [r3, #0]
 8002c32:	683b      	ldr	r3, [r7, #0]
 8002c34:	6859      	ldr	r1, [r3, #4]
 8002c36:	683b      	ldr	r3, [r7, #0]
 8002c38:	68db      	ldr	r3, [r3, #12]
 8002c3a:	461a      	mov	r2, r3
 8002c3c:	f000 f90a 	bl	8002e54 <TIM_TI2_ConfigInputStage>
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	2160      	movs	r1, #96	; 0x60
 8002c46:	4618      	mov	r0, r3
 8002c48:	f000 f933 	bl	8002eb2 <TIM_ITRx_SetConfig>
 8002c4c:	e01c      	b.n	8002c88 <HAL_TIM_ConfigClockSource+0x174>
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	6818      	ldr	r0, [r3, #0]
 8002c52:	683b      	ldr	r3, [r7, #0]
 8002c54:	6859      	ldr	r1, [r3, #4]
 8002c56:	683b      	ldr	r3, [r7, #0]
 8002c58:	68db      	ldr	r3, [r3, #12]
 8002c5a:	461a      	mov	r2, r3
 8002c5c:	f000 f8cc 	bl	8002df8 <TIM_TI1_ConfigInputStage>
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	2140      	movs	r1, #64	; 0x40
 8002c66:	4618      	mov	r0, r3
 8002c68:	f000 f923 	bl	8002eb2 <TIM_ITRx_SetConfig>
 8002c6c:	e00c      	b.n	8002c88 <HAL_TIM_ConfigClockSource+0x174>
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681a      	ldr	r2, [r3, #0]
 8002c72:	683b      	ldr	r3, [r7, #0]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	4619      	mov	r1, r3
 8002c78:	4610      	mov	r0, r2
 8002c7a:	f000 f91a 	bl	8002eb2 <TIM_ITRx_SetConfig>
 8002c7e:	e003      	b.n	8002c88 <HAL_TIM_ConfigClockSource+0x174>
 8002c80:	2301      	movs	r3, #1
 8002c82:	73fb      	strb	r3, [r7, #15]
 8002c84:	e000      	b.n	8002c88 <HAL_TIM_ConfigClockSource+0x174>
 8002c86:	bf00      	nop
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	2201      	movs	r2, #1
 8002c8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	2200      	movs	r2, #0
 8002c94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002c98:	7bfb      	ldrb	r3, [r7, #15]
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	3710      	adds	r7, #16
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	bd80      	pop	{r7, pc}

08002ca2 <HAL_TIM_OC_DelayElapsedCallback>:
 8002ca2:	b480      	push	{r7}
 8002ca4:	b083      	sub	sp, #12
 8002ca6:	af00      	add	r7, sp, #0
 8002ca8:	6078      	str	r0, [r7, #4]
 8002caa:	bf00      	nop
 8002cac:	370c      	adds	r7, #12
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	bc80      	pop	{r7}
 8002cb2:	4770      	bx	lr

08002cb4 <HAL_TIM_IC_CaptureCallback>:
 8002cb4:	b480      	push	{r7}
 8002cb6:	b083      	sub	sp, #12
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	6078      	str	r0, [r7, #4]
 8002cbc:	bf00      	nop
 8002cbe:	370c      	adds	r7, #12
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	bc80      	pop	{r7}
 8002cc4:	4770      	bx	lr

08002cc6 <HAL_TIM_PWM_PulseFinishedCallback>:
 8002cc6:	b480      	push	{r7}
 8002cc8:	b083      	sub	sp, #12
 8002cca:	af00      	add	r7, sp, #0
 8002ccc:	6078      	str	r0, [r7, #4]
 8002cce:	bf00      	nop
 8002cd0:	370c      	adds	r7, #12
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	bc80      	pop	{r7}
 8002cd6:	4770      	bx	lr

08002cd8 <HAL_TIM_TriggerCallback>:
 8002cd8:	b480      	push	{r7}
 8002cda:	b083      	sub	sp, #12
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	6078      	str	r0, [r7, #4]
 8002ce0:	bf00      	nop
 8002ce2:	370c      	adds	r7, #12
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	bc80      	pop	{r7}
 8002ce8:	4770      	bx	lr
	...

08002cec <TIM_Base_SetConfig>:
 8002cec:	b480      	push	{r7}
 8002cee:	b085      	sub	sp, #20
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]
 8002cf4:	6039      	str	r1, [r7, #0]
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	60fb      	str	r3, [r7, #12]
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	4a39      	ldr	r2, [pc, #228]	; (8002de4 <TIM_Base_SetConfig+0xf8>)
 8002d00:	4293      	cmp	r3, r2
 8002d02:	d013      	beq.n	8002d2c <TIM_Base_SetConfig+0x40>
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	4a38      	ldr	r2, [pc, #224]	; (8002de8 <TIM_Base_SetConfig+0xfc>)
 8002d08:	4293      	cmp	r3, r2
 8002d0a:	d00f      	beq.n	8002d2c <TIM_Base_SetConfig+0x40>
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d12:	d00b      	beq.n	8002d2c <TIM_Base_SetConfig+0x40>
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	4a35      	ldr	r2, [pc, #212]	; (8002dec <TIM_Base_SetConfig+0x100>)
 8002d18:	4293      	cmp	r3, r2
 8002d1a:	d007      	beq.n	8002d2c <TIM_Base_SetConfig+0x40>
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	4a34      	ldr	r2, [pc, #208]	; (8002df0 <TIM_Base_SetConfig+0x104>)
 8002d20:	4293      	cmp	r3, r2
 8002d22:	d003      	beq.n	8002d2c <TIM_Base_SetConfig+0x40>
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	4a33      	ldr	r2, [pc, #204]	; (8002df4 <TIM_Base_SetConfig+0x108>)
 8002d28:	4293      	cmp	r3, r2
 8002d2a:	d108      	bne.n	8002d3e <TIM_Base_SetConfig+0x52>
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d32:	60fb      	str	r3, [r7, #12]
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	685b      	ldr	r3, [r3, #4]
 8002d38:	68fa      	ldr	r2, [r7, #12]
 8002d3a:	4313      	orrs	r3, r2
 8002d3c:	60fb      	str	r3, [r7, #12]
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	4a28      	ldr	r2, [pc, #160]	; (8002de4 <TIM_Base_SetConfig+0xf8>)
 8002d42:	4293      	cmp	r3, r2
 8002d44:	d013      	beq.n	8002d6e <TIM_Base_SetConfig+0x82>
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	4a27      	ldr	r2, [pc, #156]	; (8002de8 <TIM_Base_SetConfig+0xfc>)
 8002d4a:	4293      	cmp	r3, r2
 8002d4c:	d00f      	beq.n	8002d6e <TIM_Base_SetConfig+0x82>
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d54:	d00b      	beq.n	8002d6e <TIM_Base_SetConfig+0x82>
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	4a24      	ldr	r2, [pc, #144]	; (8002dec <TIM_Base_SetConfig+0x100>)
 8002d5a:	4293      	cmp	r3, r2
 8002d5c:	d007      	beq.n	8002d6e <TIM_Base_SetConfig+0x82>
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	4a23      	ldr	r2, [pc, #140]	; (8002df0 <TIM_Base_SetConfig+0x104>)
 8002d62:	4293      	cmp	r3, r2
 8002d64:	d003      	beq.n	8002d6e <TIM_Base_SetConfig+0x82>
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	4a22      	ldr	r2, [pc, #136]	; (8002df4 <TIM_Base_SetConfig+0x108>)
 8002d6a:	4293      	cmp	r3, r2
 8002d6c:	d108      	bne.n	8002d80 <TIM_Base_SetConfig+0x94>
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d74:	60fb      	str	r3, [r7, #12]
 8002d76:	683b      	ldr	r3, [r7, #0]
 8002d78:	68db      	ldr	r3, [r3, #12]
 8002d7a:	68fa      	ldr	r2, [r7, #12]
 8002d7c:	4313      	orrs	r3, r2
 8002d7e:	60fb      	str	r3, [r7, #12]
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002d86:	683b      	ldr	r3, [r7, #0]
 8002d88:	695b      	ldr	r3, [r3, #20]
 8002d8a:	4313      	orrs	r3, r2
 8002d8c:	60fb      	str	r3, [r7, #12]
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	68fa      	ldr	r2, [r7, #12]
 8002d92:	601a      	str	r2, [r3, #0]
 8002d94:	683b      	ldr	r3, [r7, #0]
 8002d96:	689a      	ldr	r2, [r3, #8]
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	62da      	str	r2, [r3, #44]	; 0x2c
 8002d9c:	683b      	ldr	r3, [r7, #0]
 8002d9e:	681a      	ldr	r2, [r3, #0]
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	629a      	str	r2, [r3, #40]	; 0x28
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	4a0f      	ldr	r2, [pc, #60]	; (8002de4 <TIM_Base_SetConfig+0xf8>)
 8002da8:	4293      	cmp	r3, r2
 8002daa:	d003      	beq.n	8002db4 <TIM_Base_SetConfig+0xc8>
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	4a0e      	ldr	r2, [pc, #56]	; (8002de8 <TIM_Base_SetConfig+0xfc>)
 8002db0:	4293      	cmp	r3, r2
 8002db2:	d103      	bne.n	8002dbc <TIM_Base_SetConfig+0xd0>
 8002db4:	683b      	ldr	r3, [r7, #0]
 8002db6:	691a      	ldr	r2, [r3, #16]
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	631a      	str	r2, [r3, #48]	; 0x30
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	2201      	movs	r2, #1
 8002dc0:	615a      	str	r2, [r3, #20]
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	691b      	ldr	r3, [r3, #16]
 8002dc6:	f003 0301 	and.w	r3, r3, #1
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d005      	beq.n	8002dda <TIM_Base_SetConfig+0xee>
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	691b      	ldr	r3, [r3, #16]
 8002dd2:	f023 0201 	bic.w	r2, r3, #1
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	611a      	str	r2, [r3, #16]
 8002dda:	bf00      	nop
 8002ddc:	3714      	adds	r7, #20
 8002dde:	46bd      	mov	sp, r7
 8002de0:	bc80      	pop	{r7}
 8002de2:	4770      	bx	lr
 8002de4:	40012c00 	.word	0x40012c00
 8002de8:	40013400 	.word	0x40013400
 8002dec:	40000400 	.word	0x40000400
 8002df0:	40000800 	.word	0x40000800
 8002df4:	40000c00 	.word	0x40000c00

08002df8 <TIM_TI1_ConfigInputStage>:
 8002df8:	b480      	push	{r7}
 8002dfa:	b087      	sub	sp, #28
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	60f8      	str	r0, [r7, #12]
 8002e00:	60b9      	str	r1, [r7, #8]
 8002e02:	607a      	str	r2, [r7, #4]
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	6a1b      	ldr	r3, [r3, #32]
 8002e08:	617b      	str	r3, [r7, #20]
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	6a1b      	ldr	r3, [r3, #32]
 8002e0e:	f023 0201 	bic.w	r2, r3, #1
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	621a      	str	r2, [r3, #32]
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	699b      	ldr	r3, [r3, #24]
 8002e1a:	613b      	str	r3, [r7, #16]
 8002e1c:	693b      	ldr	r3, [r7, #16]
 8002e1e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002e22:	613b      	str	r3, [r7, #16]
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	011b      	lsls	r3, r3, #4
 8002e28:	693a      	ldr	r2, [r7, #16]
 8002e2a:	4313      	orrs	r3, r2
 8002e2c:	613b      	str	r3, [r7, #16]
 8002e2e:	697b      	ldr	r3, [r7, #20]
 8002e30:	f023 030a 	bic.w	r3, r3, #10
 8002e34:	617b      	str	r3, [r7, #20]
 8002e36:	697a      	ldr	r2, [r7, #20]
 8002e38:	68bb      	ldr	r3, [r7, #8]
 8002e3a:	4313      	orrs	r3, r2
 8002e3c:	617b      	str	r3, [r7, #20]
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	693a      	ldr	r2, [r7, #16]
 8002e42:	619a      	str	r2, [r3, #24]
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	697a      	ldr	r2, [r7, #20]
 8002e48:	621a      	str	r2, [r3, #32]
 8002e4a:	bf00      	nop
 8002e4c:	371c      	adds	r7, #28
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	bc80      	pop	{r7}
 8002e52:	4770      	bx	lr

08002e54 <TIM_TI2_ConfigInputStage>:
 8002e54:	b480      	push	{r7}
 8002e56:	b087      	sub	sp, #28
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	60f8      	str	r0, [r7, #12]
 8002e5c:	60b9      	str	r1, [r7, #8]
 8002e5e:	607a      	str	r2, [r7, #4]
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	6a1b      	ldr	r3, [r3, #32]
 8002e64:	617b      	str	r3, [r7, #20]
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	6a1b      	ldr	r3, [r3, #32]
 8002e6a:	f023 0210 	bic.w	r2, r3, #16
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	621a      	str	r2, [r3, #32]
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	699b      	ldr	r3, [r3, #24]
 8002e76:	613b      	str	r3, [r7, #16]
 8002e78:	693b      	ldr	r3, [r7, #16]
 8002e7a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002e7e:	613b      	str	r3, [r7, #16]
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	031b      	lsls	r3, r3, #12
 8002e84:	693a      	ldr	r2, [r7, #16]
 8002e86:	4313      	orrs	r3, r2
 8002e88:	613b      	str	r3, [r7, #16]
 8002e8a:	697b      	ldr	r3, [r7, #20]
 8002e8c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002e90:	617b      	str	r3, [r7, #20]
 8002e92:	68bb      	ldr	r3, [r7, #8]
 8002e94:	011b      	lsls	r3, r3, #4
 8002e96:	697a      	ldr	r2, [r7, #20]
 8002e98:	4313      	orrs	r3, r2
 8002e9a:	617b      	str	r3, [r7, #20]
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	693a      	ldr	r2, [r7, #16]
 8002ea0:	619a      	str	r2, [r3, #24]
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	697a      	ldr	r2, [r7, #20]
 8002ea6:	621a      	str	r2, [r3, #32]
 8002ea8:	bf00      	nop
 8002eaa:	371c      	adds	r7, #28
 8002eac:	46bd      	mov	sp, r7
 8002eae:	bc80      	pop	{r7}
 8002eb0:	4770      	bx	lr

08002eb2 <TIM_ITRx_SetConfig>:
 8002eb2:	b480      	push	{r7}
 8002eb4:	b085      	sub	sp, #20
 8002eb6:	af00      	add	r7, sp, #0
 8002eb8:	6078      	str	r0, [r7, #4]
 8002eba:	6039      	str	r1, [r7, #0]
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	689b      	ldr	r3, [r3, #8]
 8002ec0:	60fb      	str	r3, [r7, #12]
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ec8:	60fb      	str	r3, [r7, #12]
 8002eca:	683a      	ldr	r2, [r7, #0]
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	4313      	orrs	r3, r2
 8002ed0:	f043 0307 	orr.w	r3, r3, #7
 8002ed4:	60fb      	str	r3, [r7, #12]
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	68fa      	ldr	r2, [r7, #12]
 8002eda:	609a      	str	r2, [r3, #8]
 8002edc:	bf00      	nop
 8002ede:	3714      	adds	r7, #20
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	bc80      	pop	{r7}
 8002ee4:	4770      	bx	lr

08002ee6 <TIM_ETR_SetConfig>:
 8002ee6:	b480      	push	{r7}
 8002ee8:	b087      	sub	sp, #28
 8002eea:	af00      	add	r7, sp, #0
 8002eec:	60f8      	str	r0, [r7, #12]
 8002eee:	60b9      	str	r1, [r7, #8]
 8002ef0:	607a      	str	r2, [r7, #4]
 8002ef2:	603b      	str	r3, [r7, #0]
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	689b      	ldr	r3, [r3, #8]
 8002ef8:	617b      	str	r3, [r7, #20]
 8002efa:	697b      	ldr	r3, [r7, #20]
 8002efc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002f00:	617b      	str	r3, [r7, #20]
 8002f02:	683b      	ldr	r3, [r7, #0]
 8002f04:	021a      	lsls	r2, r3, #8
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	431a      	orrs	r2, r3
 8002f0a:	68bb      	ldr	r3, [r7, #8]
 8002f0c:	4313      	orrs	r3, r2
 8002f0e:	697a      	ldr	r2, [r7, #20]
 8002f10:	4313      	orrs	r3, r2
 8002f12:	617b      	str	r3, [r7, #20]
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	697a      	ldr	r2, [r7, #20]
 8002f18:	609a      	str	r2, [r3, #8]
 8002f1a:	bf00      	nop
 8002f1c:	371c      	adds	r7, #28
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	bc80      	pop	{r7}
 8002f22:	4770      	bx	lr

08002f24 <HAL_TIMEx_MasterConfigSynchronization>:
 8002f24:	b480      	push	{r7}
 8002f26:	b085      	sub	sp, #20
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	6078      	str	r0, [r7, #4]
 8002f2c:	6039      	str	r1, [r7, #0]
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f34:	2b01      	cmp	r3, #1
 8002f36:	d101      	bne.n	8002f3c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002f38:	2302      	movs	r3, #2
 8002f3a:	e050      	b.n	8002fde <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	2201      	movs	r2, #1
 8002f40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	2202      	movs	r2, #2
 8002f48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	685b      	ldr	r3, [r3, #4]
 8002f52:	60fb      	str	r3, [r7, #12]
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	689b      	ldr	r3, [r3, #8]
 8002f5a:	60bb      	str	r3, [r7, #8]
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f62:	60fb      	str	r3, [r7, #12]
 8002f64:	683b      	ldr	r3, [r7, #0]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	68fa      	ldr	r2, [r7, #12]
 8002f6a:	4313      	orrs	r3, r2
 8002f6c:	60fb      	str	r3, [r7, #12]
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	68fa      	ldr	r2, [r7, #12]
 8002f74:	605a      	str	r2, [r3, #4]
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	4a1b      	ldr	r2, [pc, #108]	; (8002fe8 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8002f7c:	4293      	cmp	r3, r2
 8002f7e:	d018      	beq.n	8002fb2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	4a19      	ldr	r2, [pc, #100]	; (8002fec <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8002f86:	4293      	cmp	r3, r2
 8002f88:	d013      	beq.n	8002fb2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f92:	d00e      	beq.n	8002fb2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	4a15      	ldr	r2, [pc, #84]	; (8002ff0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8002f9a:	4293      	cmp	r3, r2
 8002f9c:	d009      	beq.n	8002fb2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	4a14      	ldr	r2, [pc, #80]	; (8002ff4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8002fa4:	4293      	cmp	r3, r2
 8002fa6:	d004      	beq.n	8002fb2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	4a12      	ldr	r2, [pc, #72]	; (8002ff8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8002fae:	4293      	cmp	r3, r2
 8002fb0:	d10c      	bne.n	8002fcc <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 8002fb2:	68bb      	ldr	r3, [r7, #8]
 8002fb4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002fb8:	60bb      	str	r3, [r7, #8]
 8002fba:	683b      	ldr	r3, [r7, #0]
 8002fbc:	685b      	ldr	r3, [r3, #4]
 8002fbe:	68ba      	ldr	r2, [r7, #8]
 8002fc0:	4313      	orrs	r3, r2
 8002fc2:	60bb      	str	r3, [r7, #8]
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	68ba      	ldr	r2, [r7, #8]
 8002fca:	609a      	str	r2, [r3, #8]
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	2201      	movs	r2, #1
 8002fd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002fdc:	2300      	movs	r3, #0
 8002fde:	4618      	mov	r0, r3
 8002fe0:	3714      	adds	r7, #20
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	bc80      	pop	{r7}
 8002fe6:	4770      	bx	lr
 8002fe8:	40012c00 	.word	0x40012c00
 8002fec:	40013400 	.word	0x40013400
 8002ff0:	40000400 	.word	0x40000400
 8002ff4:	40000800 	.word	0x40000800
 8002ff8:	40000c00 	.word	0x40000c00

08002ffc <HAL_TIMEx_CommutCallback>:
 8002ffc:	b480      	push	{r7}
 8002ffe:	b083      	sub	sp, #12
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]
 8003004:	bf00      	nop
 8003006:	370c      	adds	r7, #12
 8003008:	46bd      	mov	sp, r7
 800300a:	bc80      	pop	{r7}
 800300c:	4770      	bx	lr

0800300e <HAL_TIMEx_BreakCallback>:
 800300e:	b480      	push	{r7}
 8003010:	b083      	sub	sp, #12
 8003012:	af00      	add	r7, sp, #0
 8003014:	6078      	str	r0, [r7, #4]
 8003016:	bf00      	nop
 8003018:	370c      	adds	r7, #12
 800301a:	46bd      	mov	sp, r7
 800301c:	bc80      	pop	{r7}
 800301e:	4770      	bx	lr

08003020 <memset>:
 8003020:	4603      	mov	r3, r0
 8003022:	4402      	add	r2, r0
 8003024:	4293      	cmp	r3, r2
 8003026:	d100      	bne.n	800302a <memset+0xa>
 8003028:	4770      	bx	lr
 800302a:	f803 1b01 	strb.w	r1, [r3], #1
 800302e:	e7f9      	b.n	8003024 <memset+0x4>

08003030 <__libc_init_array>:
 8003030:	b570      	push	{r4, r5, r6, lr}
 8003032:	2600      	movs	r6, #0
 8003034:	4d0c      	ldr	r5, [pc, #48]	; (8003068 <__libc_init_array+0x38>)
 8003036:	4c0d      	ldr	r4, [pc, #52]	; (800306c <__libc_init_array+0x3c>)
 8003038:	1b64      	subs	r4, r4, r5
 800303a:	10a4      	asrs	r4, r4, #2
 800303c:	42a6      	cmp	r6, r4
 800303e:	d109      	bne.n	8003054 <__libc_init_array+0x24>
 8003040:	f000 f81a 	bl	8003078 <_init>
 8003044:	2600      	movs	r6, #0
 8003046:	4d0a      	ldr	r5, [pc, #40]	; (8003070 <__libc_init_array+0x40>)
 8003048:	4c0a      	ldr	r4, [pc, #40]	; (8003074 <__libc_init_array+0x44>)
 800304a:	1b64      	subs	r4, r4, r5
 800304c:	10a4      	asrs	r4, r4, #2
 800304e:	42a6      	cmp	r6, r4
 8003050:	d105      	bne.n	800305e <__libc_init_array+0x2e>
 8003052:	bd70      	pop	{r4, r5, r6, pc}
 8003054:	f855 3b04 	ldr.w	r3, [r5], #4
 8003058:	4798      	blx	r3
 800305a:	3601      	adds	r6, #1
 800305c:	e7ee      	b.n	800303c <__libc_init_array+0xc>
 800305e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003062:	4798      	blx	r3
 8003064:	3601      	adds	r6, #1
 8003066:	e7f2      	b.n	800304e <__libc_init_array+0x1e>
 8003068:	080030b4 	.word	0x080030b4
 800306c:	080030b4 	.word	0x080030b4
 8003070:	080030b4 	.word	0x080030b4
 8003074:	080030b8 	.word	0x080030b8

08003078 <_init>:
 8003078:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800307a:	bf00      	nop
 800307c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800307e:	bc08      	pop	{r3}
 8003080:	469e      	mov	lr, r3
 8003082:	4770      	bx	lr

08003084 <_fini>:
 8003084:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003086:	bf00      	nop
 8003088:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800308a:	bc08      	pop	{r3}
 800308c:	469e      	mov	lr, r3
 800308e:	4770      	bx	lr
