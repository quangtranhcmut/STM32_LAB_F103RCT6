
RCT6_lab2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002bdc  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08002dc0  08002dc0  00012dc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002de4  08002de4  0002002c  2**0
                  CONTENTS
  4 .ARM          00000000  08002de4  08002de4  0002002c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002de4  08002de4  0002002c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002de4  08002de4  00012de4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002de8  08002de8  00012de8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000002c  20000000  08002dec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000218  2000002c  08002e18  0002002c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000244  08002e18  00020244  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020055  2**0
                  CONTENTS, READONLY
 13 .debug_info   00008adf  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001d6c  00000000  00000000  00028b77  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ad8  00000000  00000000  0002a8e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000839  00000000  00000000  0002b3c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00019403  00000000  00000000  0002bbf9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000d438  00000000  00000000  00044ffc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00092c00  00000000  00000000  00052434  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002a74  00000000  00000000  000e5034  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  000e7aa8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	2000002c 	.word	0x2000002c
 8000200:	00000000 	.word	0x00000000
 8000204:	08002da8 	.word	0x08002da8

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000030 	.word	0x20000030
 8000220:	08002da8 	.word	0x08002da8

08000224 <resetAllDigits>:
 *      Author: Thảo Quảng
 */

#include "7seg.h"
#include "timer.h"
void resetAllDigits(){
 8000224:	b580      	push	{r7, lr}
 8000226:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, GPIO_PIN_SET);
 8000228:	2201      	movs	r2, #1
 800022a:	2140      	movs	r1, #64	; 0x40
 800022c:	480a      	ldr	r0, [pc, #40]	; (8000258 <resetAllDigits+0x34>)
 800022e:	f001 fd5a 	bl	8001ce6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_SET);
 8000232:	2201      	movs	r2, #1
 8000234:	2180      	movs	r1, #128	; 0x80
 8000236:	4808      	ldr	r0, [pc, #32]	; (8000258 <resetAllDigits+0x34>)
 8000238:	f001 fd55 	bl	8001ce6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_SET);
 800023c:	2201      	movs	r2, #1
 800023e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000242:	4805      	ldr	r0, [pc, #20]	; (8000258 <resetAllDigits+0x34>)
 8000244:	f001 fd4f 	bl	8001ce6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, GPIO_PIN_SET);
 8000248:	2201      	movs	r2, #1
 800024a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800024e:	4802      	ldr	r0, [pc, #8]	; (8000258 <resetAllDigits+0x34>)
 8000250:	f001 fd49 	bl	8001ce6 <HAL_GPIO_WritePin>
}
 8000254:	bf00      	nop
 8000256:	bd80      	pop	{r7, pc}
 8000258:	40010800 	.word	0x40010800

0800025c <setNum2Digit>:
			break;
		}
	}
}

void setNum2Digit(int a, int b, int c, int d, int e, int f, int g){
 800025c:	b580      	push	{r7, lr}
 800025e:	b084      	sub	sp, #16
 8000260:	af00      	add	r7, sp, #0
 8000262:	60f8      	str	r0, [r7, #12]
 8000264:	60b9      	str	r1, [r7, #8]
 8000266:	607a      	str	r2, [r7, #4]
 8000268:	603b      	str	r3, [r7, #0]
	HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, a);
 800026a:	68fb      	ldr	r3, [r7, #12]
 800026c:	b2db      	uxtb	r3, r3
 800026e:	461a      	mov	r2, r3
 8000270:	2101      	movs	r1, #1
 8000272:	4818      	ldr	r0, [pc, #96]	; (80002d4 <setNum2Digit+0x78>)
 8000274:	f001 fd37 	bl	8001ce6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, b);
 8000278:	68bb      	ldr	r3, [r7, #8]
 800027a:	b2db      	uxtb	r3, r3
 800027c:	461a      	mov	r2, r3
 800027e:	2102      	movs	r1, #2
 8000280:	4814      	ldr	r0, [pc, #80]	; (80002d4 <setNum2Digit+0x78>)
 8000282:	f001 fd30 	bl	8001ce6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, c);
 8000286:	687b      	ldr	r3, [r7, #4]
 8000288:	b2db      	uxtb	r3, r3
 800028a:	461a      	mov	r2, r3
 800028c:	2110      	movs	r1, #16
 800028e:	4812      	ldr	r0, [pc, #72]	; (80002d8 <setNum2Digit+0x7c>)
 8000290:	f001 fd29 	bl	8001ce6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, d);
 8000294:	683b      	ldr	r3, [r7, #0]
 8000296:	b2db      	uxtb	r3, r3
 8000298:	461a      	mov	r2, r3
 800029a:	2110      	movs	r1, #16
 800029c:	480d      	ldr	r0, [pc, #52]	; (80002d4 <setNum2Digit+0x78>)
 800029e:	f001 fd22 	bl	8001ce6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, e);
 80002a2:	69bb      	ldr	r3, [r7, #24]
 80002a4:	b2db      	uxtb	r3, r3
 80002a6:	461a      	mov	r2, r3
 80002a8:	2120      	movs	r1, #32
 80002aa:	480a      	ldr	r0, [pc, #40]	; (80002d4 <setNum2Digit+0x78>)
 80002ac:	f001 fd1b 	bl	8001ce6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, f);
 80002b0:	69fb      	ldr	r3, [r7, #28]
 80002b2:	b2db      	uxtb	r3, r3
 80002b4:	461a      	mov	r2, r3
 80002b6:	2140      	movs	r1, #64	; 0x40
 80002b8:	4806      	ldr	r0, [pc, #24]	; (80002d4 <setNum2Digit+0x78>)
 80002ba:	f001 fd14 	bl	8001ce6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, g);
 80002be:	6a3b      	ldr	r3, [r7, #32]
 80002c0:	b2db      	uxtb	r3, r3
 80002c2:	461a      	mov	r2, r3
 80002c4:	2180      	movs	r1, #128	; 0x80
 80002c6:	4803      	ldr	r0, [pc, #12]	; (80002d4 <setNum2Digit+0x78>)
 80002c8:	f001 fd0d 	bl	8001ce6 <HAL_GPIO_WritePin>
}
 80002cc:	bf00      	nop
 80002ce:	3710      	adds	r7, #16
 80002d0:	46bd      	mov	sp, r7
 80002d2:	bd80      	pop	{r7, pc}
 80002d4:	40010c00 	.word	0x40010c00
 80002d8:	40010800 	.word	0x40010800

080002dc <display7SEG>:

void display7SEG(int num){
 80002dc:	b580      	push	{r7, lr}
 80002de:	b086      	sub	sp, #24
 80002e0:	af04      	add	r7, sp, #16
 80002e2:	6078      	str	r0, [r7, #4]
    switch(num) {
 80002e4:	687b      	ldr	r3, [r7, #4]
 80002e6:	2b09      	cmp	r3, #9
 80002e8:	f200 809a 	bhi.w	8000420 <display7SEG+0x144>
 80002ec:	a201      	add	r2, pc, #4	; (adr r2, 80002f4 <display7SEG+0x18>)
 80002ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80002f2:	bf00      	nop
 80002f4:	0800031d 	.word	0x0800031d
 80002f8:	08000337 	.word	0x08000337
 80002fc:	08000351 	.word	0x08000351
 8000300:	0800036b 	.word	0x0800036b
 8000304:	08000385 	.word	0x08000385
 8000308:	0800039f 	.word	0x0800039f
 800030c:	080003b9 	.word	0x080003b9
 8000310:	080003d3 	.word	0x080003d3
 8000314:	080003ed 	.word	0x080003ed
 8000318:	08000407 	.word	0x08000407
		case 0: {
			setNum2Digit(0,0,0,0,0,0,1);
 800031c:	2301      	movs	r3, #1
 800031e:	9302      	str	r3, [sp, #8]
 8000320:	2300      	movs	r3, #0
 8000322:	9301      	str	r3, [sp, #4]
 8000324:	2300      	movs	r3, #0
 8000326:	9300      	str	r3, [sp, #0]
 8000328:	2300      	movs	r3, #0
 800032a:	2200      	movs	r2, #0
 800032c:	2100      	movs	r1, #0
 800032e:	2000      	movs	r0, #0
 8000330:	f7ff ff94 	bl	800025c <setNum2Digit>
			break;
 8000334:	e075      	b.n	8000422 <display7SEG+0x146>
		}
		case 1: {
			setNum2Digit(1,0,0,1,1,1,1);
 8000336:	2301      	movs	r3, #1
 8000338:	9302      	str	r3, [sp, #8]
 800033a:	2301      	movs	r3, #1
 800033c:	9301      	str	r3, [sp, #4]
 800033e:	2301      	movs	r3, #1
 8000340:	9300      	str	r3, [sp, #0]
 8000342:	2301      	movs	r3, #1
 8000344:	2200      	movs	r2, #0
 8000346:	2100      	movs	r1, #0
 8000348:	2001      	movs	r0, #1
 800034a:	f7ff ff87 	bl	800025c <setNum2Digit>
			break;
 800034e:	e068      	b.n	8000422 <display7SEG+0x146>
		}
		case 2: {
			setNum2Digit(0,0,1,0,0,1,0);
 8000350:	2300      	movs	r3, #0
 8000352:	9302      	str	r3, [sp, #8]
 8000354:	2301      	movs	r3, #1
 8000356:	9301      	str	r3, [sp, #4]
 8000358:	2300      	movs	r3, #0
 800035a:	9300      	str	r3, [sp, #0]
 800035c:	2300      	movs	r3, #0
 800035e:	2201      	movs	r2, #1
 8000360:	2100      	movs	r1, #0
 8000362:	2000      	movs	r0, #0
 8000364:	f7ff ff7a 	bl	800025c <setNum2Digit>
			break;
 8000368:	e05b      	b.n	8000422 <display7SEG+0x146>
		}
		case 3: {
			setNum2Digit(0,0,0,0,1,1,0);
 800036a:	2300      	movs	r3, #0
 800036c:	9302      	str	r3, [sp, #8]
 800036e:	2301      	movs	r3, #1
 8000370:	9301      	str	r3, [sp, #4]
 8000372:	2301      	movs	r3, #1
 8000374:	9300      	str	r3, [sp, #0]
 8000376:	2300      	movs	r3, #0
 8000378:	2200      	movs	r2, #0
 800037a:	2100      	movs	r1, #0
 800037c:	2000      	movs	r0, #0
 800037e:	f7ff ff6d 	bl	800025c <setNum2Digit>
			break;
 8000382:	e04e      	b.n	8000422 <display7SEG+0x146>
		}
		case 4: {
			setNum2Digit(1,0,0,1,1,0,0);
 8000384:	2300      	movs	r3, #0
 8000386:	9302      	str	r3, [sp, #8]
 8000388:	2300      	movs	r3, #0
 800038a:	9301      	str	r3, [sp, #4]
 800038c:	2301      	movs	r3, #1
 800038e:	9300      	str	r3, [sp, #0]
 8000390:	2301      	movs	r3, #1
 8000392:	2200      	movs	r2, #0
 8000394:	2100      	movs	r1, #0
 8000396:	2001      	movs	r0, #1
 8000398:	f7ff ff60 	bl	800025c <setNum2Digit>
			break;
 800039c:	e041      	b.n	8000422 <display7SEG+0x146>
		}
		case 5: {
			setNum2Digit(0,1,0,0,1,0,0);
 800039e:	2300      	movs	r3, #0
 80003a0:	9302      	str	r3, [sp, #8]
 80003a2:	2300      	movs	r3, #0
 80003a4:	9301      	str	r3, [sp, #4]
 80003a6:	2301      	movs	r3, #1
 80003a8:	9300      	str	r3, [sp, #0]
 80003aa:	2300      	movs	r3, #0
 80003ac:	2200      	movs	r2, #0
 80003ae:	2101      	movs	r1, #1
 80003b0:	2000      	movs	r0, #0
 80003b2:	f7ff ff53 	bl	800025c <setNum2Digit>
			break;
 80003b6:	e034      	b.n	8000422 <display7SEG+0x146>
		}
		case 6: {
			setNum2Digit(0,1,0,0,0,0,0);
 80003b8:	2300      	movs	r3, #0
 80003ba:	9302      	str	r3, [sp, #8]
 80003bc:	2300      	movs	r3, #0
 80003be:	9301      	str	r3, [sp, #4]
 80003c0:	2300      	movs	r3, #0
 80003c2:	9300      	str	r3, [sp, #0]
 80003c4:	2300      	movs	r3, #0
 80003c6:	2200      	movs	r2, #0
 80003c8:	2101      	movs	r1, #1
 80003ca:	2000      	movs	r0, #0
 80003cc:	f7ff ff46 	bl	800025c <setNum2Digit>
			break;
 80003d0:	e027      	b.n	8000422 <display7SEG+0x146>
		}
		case 7: {
			setNum2Digit(0,0,0,1,1,1,1);
 80003d2:	2301      	movs	r3, #1
 80003d4:	9302      	str	r3, [sp, #8]
 80003d6:	2301      	movs	r3, #1
 80003d8:	9301      	str	r3, [sp, #4]
 80003da:	2301      	movs	r3, #1
 80003dc:	9300      	str	r3, [sp, #0]
 80003de:	2301      	movs	r3, #1
 80003e0:	2200      	movs	r2, #0
 80003e2:	2100      	movs	r1, #0
 80003e4:	2000      	movs	r0, #0
 80003e6:	f7ff ff39 	bl	800025c <setNum2Digit>
			break;
 80003ea:	e01a      	b.n	8000422 <display7SEG+0x146>
		}
		case 8: {
			setNum2Digit(0,0,0,0,0,0,0);
 80003ec:	2300      	movs	r3, #0
 80003ee:	9302      	str	r3, [sp, #8]
 80003f0:	2300      	movs	r3, #0
 80003f2:	9301      	str	r3, [sp, #4]
 80003f4:	2300      	movs	r3, #0
 80003f6:	9300      	str	r3, [sp, #0]
 80003f8:	2300      	movs	r3, #0
 80003fa:	2200      	movs	r2, #0
 80003fc:	2100      	movs	r1, #0
 80003fe:	2000      	movs	r0, #0
 8000400:	f7ff ff2c 	bl	800025c <setNum2Digit>
			break;
 8000404:	e00d      	b.n	8000422 <display7SEG+0x146>
		}
		case 9: {
			setNum2Digit(0,0,0,0,1,0,0);
 8000406:	2300      	movs	r3, #0
 8000408:	9302      	str	r3, [sp, #8]
 800040a:	2300      	movs	r3, #0
 800040c:	9301      	str	r3, [sp, #4]
 800040e:	2301      	movs	r3, #1
 8000410:	9300      	str	r3, [sp, #0]
 8000412:	2300      	movs	r3, #0
 8000414:	2200      	movs	r2, #0
 8000416:	2100      	movs	r1, #0
 8000418:	2000      	movs	r0, #0
 800041a:	f7ff ff1f 	bl	800025c <setNum2Digit>
			break;
 800041e:	e000      	b.n	8000422 <display7SEG+0x146>
		}
		default: {
			break;
 8000420:	bf00      	nop
		}
    }
}
 8000422:	bf00      	nop
 8000424:	3708      	adds	r7, #8
 8000426:	46bd      	mov	sp, r7
 8000428:	bd80      	pop	{r7, pc}
 800042a:	bf00      	nop

0800042c <update7SEG>:

//const int MAX_LED = 4;
//int index_led = 0;
int led_buffer[4] = {1, 2, 3, 4};
void update7SEG(int index) {
 800042c:	b580      	push	{r7, lr}
 800042e:	b082      	sub	sp, #8
 8000430:	af00      	add	r7, sp, #0
 8000432:	6078      	str	r0, [r7, #4]
    switch (index) {
 8000434:	687b      	ldr	r3, [r7, #4]
 8000436:	2b03      	cmp	r3, #3
 8000438:	d840      	bhi.n	80004bc <update7SEG+0x90>
 800043a:	a201      	add	r2, pc, #4	; (adr r2, 8000440 <update7SEG+0x14>)
 800043c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000440:	08000451 	.word	0x08000451
 8000444:	0800046b 	.word	0x0800046b
 8000448:	08000485 	.word	0x08000485
 800044c:	080004a1 	.word	0x080004a1
        case 0:{
            // Display the first 7 SEG with led_buffer[0]
        	resetAllDigits();
 8000450:	f7ff fee8 	bl	8000224 <resetAllDigits>
        	HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, GPIO_PIN_RESET);
 8000454:	2200      	movs	r2, #0
 8000456:	2140      	movs	r1, #64	; 0x40
 8000458:	481b      	ldr	r0, [pc, #108]	; (80004c8 <update7SEG+0x9c>)
 800045a:	f001 fc44 	bl	8001ce6 <HAL_GPIO_WritePin>
        	display7SEG(led_buffer[0]);
 800045e:	4b1b      	ldr	r3, [pc, #108]	; (80004cc <update7SEG+0xa0>)
 8000460:	681b      	ldr	r3, [r3, #0]
 8000462:	4618      	mov	r0, r3
 8000464:	f7ff ff3a 	bl	80002dc <display7SEG>
            break;
 8000468:	e029      	b.n	80004be <update7SEG+0x92>
        }
        case 1:{
            // Display the second 7 SEG with led_buffer[1]
        	resetAllDigits();
 800046a:	f7ff fedb 	bl	8000224 <resetAllDigits>
        	HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_RESET);
 800046e:	2200      	movs	r2, #0
 8000470:	2180      	movs	r1, #128	; 0x80
 8000472:	4815      	ldr	r0, [pc, #84]	; (80004c8 <update7SEG+0x9c>)
 8000474:	f001 fc37 	bl	8001ce6 <HAL_GPIO_WritePin>
        	display7SEG(led_buffer[1]);
 8000478:	4b14      	ldr	r3, [pc, #80]	; (80004cc <update7SEG+0xa0>)
 800047a:	685b      	ldr	r3, [r3, #4]
 800047c:	4618      	mov	r0, r3
 800047e:	f7ff ff2d 	bl	80002dc <display7SEG>
            break;
 8000482:	e01c      	b.n	80004be <update7SEG+0x92>
        }
        case 2:{
            // Display the third 7 SEG with led_buffer[2]
        	resetAllDigits();
 8000484:	f7ff fece 	bl	8000224 <resetAllDigits>
        	HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_RESET);
 8000488:	2200      	movs	r2, #0
 800048a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800048e:	480e      	ldr	r0, [pc, #56]	; (80004c8 <update7SEG+0x9c>)
 8000490:	f001 fc29 	bl	8001ce6 <HAL_GPIO_WritePin>
        	display7SEG(led_buffer[2]);
 8000494:	4b0d      	ldr	r3, [pc, #52]	; (80004cc <update7SEG+0xa0>)
 8000496:	689b      	ldr	r3, [r3, #8]
 8000498:	4618      	mov	r0, r3
 800049a:	f7ff ff1f 	bl	80002dc <display7SEG>
            break;
 800049e:	e00e      	b.n	80004be <update7SEG+0x92>
        }
        case 3:{
            // Display the fourth 7 SEG with led_buffer[3]
        	resetAllDigits();
 80004a0:	f7ff fec0 	bl	8000224 <resetAllDigits>
        	HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, GPIO_PIN_RESET);
 80004a4:	2200      	movs	r2, #0
 80004a6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80004aa:	4807      	ldr	r0, [pc, #28]	; (80004c8 <update7SEG+0x9c>)
 80004ac:	f001 fc1b 	bl	8001ce6 <HAL_GPIO_WritePin>
        	display7SEG(led_buffer[3]);
 80004b0:	4b06      	ldr	r3, [pc, #24]	; (80004cc <update7SEG+0xa0>)
 80004b2:	68db      	ldr	r3, [r3, #12]
 80004b4:	4618      	mov	r0, r3
 80004b6:	f7ff ff11 	bl	80002dc <display7SEG>
            break;
 80004ba:	e000      	b.n	80004be <update7SEG+0x92>
        }
        default:{
            break;
 80004bc:	bf00      	nop
        }
    }
}
 80004be:	bf00      	nop
 80004c0:	3708      	adds	r7, #8
 80004c2:	46bd      	mov	sp, r7
 80004c4:	bd80      	pop	{r7, pc}
 80004c6:	bf00      	nop
 80004c8:	40010800 	.word	0x40010800
 80004cc:	20000000 	.word	0x20000000

080004d0 <updateBufferXLine>:

void updateBufferXLine(int value) {
 80004d0:	b480      	push	{r7}
 80004d2:	b083      	sub	sp, #12
 80004d4:	af00      	add	r7, sp, #0
 80004d6:	6078      	str	r0, [r7, #4]
	led_buffer[0] = (value / 10) % 10;
 80004d8:	687b      	ldr	r3, [r7, #4]
 80004da:	4a13      	ldr	r2, [pc, #76]	; (8000528 <updateBufferXLine+0x58>)
 80004dc:	fb82 1203 	smull	r1, r2, r2, r3
 80004e0:	1092      	asrs	r2, r2, #2
 80004e2:	17db      	asrs	r3, r3, #31
 80004e4:	1ad1      	subs	r1, r2, r3
 80004e6:	4b10      	ldr	r3, [pc, #64]	; (8000528 <updateBufferXLine+0x58>)
 80004e8:	fb83 2301 	smull	r2, r3, r3, r1
 80004ec:	109a      	asrs	r2, r3, #2
 80004ee:	17cb      	asrs	r3, r1, #31
 80004f0:	1ad2      	subs	r2, r2, r3
 80004f2:	4613      	mov	r3, r2
 80004f4:	009b      	lsls	r3, r3, #2
 80004f6:	4413      	add	r3, r2
 80004f8:	005b      	lsls	r3, r3, #1
 80004fa:	1aca      	subs	r2, r1, r3
 80004fc:	4b0b      	ldr	r3, [pc, #44]	; (800052c <updateBufferXLine+0x5c>)
 80004fe:	601a      	str	r2, [r3, #0]
	led_buffer[1]= value % 10;
 8000500:	6879      	ldr	r1, [r7, #4]
 8000502:	4b09      	ldr	r3, [pc, #36]	; (8000528 <updateBufferXLine+0x58>)
 8000504:	fb83 2301 	smull	r2, r3, r3, r1
 8000508:	109a      	asrs	r2, r3, #2
 800050a:	17cb      	asrs	r3, r1, #31
 800050c:	1ad2      	subs	r2, r2, r3
 800050e:	4613      	mov	r3, r2
 8000510:	009b      	lsls	r3, r3, #2
 8000512:	4413      	add	r3, r2
 8000514:	005b      	lsls	r3, r3, #1
 8000516:	1aca      	subs	r2, r1, r3
 8000518:	4b04      	ldr	r3, [pc, #16]	; (800052c <updateBufferXLine+0x5c>)
 800051a:	605a      	str	r2, [r3, #4]
}
 800051c:	bf00      	nop
 800051e:	370c      	adds	r7, #12
 8000520:	46bd      	mov	sp, r7
 8000522:	bc80      	pop	{r7}
 8000524:	4770      	bx	lr
 8000526:	bf00      	nop
 8000528:	66666667 	.word	0x66666667
 800052c:	20000000 	.word	0x20000000

08000530 <updateBufferYLine>:
void updateBufferYLine(int value) {
 8000530:	b480      	push	{r7}
 8000532:	b083      	sub	sp, #12
 8000534:	af00      	add	r7, sp, #0
 8000536:	6078      	str	r0, [r7, #4]
	led_buffer[2] = (value / 10) % 10;
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	4a13      	ldr	r2, [pc, #76]	; (8000588 <updateBufferYLine+0x58>)
 800053c:	fb82 1203 	smull	r1, r2, r2, r3
 8000540:	1092      	asrs	r2, r2, #2
 8000542:	17db      	asrs	r3, r3, #31
 8000544:	1ad1      	subs	r1, r2, r3
 8000546:	4b10      	ldr	r3, [pc, #64]	; (8000588 <updateBufferYLine+0x58>)
 8000548:	fb83 2301 	smull	r2, r3, r3, r1
 800054c:	109a      	asrs	r2, r3, #2
 800054e:	17cb      	asrs	r3, r1, #31
 8000550:	1ad2      	subs	r2, r2, r3
 8000552:	4613      	mov	r3, r2
 8000554:	009b      	lsls	r3, r3, #2
 8000556:	4413      	add	r3, r2
 8000558:	005b      	lsls	r3, r3, #1
 800055a:	1aca      	subs	r2, r1, r3
 800055c:	4b0b      	ldr	r3, [pc, #44]	; (800058c <updateBufferYLine+0x5c>)
 800055e:	609a      	str	r2, [r3, #8]
	led_buffer[3]= value % 10;
 8000560:	6879      	ldr	r1, [r7, #4]
 8000562:	4b09      	ldr	r3, [pc, #36]	; (8000588 <updateBufferYLine+0x58>)
 8000564:	fb83 2301 	smull	r2, r3, r3, r1
 8000568:	109a      	asrs	r2, r3, #2
 800056a:	17cb      	asrs	r3, r1, #31
 800056c:	1ad2      	subs	r2, r2, r3
 800056e:	4613      	mov	r3, r2
 8000570:	009b      	lsls	r3, r3, #2
 8000572:	4413      	add	r3, r2
 8000574:	005b      	lsls	r3, r3, #1
 8000576:	1aca      	subs	r2, r1, r3
 8000578:	4b04      	ldr	r3, [pc, #16]	; (800058c <updateBufferYLine+0x5c>)
 800057a:	60da      	str	r2, [r3, #12]
}
 800057c:	bf00      	nop
 800057e:	370c      	adds	r7, #12
 8000580:	46bd      	mov	sp, r7
 8000582:	bc80      	pop	{r7}
 8000584:	4770      	bx	lr
 8000586:	bf00      	nop
 8000588:	66666667 	.word	0x66666667
 800058c:	20000000 	.word	0x20000000

08000590 <fsm_automatic>:
#include "automatic.h"

int countdownX = 0;
int countdownY = 0;

void fsm_automatic() {
 8000590:	b580      	push	{r7, lr}
 8000592:	af00      	add	r7, sp, #0
	switch (status) {
 8000594:	4b92      	ldr	r3, [pc, #584]	; (80007e0 <fsm_automatic+0x250>)
 8000596:	681b      	ldr	r3, [r3, #0]
 8000598:	3b01      	subs	r3, #1
 800059a:	2b0d      	cmp	r3, #13
 800059c:	f200 8179 	bhi.w	8000892 <fsm_automatic+0x302>
 80005a0:	a201      	add	r2, pc, #4	; (adr r2, 80005a8 <fsm_automatic+0x18>)
 80005a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005a6:	bf00      	nop
 80005a8:	080005e1 	.word	0x080005e1
 80005ac:	08000893 	.word	0x08000893
 80005b0:	08000893 	.word	0x08000893
 80005b4:	08000893 	.word	0x08000893
 80005b8:	08000893 	.word	0x08000893
 80005bc:	08000893 	.word	0x08000893
 80005c0:	08000893 	.word	0x08000893
 80005c4:	08000893 	.word	0x08000893
 80005c8:	08000893 	.word	0x08000893
 80005cc:	08000893 	.word	0x08000893
 80005d0:	0800062f 	.word	0x0800062f
 80005d4:	080006bd 	.word	0x080006bd
 80005d8:	08000755 	.word	0x08000755
 80005dc:	080007fd 	.word	0x080007fd
		case AUTO: {
			if (1) {
				status = GREEN_RED;
 80005e0:	4b7f      	ldr	r3, [pc, #508]	; (80007e0 <fsm_automatic+0x250>)
 80005e2:	220b      	movs	r2, #11
 80005e4:	601a      	str	r2, [r3, #0]
				countdownX = greenTime - 1;
 80005e6:	4b7f      	ldr	r3, [pc, #508]	; (80007e4 <fsm_automatic+0x254>)
 80005e8:	681b      	ldr	r3, [r3, #0]
 80005ea:	3b01      	subs	r3, #1
 80005ec:	4a7e      	ldr	r2, [pc, #504]	; (80007e8 <fsm_automatic+0x258>)
 80005ee:	6013      	str	r3, [r2, #0]
				countdownY = redTime - 1;
 80005f0:	4b7e      	ldr	r3, [pc, #504]	; (80007ec <fsm_automatic+0x25c>)
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	3b01      	subs	r3, #1
 80005f6:	4a7e      	ldr	r2, [pc, #504]	; (80007f0 <fsm_automatic+0x260>)
 80005f8:	6013      	str	r3, [r2, #0]
				updateBufferXLine(countdownX);
 80005fa:	4b7b      	ldr	r3, [pc, #492]	; (80007e8 <fsm_automatic+0x258>)
 80005fc:	681b      	ldr	r3, [r3, #0]
 80005fe:	4618      	mov	r0, r3
 8000600:	f7ff ff66 	bl	80004d0 <updateBufferXLine>
				updateBufferYLine(countdownY);
 8000604:	4b7a      	ldr	r3, [pc, #488]	; (80007f0 <fsm_automatic+0x260>)
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	4618      	mov	r0, r3
 800060a:	f7ff ff91 	bl	8000530 <updateBufferYLine>
				setTimer(0, greenTime * 1000); // Timer 1
 800060e:	4b75      	ldr	r3, [pc, #468]	; (80007e4 <fsm_automatic+0x254>)
 8000610:	681b      	ldr	r3, [r3, #0]
 8000612:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000616:	fb02 f303 	mul.w	r3, r2, r3
 800061a:	4619      	mov	r1, r3
 800061c:	2000      	movs	r0, #0
 800061e:	f000 fe21 	bl	8001264 <setTimer>
				setTimer(1, 1000);
 8000622:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000626:	2001      	movs	r0, #1
 8000628:	f000 fe1c 	bl	8001264 <setTimer>
			}
			break;
 800062c:	e13a      	b.n	80008a4 <fsm_automatic+0x314>
		}
		case GREEN_RED: {
			trafficGreenRed();
 800062e:	f000 fe67 	bl	8001300 <trafficGreenRed>
			if (timer_flag[0] == 1) {
 8000632:	4b70      	ldr	r3, [pc, #448]	; (80007f4 <fsm_automatic+0x264>)
 8000634:	681b      	ldr	r3, [r3, #0]
 8000636:	2b01      	cmp	r3, #1
 8000638:	d111      	bne.n	800065e <fsm_automatic+0xce>
				status = AMBER_RED;
 800063a:	4b69      	ldr	r3, [pc, #420]	; (80007e0 <fsm_automatic+0x250>)
 800063c:	220c      	movs	r2, #12
 800063e:	601a      	str	r2, [r3, #0]
				setTimer(0, yellowTime * 1000); // Timer 1
 8000640:	4b6d      	ldr	r3, [pc, #436]	; (80007f8 <fsm_automatic+0x268>)
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000648:	fb02 f303 	mul.w	r3, r2, r3
 800064c:	4619      	mov	r1, r3
 800064e:	2000      	movs	r0, #0
 8000650:	f000 fe08 	bl	8001264 <setTimer>
				countdownX = yellowTime - 1;
 8000654:	4b68      	ldr	r3, [pc, #416]	; (80007f8 <fsm_automatic+0x268>)
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	3b01      	subs	r3, #1
 800065a:	4a63      	ldr	r2, [pc, #396]	; (80007e8 <fsm_automatic+0x258>)
 800065c:	6013      	str	r3, [r2, #0]
			}
			if (timer_flag[1] == 1) {
 800065e:	4b65      	ldr	r3, [pc, #404]	; (80007f4 <fsm_automatic+0x264>)
 8000660:	685b      	ldr	r3, [r3, #4]
 8000662:	2b01      	cmp	r3, #1
 8000664:	d118      	bne.n	8000698 <fsm_automatic+0x108>
				//UPDATE DISPLAY
				updateBufferXLine(countdownX);
 8000666:	4b60      	ldr	r3, [pc, #384]	; (80007e8 <fsm_automatic+0x258>)
 8000668:	681b      	ldr	r3, [r3, #0]
 800066a:	4618      	mov	r0, r3
 800066c:	f7ff ff30 	bl	80004d0 <updateBufferXLine>
				updateBufferYLine(countdownY);
 8000670:	4b5f      	ldr	r3, [pc, #380]	; (80007f0 <fsm_automatic+0x260>)
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	4618      	mov	r0, r3
 8000676:	f7ff ff5b 	bl	8000530 <updateBufferYLine>
				countdownX--;
 800067a:	4b5b      	ldr	r3, [pc, #364]	; (80007e8 <fsm_automatic+0x258>)
 800067c:	681b      	ldr	r3, [r3, #0]
 800067e:	3b01      	subs	r3, #1
 8000680:	4a59      	ldr	r2, [pc, #356]	; (80007e8 <fsm_automatic+0x258>)
 8000682:	6013      	str	r3, [r2, #0]
				countdownY--;
 8000684:	4b5a      	ldr	r3, [pc, #360]	; (80007f0 <fsm_automatic+0x260>)
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	3b01      	subs	r3, #1
 800068a:	4a59      	ldr	r2, [pc, #356]	; (80007f0 <fsm_automatic+0x260>)
 800068c:	6013      	str	r3, [r2, #0]
				setTimer(1, 1000); // Timer 2
 800068e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000692:	2001      	movs	r0, #1
 8000694:	f000 fde6 	bl	8001264 <setTimer>
			}
			if (isButtonPressed(0)) {
 8000698:	2000      	movs	r0, #0
 800069a:	f000 f95d 	bl	8000958 <isButtonPressed>
 800069e:	4603      	mov	r3, r0
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	f000 80f8 	beq.w	8000896 <fsm_automatic+0x306>
//				Check button1_flag == 1, then reset button1_flag = 0
				status = MAN;
 80006a6:	4b4e      	ldr	r3, [pc, #312]	; (80007e0 <fsm_automatic+0x250>)
 80006a8:	2202      	movs	r2, #2
 80006aa:	601a      	str	r2, [r3, #0]
				setTimer(2, 10000); // Timer 3
 80006ac:	f242 7110 	movw	r1, #10000	; 0x2710
 80006b0:	2002      	movs	r0, #2
 80006b2:	f000 fdd7 	bl	8001264 <setTimer>
				clearTrafficLight();
 80006b6:	f000 ff2d 	bl	8001514 <clearTrafficLight>
			}
			break;
 80006ba:	e0ec      	b.n	8000896 <fsm_automatic+0x306>
		}
		case AMBER_RED: {
			trafficYellowRed();
 80006bc:	f000 fe44 	bl	8001348 <trafficYellowRed>
			if (timer_flag[0] == 1) {
 80006c0:	4b4c      	ldr	r3, [pc, #304]	; (80007f4 <fsm_automatic+0x264>)
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	2b01      	cmp	r3, #1
 80006c6:	d116      	bne.n	80006f6 <fsm_automatic+0x166>
				status = RED_GREEN;
 80006c8:	4b45      	ldr	r3, [pc, #276]	; (80007e0 <fsm_automatic+0x250>)
 80006ca:	220d      	movs	r2, #13
 80006cc:	601a      	str	r2, [r3, #0]
				setTimer(0, greenTime * 1000); // Timer 1
 80006ce:	4b45      	ldr	r3, [pc, #276]	; (80007e4 <fsm_automatic+0x254>)
 80006d0:	681b      	ldr	r3, [r3, #0]
 80006d2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80006d6:	fb02 f303 	mul.w	r3, r2, r3
 80006da:	4619      	mov	r1, r3
 80006dc:	2000      	movs	r0, #0
 80006de:	f000 fdc1 	bl	8001264 <setTimer>
				countdownX = redTime - 1;
 80006e2:	4b42      	ldr	r3, [pc, #264]	; (80007ec <fsm_automatic+0x25c>)
 80006e4:	681b      	ldr	r3, [r3, #0]
 80006e6:	3b01      	subs	r3, #1
 80006e8:	4a3f      	ldr	r2, [pc, #252]	; (80007e8 <fsm_automatic+0x258>)
 80006ea:	6013      	str	r3, [r2, #0]
				countdownY = greenTime - 1;
 80006ec:	4b3d      	ldr	r3, [pc, #244]	; (80007e4 <fsm_automatic+0x254>)
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	3b01      	subs	r3, #1
 80006f2:	4a3f      	ldr	r2, [pc, #252]	; (80007f0 <fsm_automatic+0x260>)
 80006f4:	6013      	str	r3, [r2, #0]
			}
			if (timer_flag[1] == 1) {
 80006f6:	4b3f      	ldr	r3, [pc, #252]	; (80007f4 <fsm_automatic+0x264>)
 80006f8:	685b      	ldr	r3, [r3, #4]
 80006fa:	2b01      	cmp	r3, #1
 80006fc:	d118      	bne.n	8000730 <fsm_automatic+0x1a0>
				//UPDATE DISPLAY
				updateBufferXLine(countdownX);
 80006fe:	4b3a      	ldr	r3, [pc, #232]	; (80007e8 <fsm_automatic+0x258>)
 8000700:	681b      	ldr	r3, [r3, #0]
 8000702:	4618      	mov	r0, r3
 8000704:	f7ff fee4 	bl	80004d0 <updateBufferXLine>
				updateBufferYLine(countdownY);
 8000708:	4b39      	ldr	r3, [pc, #228]	; (80007f0 <fsm_automatic+0x260>)
 800070a:	681b      	ldr	r3, [r3, #0]
 800070c:	4618      	mov	r0, r3
 800070e:	f7ff ff0f 	bl	8000530 <updateBufferYLine>
				countdownX--;
 8000712:	4b35      	ldr	r3, [pc, #212]	; (80007e8 <fsm_automatic+0x258>)
 8000714:	681b      	ldr	r3, [r3, #0]
 8000716:	3b01      	subs	r3, #1
 8000718:	4a33      	ldr	r2, [pc, #204]	; (80007e8 <fsm_automatic+0x258>)
 800071a:	6013      	str	r3, [r2, #0]
				countdownY--;
 800071c:	4b34      	ldr	r3, [pc, #208]	; (80007f0 <fsm_automatic+0x260>)
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	3b01      	subs	r3, #1
 8000722:	4a33      	ldr	r2, [pc, #204]	; (80007f0 <fsm_automatic+0x260>)
 8000724:	6013      	str	r3, [r2, #0]
				setTimer(1, 1000); // Timer 2
 8000726:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800072a:	2001      	movs	r0, #1
 800072c:	f000 fd9a 	bl	8001264 <setTimer>
			}
			if (isButtonPressed(0)) {
 8000730:	2000      	movs	r0, #0
 8000732:	f000 f911 	bl	8000958 <isButtonPressed>
 8000736:	4603      	mov	r3, r0
 8000738:	2b00      	cmp	r3, #0
 800073a:	f000 80ae 	beq.w	800089a <fsm_automatic+0x30a>
//				Check button1_flag == 1, then reset button1_flag = 0
				status = MAN;
 800073e:	4b28      	ldr	r3, [pc, #160]	; (80007e0 <fsm_automatic+0x250>)
 8000740:	2202      	movs	r2, #2
 8000742:	601a      	str	r2, [r3, #0]
				setTimer(2, 10000); // Timer 3
 8000744:	f242 7110 	movw	r1, #10000	; 0x2710
 8000748:	2002      	movs	r0, #2
 800074a:	f000 fd8b 	bl	8001264 <setTimer>
				clearTrafficLight();
 800074e:	f000 fee1 	bl	8001514 <clearTrafficLight>
			}
			break;
 8000752:	e0a2      	b.n	800089a <fsm_automatic+0x30a>
		}
		case RED_GREEN: {
			trafficRedGreen();
 8000754:	f000 fe1c 	bl	8001390 <trafficRedGreen>
			if (timer_flag[0] == 1) {
 8000758:	4b26      	ldr	r3, [pc, #152]	; (80007f4 <fsm_automatic+0x264>)
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	2b01      	cmp	r3, #1
 800075e:	d111      	bne.n	8000784 <fsm_automatic+0x1f4>
				status = RED_AMBER;
 8000760:	4b1f      	ldr	r3, [pc, #124]	; (80007e0 <fsm_automatic+0x250>)
 8000762:	220e      	movs	r2, #14
 8000764:	601a      	str	r2, [r3, #0]
				setTimer(0, yellowTime * 1000); // Timer 1
 8000766:	4b24      	ldr	r3, [pc, #144]	; (80007f8 <fsm_automatic+0x268>)
 8000768:	681b      	ldr	r3, [r3, #0]
 800076a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800076e:	fb02 f303 	mul.w	r3, r2, r3
 8000772:	4619      	mov	r1, r3
 8000774:	2000      	movs	r0, #0
 8000776:	f000 fd75 	bl	8001264 <setTimer>
				countdownY = yellowTime - 1;
 800077a:	4b1f      	ldr	r3, [pc, #124]	; (80007f8 <fsm_automatic+0x268>)
 800077c:	681b      	ldr	r3, [r3, #0]
 800077e:	3b01      	subs	r3, #1
 8000780:	4a1b      	ldr	r2, [pc, #108]	; (80007f0 <fsm_automatic+0x260>)
 8000782:	6013      	str	r3, [r2, #0]
			}
			if (timer_flag[1] == 1) {
 8000784:	4b1b      	ldr	r3, [pc, #108]	; (80007f4 <fsm_automatic+0x264>)
 8000786:	685b      	ldr	r3, [r3, #4]
 8000788:	2b01      	cmp	r3, #1
 800078a:	d118      	bne.n	80007be <fsm_automatic+0x22e>
				//UPDATE DISPLAY
				updateBufferXLine(countdownX);
 800078c:	4b16      	ldr	r3, [pc, #88]	; (80007e8 <fsm_automatic+0x258>)
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	4618      	mov	r0, r3
 8000792:	f7ff fe9d 	bl	80004d0 <updateBufferXLine>
				updateBufferYLine(countdownY);
 8000796:	4b16      	ldr	r3, [pc, #88]	; (80007f0 <fsm_automatic+0x260>)
 8000798:	681b      	ldr	r3, [r3, #0]
 800079a:	4618      	mov	r0, r3
 800079c:	f7ff fec8 	bl	8000530 <updateBufferYLine>
				countdownX--;
 80007a0:	4b11      	ldr	r3, [pc, #68]	; (80007e8 <fsm_automatic+0x258>)
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	3b01      	subs	r3, #1
 80007a6:	4a10      	ldr	r2, [pc, #64]	; (80007e8 <fsm_automatic+0x258>)
 80007a8:	6013      	str	r3, [r2, #0]
				countdownY--;
 80007aa:	4b11      	ldr	r3, [pc, #68]	; (80007f0 <fsm_automatic+0x260>)
 80007ac:	681b      	ldr	r3, [r3, #0]
 80007ae:	3b01      	subs	r3, #1
 80007b0:	4a0f      	ldr	r2, [pc, #60]	; (80007f0 <fsm_automatic+0x260>)
 80007b2:	6013      	str	r3, [r2, #0]
				setTimer(1, 1000); // Timer 2
 80007b4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80007b8:	2001      	movs	r0, #1
 80007ba:	f000 fd53 	bl	8001264 <setTimer>
			}
			if (isButtonPressed(0)) {
 80007be:	2000      	movs	r0, #0
 80007c0:	f000 f8ca 	bl	8000958 <isButtonPressed>
 80007c4:	4603      	mov	r3, r0
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d069      	beq.n	800089e <fsm_automatic+0x30e>
//				Check button1_flag == 1, then reset button1_flag = 0
				status = MAN;
 80007ca:	4b05      	ldr	r3, [pc, #20]	; (80007e0 <fsm_automatic+0x250>)
 80007cc:	2202      	movs	r2, #2
 80007ce:	601a      	str	r2, [r3, #0]
				setTimer(2, 10000); // Timer 3
 80007d0:	f242 7110 	movw	r1, #10000	; 0x2710
 80007d4:	2002      	movs	r0, #2
 80007d6:	f000 fd45 	bl	8001264 <setTimer>
				clearTrafficLight();
 80007da:	f000 fe9b 	bl	8001514 <clearTrafficLight>
			}
			break;
 80007de:	e05e      	b.n	800089e <fsm_automatic+0x30e>
 80007e0:	20000190 	.word	0x20000190
 80007e4:	20000020 	.word	0x20000020
 80007e8:	20000048 	.word	0x20000048
 80007ec:	20000018 	.word	0x20000018
 80007f0:	2000004c 	.word	0x2000004c
 80007f4:	200001f0 	.word	0x200001f0
 80007f8:	2000001c 	.word	0x2000001c
		}
		case RED_AMBER: {
			trafficRedYellow();
 80007fc:	f000 fdec 	bl	80013d8 <trafficRedYellow>
			if (timer_flag[0] == 1) {
 8000800:	4b29      	ldr	r3, [pc, #164]	; (80008a8 <fsm_automatic+0x318>)
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	2b01      	cmp	r3, #1
 8000806:	d116      	bne.n	8000836 <fsm_automatic+0x2a6>
				status = GREEN_RED;
 8000808:	4b28      	ldr	r3, [pc, #160]	; (80008ac <fsm_automatic+0x31c>)
 800080a:	220b      	movs	r2, #11
 800080c:	601a      	str	r2, [r3, #0]
				setTimer(0, greenTime * 1000); // Timer 1
 800080e:	4b28      	ldr	r3, [pc, #160]	; (80008b0 <fsm_automatic+0x320>)
 8000810:	681b      	ldr	r3, [r3, #0]
 8000812:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000816:	fb02 f303 	mul.w	r3, r2, r3
 800081a:	4619      	mov	r1, r3
 800081c:	2000      	movs	r0, #0
 800081e:	f000 fd21 	bl	8001264 <setTimer>
				countdownX = greenTime - 1;
 8000822:	4b23      	ldr	r3, [pc, #140]	; (80008b0 <fsm_automatic+0x320>)
 8000824:	681b      	ldr	r3, [r3, #0]
 8000826:	3b01      	subs	r3, #1
 8000828:	4a22      	ldr	r2, [pc, #136]	; (80008b4 <fsm_automatic+0x324>)
 800082a:	6013      	str	r3, [r2, #0]
				countdownY = redTime - 1;
 800082c:	4b22      	ldr	r3, [pc, #136]	; (80008b8 <fsm_automatic+0x328>)
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	3b01      	subs	r3, #1
 8000832:	4a22      	ldr	r2, [pc, #136]	; (80008bc <fsm_automatic+0x32c>)
 8000834:	6013      	str	r3, [r2, #0]
			}
			if (timer_flag[1] == 1) {
 8000836:	4b1c      	ldr	r3, [pc, #112]	; (80008a8 <fsm_automatic+0x318>)
 8000838:	685b      	ldr	r3, [r3, #4]
 800083a:	2b01      	cmp	r3, #1
 800083c:	d118      	bne.n	8000870 <fsm_automatic+0x2e0>
				//UPDATE DISPLAY
				updateBufferXLine(countdownX);
 800083e:	4b1d      	ldr	r3, [pc, #116]	; (80008b4 <fsm_automatic+0x324>)
 8000840:	681b      	ldr	r3, [r3, #0]
 8000842:	4618      	mov	r0, r3
 8000844:	f7ff fe44 	bl	80004d0 <updateBufferXLine>
				updateBufferYLine(countdownY);
 8000848:	4b1c      	ldr	r3, [pc, #112]	; (80008bc <fsm_automatic+0x32c>)
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	4618      	mov	r0, r3
 800084e:	f7ff fe6f 	bl	8000530 <updateBufferYLine>
				countdownX--;
 8000852:	4b18      	ldr	r3, [pc, #96]	; (80008b4 <fsm_automatic+0x324>)
 8000854:	681b      	ldr	r3, [r3, #0]
 8000856:	3b01      	subs	r3, #1
 8000858:	4a16      	ldr	r2, [pc, #88]	; (80008b4 <fsm_automatic+0x324>)
 800085a:	6013      	str	r3, [r2, #0]
				countdownY--;
 800085c:	4b17      	ldr	r3, [pc, #92]	; (80008bc <fsm_automatic+0x32c>)
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	3b01      	subs	r3, #1
 8000862:	4a16      	ldr	r2, [pc, #88]	; (80008bc <fsm_automatic+0x32c>)
 8000864:	6013      	str	r3, [r2, #0]
				setTimer(1, 1000); // Timer 2
 8000866:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800086a:	2001      	movs	r0, #1
 800086c:	f000 fcfa 	bl	8001264 <setTimer>
			}
			if (isButtonPressed(0)) {
 8000870:	2000      	movs	r0, #0
 8000872:	f000 f871 	bl	8000958 <isButtonPressed>
 8000876:	4603      	mov	r3, r0
 8000878:	2b00      	cmp	r3, #0
 800087a:	d012      	beq.n	80008a2 <fsm_automatic+0x312>
//				Check button1_flag == 1, then reset button1_flag = 0
				status = MAN;
 800087c:	4b0b      	ldr	r3, [pc, #44]	; (80008ac <fsm_automatic+0x31c>)
 800087e:	2202      	movs	r2, #2
 8000880:	601a      	str	r2, [r3, #0]
				setTimer(2, 10000); // Timer 3
 8000882:	f242 7110 	movw	r1, #10000	; 0x2710
 8000886:	2002      	movs	r0, #2
 8000888:	f000 fcec 	bl	8001264 <setTimer>
				clearTrafficLight();
 800088c:	f000 fe42 	bl	8001514 <clearTrafficLight>
			}
			break;
 8000890:	e007      	b.n	80008a2 <fsm_automatic+0x312>
		}
		default: {
			break;
 8000892:	bf00      	nop
 8000894:	e006      	b.n	80008a4 <fsm_automatic+0x314>
			break;
 8000896:	bf00      	nop
 8000898:	e004      	b.n	80008a4 <fsm_automatic+0x314>
			break;
 800089a:	bf00      	nop
 800089c:	e002      	b.n	80008a4 <fsm_automatic+0x314>
			break;
 800089e:	bf00      	nop
 80008a0:	e000      	b.n	80008a4 <fsm_automatic+0x314>
			break;
 80008a2:	bf00      	nop
		}
	}
}
 80008a4:	bf00      	nop
 80008a6:	bd80      	pop	{r7, pc}
 80008a8:	200001f0 	.word	0x200001f0
 80008ac:	20000190 	.word	0x20000190
 80008b0:	20000020 	.word	0x20000020
 80008b4:	20000048 	.word	0x20000048
 80008b8:	20000018 	.word	0x20000018
 80008bc:	2000004c 	.word	0x2000004c

080008c0 <initButtons>:
int TimeOutForKeyPress[NUM_BUTTONS];
int button_pressed[NUM_BUTTONS];
int button_long_pressed[NUM_BUTTONS];
int button_flag[NUM_BUTTONS];

void initButtons() {
 80008c0:	b480      	push	{r7}
 80008c2:	b083      	sub	sp, #12
 80008c4:	af00      	add	r7, sp, #0
    for (int i = 0; i < NUM_BUTTONS; i++) {
 80008c6:	2300      	movs	r3, #0
 80008c8:	607b      	str	r3, [r7, #4]
 80008ca:	e02b      	b.n	8000924 <initButtons+0x64>
        KeyReg0[i] = NORMAL_STATE;
 80008cc:	4a1a      	ldr	r2, [pc, #104]	; (8000938 <initButtons+0x78>)
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	2100      	movs	r1, #0
 80008d2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        KeyReg1[i] = NORMAL_STATE;
 80008d6:	4a19      	ldr	r2, [pc, #100]	; (800093c <initButtons+0x7c>)
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	2100      	movs	r1, #0
 80008dc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        KeyReg2[i] = NORMAL_STATE;
 80008e0:	4a17      	ldr	r2, [pc, #92]	; (8000940 <initButtons+0x80>)
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	2100      	movs	r1, #0
 80008e6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        KeyReg3[i] = NORMAL_STATE;
 80008ea:	4a16      	ldr	r2, [pc, #88]	; (8000944 <initButtons+0x84>)
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	2100      	movs	r1, #0
 80008f0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        TimeOutForKeyPress[i] = 500;
 80008f4:	4a14      	ldr	r2, [pc, #80]	; (8000948 <initButtons+0x88>)
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80008fc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        button_pressed[i] = 0;
 8000900:	4a12      	ldr	r2, [pc, #72]	; (800094c <initButtons+0x8c>)
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	2100      	movs	r1, #0
 8000906:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        button_long_pressed[i] = 0;
 800090a:	4a11      	ldr	r2, [pc, #68]	; (8000950 <initButtons+0x90>)
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	2100      	movs	r1, #0
 8000910:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        button_flag[i] = 0;
 8000914:	4a0f      	ldr	r2, [pc, #60]	; (8000954 <initButtons+0x94>)
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	2100      	movs	r1, #0
 800091a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for (int i = 0; i < NUM_BUTTONS; i++) {
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	3301      	adds	r3, #1
 8000922:	607b      	str	r3, [r7, #4]
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	2b09      	cmp	r3, #9
 8000928:	ddd0      	ble.n	80008cc <initButtons+0xc>
    }
}
 800092a:	bf00      	nop
 800092c:	bf00      	nop
 800092e:	370c      	adds	r7, #12
 8000930:	46bd      	mov	sp, r7
 8000932:	bc80      	pop	{r7}
 8000934:	4770      	bx	lr
 8000936:	bf00      	nop
 8000938:	20000050 	.word	0x20000050
 800093c:	20000078 	.word	0x20000078
 8000940:	200000a0 	.word	0x200000a0
 8000944:	200000c8 	.word	0x200000c8
 8000948:	200000f0 	.word	0x200000f0
 800094c:	20000118 	.word	0x20000118
 8000950:	20000140 	.word	0x20000140
 8000954:	20000168 	.word	0x20000168

08000958 <isButtonPressed>:

int isButtonPressed(int buttonIndex) {
 8000958:	b480      	push	{r7}
 800095a:	b083      	sub	sp, #12
 800095c:	af00      	add	r7, sp, #0
 800095e:	6078      	str	r0, [r7, #4]
    if (button_flag[buttonIndex] == 1) {
 8000960:	4a09      	ldr	r2, [pc, #36]	; (8000988 <isButtonPressed+0x30>)
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000968:	2b01      	cmp	r3, #1
 800096a:	d106      	bne.n	800097a <isButtonPressed+0x22>
        button_flag[buttonIndex] = 0;
 800096c:	4a06      	ldr	r2, [pc, #24]	; (8000988 <isButtonPressed+0x30>)
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	2100      	movs	r1, #0
 8000972:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        return 1;
 8000976:	2301      	movs	r3, #1
 8000978:	e000      	b.n	800097c <isButtonPressed+0x24>
    }
    return 0;
 800097a:	2300      	movs	r3, #0
}
 800097c:	4618      	mov	r0, r3
 800097e:	370c      	adds	r7, #12
 8000980:	46bd      	mov	sp, r7
 8000982:	bc80      	pop	{r7}
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop
 8000988:	20000168 	.word	0x20000168

0800098c <getKeyInput>:

void subKeyProcess(int buttonIndex) {
    button_flag[buttonIndex] = 1;
}

void getKeyInput() {
 800098c:	b580      	push	{r7, lr}
 800098e:	b082      	sub	sp, #8
 8000990:	af00      	add	r7, sp, #0
	for (int buttonIndex = 0; buttonIndex < NUM_BUTTONS; buttonIndex++) {
 8000992:	2300      	movs	r3, #0
 8000994:	607b      	str	r3, [r7, #4]
 8000996:	e012      	b.n	80009be <getKeyInput+0x32>
		KeyReg2[buttonIndex] = KeyReg1[buttonIndex];
 8000998:	4a4b      	ldr	r2, [pc, #300]	; (8000ac8 <getKeyInput+0x13c>)
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80009a0:	494a      	ldr	r1, [pc, #296]	; (8000acc <getKeyInput+0x140>)
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		KeyReg1[buttonIndex] = KeyReg0[buttonIndex];
 80009a8:	4a49      	ldr	r2, [pc, #292]	; (8000ad0 <getKeyInput+0x144>)
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80009b0:	4945      	ldr	r1, [pc, #276]	; (8000ac8 <getKeyInput+0x13c>)
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (int buttonIndex = 0; buttonIndex < NUM_BUTTONS; buttonIndex++) {
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	3301      	adds	r3, #1
 80009bc:	607b      	str	r3, [r7, #4]
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	2b09      	cmp	r3, #9
 80009c2:	dde9      	ble.n	8000998 <getKeyInput+0xc>
	}

    KeyReg0[0] = HAL_GPIO_ReadPin(BTN1_GPIO_Port, BTN1_Pin);
 80009c4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80009c8:	4842      	ldr	r0, [pc, #264]	; (8000ad4 <getKeyInput+0x148>)
 80009ca:	f001 f975 	bl	8001cb8 <HAL_GPIO_ReadPin>
 80009ce:	4603      	mov	r3, r0
 80009d0:	461a      	mov	r2, r3
 80009d2:	4b3f      	ldr	r3, [pc, #252]	; (8000ad0 <getKeyInput+0x144>)
 80009d4:	601a      	str	r2, [r3, #0]
    KeyReg0[1] = HAL_GPIO_ReadPin(BTN2_GPIO_Port, BTN2_Pin);
 80009d6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80009da:	483e      	ldr	r0, [pc, #248]	; (8000ad4 <getKeyInput+0x148>)
 80009dc:	f001 f96c 	bl	8001cb8 <HAL_GPIO_ReadPin>
 80009e0:	4603      	mov	r3, r0
 80009e2:	461a      	mov	r2, r3
 80009e4:	4b3a      	ldr	r3, [pc, #232]	; (8000ad0 <getKeyInput+0x144>)
 80009e6:	605a      	str	r2, [r3, #4]
    KeyReg0[2] = HAL_GPIO_ReadPin(BTN3_GPIO_Port, BTN3_Pin);
 80009e8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80009ec:	4839      	ldr	r0, [pc, #228]	; (8000ad4 <getKeyInput+0x148>)
 80009ee:	f001 f963 	bl	8001cb8 <HAL_GPIO_ReadPin>
 80009f2:	4603      	mov	r3, r0
 80009f4:	461a      	mov	r2, r3
 80009f6:	4b36      	ldr	r3, [pc, #216]	; (8000ad0 <getKeyInput+0x144>)
 80009f8:	609a      	str	r2, [r3, #8]
//    KeyReg0[6] = HAL_GPIO_ReadPin(GPIO_Port, GPIO_Pin);
//	  KeyReg0[7] = HAL_GPIO_ReadPin(GPIO_Port, GPIO_Pin);
//    KeyReg0[8] = HAL_GPIO_ReadPin(GPIO_Port, GPIO_Pin);
//    KeyReg0[9] = HAL_GPIO_ReadPin(GPIO_Port, GPIO_Pin);

    for (int buttonIndex = 0; buttonIndex < NUM_BUTTONS; buttonIndex++) {
 80009fa:	2300      	movs	r3, #0
 80009fc:	603b      	str	r3, [r7, #0]
 80009fe:	e05a      	b.n	8000ab6 <getKeyInput+0x12a>
		if ((KeyReg1[buttonIndex] == KeyReg0[buttonIndex]) && (KeyReg1[buttonIndex] == KeyReg2[buttonIndex])) {
 8000a00:	4a31      	ldr	r2, [pc, #196]	; (8000ac8 <getKeyInput+0x13c>)
 8000a02:	683b      	ldr	r3, [r7, #0]
 8000a04:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000a08:	4931      	ldr	r1, [pc, #196]	; (8000ad0 <getKeyInput+0x144>)
 8000a0a:	683b      	ldr	r3, [r7, #0]
 8000a0c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000a10:	429a      	cmp	r2, r3
 8000a12:	d14d      	bne.n	8000ab0 <getKeyInput+0x124>
 8000a14:	4a2c      	ldr	r2, [pc, #176]	; (8000ac8 <getKeyInput+0x13c>)
 8000a16:	683b      	ldr	r3, [r7, #0]
 8000a18:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000a1c:	492b      	ldr	r1, [pc, #172]	; (8000acc <getKeyInput+0x140>)
 8000a1e:	683b      	ldr	r3, [r7, #0]
 8000a20:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000a24:	429a      	cmp	r2, r3
 8000a26:	d143      	bne.n	8000ab0 <getKeyInput+0x124>
			if (KeyReg2[buttonIndex] != KeyReg3[buttonIndex]) {
 8000a28:	4a28      	ldr	r2, [pc, #160]	; (8000acc <getKeyInput+0x140>)
 8000a2a:	683b      	ldr	r3, [r7, #0]
 8000a2c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000a30:	4929      	ldr	r1, [pc, #164]	; (8000ad8 <getKeyInput+0x14c>)
 8000a32:	683b      	ldr	r3, [r7, #0]
 8000a34:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000a38:	429a      	cmp	r2, r3
 8000a3a:	d019      	beq.n	8000a70 <getKeyInput+0xe4>
				KeyReg3[buttonIndex] = KeyReg2[buttonIndex];
 8000a3c:	4a23      	ldr	r2, [pc, #140]	; (8000acc <getKeyInput+0x140>)
 8000a3e:	683b      	ldr	r3, [r7, #0]
 8000a40:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000a44:	4924      	ldr	r1, [pc, #144]	; (8000ad8 <getKeyInput+0x14c>)
 8000a46:	683b      	ldr	r3, [r7, #0]
 8000a48:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				if (KeyReg3[buttonIndex] == PRESSED_STATE) {
 8000a4c:	4a22      	ldr	r2, [pc, #136]	; (8000ad8 <getKeyInput+0x14c>)
 8000a4e:	683b      	ldr	r3, [r7, #0]
 8000a50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a54:	2b01      	cmp	r3, #1
 8000a56:	d12b      	bne.n	8000ab0 <getKeyInput+0x124>
					TimeOutForKeyPress[buttonIndex] = 500;
 8000a58:	4a20      	ldr	r2, [pc, #128]	; (8000adc <getKeyInput+0x150>)
 8000a5a:	683b      	ldr	r3, [r7, #0]
 8000a5c:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000a60:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					button_flag[buttonIndex] = 1;
 8000a64:	4a1e      	ldr	r2, [pc, #120]	; (8000ae0 <getKeyInput+0x154>)
 8000a66:	683b      	ldr	r3, [r7, #0]
 8000a68:	2101      	movs	r1, #1
 8000a6a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000a6e:	e01f      	b.n	8000ab0 <getKeyInput+0x124>
				}
			}
			else {
				TimeOutForKeyPress[buttonIndex]--;
 8000a70:	4a1a      	ldr	r2, [pc, #104]	; (8000adc <getKeyInput+0x150>)
 8000a72:	683b      	ldr	r3, [r7, #0]
 8000a74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a78:	1e5a      	subs	r2, r3, #1
 8000a7a:	4918      	ldr	r1, [pc, #96]	; (8000adc <getKeyInput+0x150>)
 8000a7c:	683b      	ldr	r3, [r7, #0]
 8000a7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				if (TimeOutForKeyPress[buttonIndex] == 0) {
 8000a82:	4a16      	ldr	r2, [pc, #88]	; (8000adc <getKeyInput+0x150>)
 8000a84:	683b      	ldr	r3, [r7, #0]
 8000a86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d110      	bne.n	8000ab0 <getKeyInput+0x124>
					TimeOutForKeyPress[buttonIndex] = 500;
 8000a8e:	4a13      	ldr	r2, [pc, #76]	; (8000adc <getKeyInput+0x150>)
 8000a90:	683b      	ldr	r3, [r7, #0]
 8000a92:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000a96:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					if (KeyReg3[buttonIndex] == PRESSED_STATE) {
 8000a9a:	4a0f      	ldr	r2, [pc, #60]	; (8000ad8 <getKeyInput+0x14c>)
 8000a9c:	683b      	ldr	r3, [r7, #0]
 8000a9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000aa2:	2b01      	cmp	r3, #1
 8000aa4:	d104      	bne.n	8000ab0 <getKeyInput+0x124>
						button_flag[buttonIndex] = 1;
 8000aa6:	4a0e      	ldr	r2, [pc, #56]	; (8000ae0 <getKeyInput+0x154>)
 8000aa8:	683b      	ldr	r3, [r7, #0]
 8000aaa:	2101      	movs	r1, #1
 8000aac:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for (int buttonIndex = 0; buttonIndex < NUM_BUTTONS; buttonIndex++) {
 8000ab0:	683b      	ldr	r3, [r7, #0]
 8000ab2:	3301      	adds	r3, #1
 8000ab4:	603b      	str	r3, [r7, #0]
 8000ab6:	683b      	ldr	r3, [r7, #0]
 8000ab8:	2b09      	cmp	r3, #9
 8000aba:	dda1      	ble.n	8000a00 <getKeyInput+0x74>
					}
				}
			}
		}
    }
}
 8000abc:	bf00      	nop
 8000abe:	bf00      	nop
 8000ac0:	3708      	adds	r7, #8
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	bd80      	pop	{r7, pc}
 8000ac6:	bf00      	nop
 8000ac8:	20000078 	.word	0x20000078
 8000acc:	200000a0 	.word	0x200000a0
 8000ad0:	20000050 	.word	0x20000050
 8000ad4:	40010c00 	.word	0x40010c00
 8000ad8:	200000c8 	.word	0x200000c8
 8000adc:	200000f0 	.word	0x200000f0
 8000ae0:	20000168 	.word	0x20000168

08000ae4 <fsm_setting>:
 */

#include "global.h"
int status = INIT;

void fsm_setting() {
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	af00      	add	r7, sp, #0
	switch(status) {
 8000ae8:	4b1e      	ldr	r3, [pc, #120]	; (8000b64 <fsm_setting+0x80>)
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	2b02      	cmp	r3, #2
 8000aee:	d020      	beq.n	8000b32 <fsm_setting+0x4e>
 8000af0:	2b02      	cmp	r3, #2
 8000af2:	dc30      	bgt.n	8000b56 <fsm_setting+0x72>
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d002      	beq.n	8000afe <fsm_setting+0x1a>
 8000af8:	2b01      	cmp	r3, #1
 8000afa:	d004      	beq.n	8000b06 <fsm_setting+0x22>
				break;
			}
			break;
		}
		default: {
			break;
 8000afc:	e02b      	b.n	8000b56 <fsm_setting+0x72>
				status = AUTO;
 8000afe:	4b19      	ldr	r3, [pc, #100]	; (8000b64 <fsm_setting+0x80>)
 8000b00:	2201      	movs	r2, #1
 8000b02:	601a      	str	r2, [r3, #0]
			break;
 8000b04:	e02c      	b.n	8000b60 <fsm_setting+0x7c>
			if (isButtonPressed(0)) {
 8000b06:	2000      	movs	r0, #0
 8000b08:	f7ff ff26 	bl	8000958 <isButtonPressed>
 8000b0c:	4603      	mov	r3, r0
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d023      	beq.n	8000b5a <fsm_setting+0x76>
				status = MAN;
 8000b12:	4b14      	ldr	r3, [pc, #80]	; (8000b64 <fsm_setting+0x80>)
 8000b14:	2202      	movs	r2, #2
 8000b16:	601a      	str	r2, [r3, #0]
				setTimer(2, 10000); // Timer 3
 8000b18:	f242 7110 	movw	r1, #10000	; 0x2710
 8000b1c:	2002      	movs	r0, #2
 8000b1e:	f000 fba1 	bl	8001264 <setTimer>
				setTimer(3, 500); // Timer 4
 8000b22:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000b26:	2003      	movs	r0, #3
 8000b28:	f000 fb9c 	bl	8001264 <setTimer>
				clearTrafficLight();
 8000b2c:	f000 fcf2 	bl	8001514 <clearTrafficLight>
			break;
 8000b30:	e013      	b.n	8000b5a <fsm_setting+0x76>
			if (isButtonPressed(2)) {
 8000b32:	2002      	movs	r0, #2
 8000b34:	f7ff ff10 	bl	8000958 <isButtonPressed>
 8000b38:	4603      	mov	r3, r0
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d003      	beq.n	8000b46 <fsm_setting+0x62>
				status = AUTO;
 8000b3e:	4b09      	ldr	r3, [pc, #36]	; (8000b64 <fsm_setting+0x80>)
 8000b40:	2201      	movs	r2, #1
 8000b42:	601a      	str	r2, [r3, #0]
				break;
 8000b44:	e00c      	b.n	8000b60 <fsm_setting+0x7c>
			if (timer_flag[2] == 1) {
 8000b46:	4b08      	ldr	r3, [pc, #32]	; (8000b68 <fsm_setting+0x84>)
 8000b48:	689b      	ldr	r3, [r3, #8]
 8000b4a:	2b01      	cmp	r3, #1
 8000b4c:	d107      	bne.n	8000b5e <fsm_setting+0x7a>
				status = AUTO;
 8000b4e:	4b05      	ldr	r3, [pc, #20]	; (8000b64 <fsm_setting+0x80>)
 8000b50:	2201      	movs	r2, #1
 8000b52:	601a      	str	r2, [r3, #0]
				break;
 8000b54:	e004      	b.n	8000b60 <fsm_setting+0x7c>
			break;
 8000b56:	bf00      	nop
 8000b58:	e002      	b.n	8000b60 <fsm_setting+0x7c>
			break;
 8000b5a:	bf00      	nop
 8000b5c:	e000      	b.n	8000b60 <fsm_setting+0x7c>
			break;
 8000b5e:	bf00      	nop
		}
	}
}
 8000b60:	bf00      	nop
 8000b62:	bd80      	pop	{r7, pc}
 8000b64:	20000190 	.word	0x20000190
 8000b68:	200001f0 	.word	0x200001f0

08000b6c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b70:	f000 fd9e 	bl	80016b0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b74:	f000 f828 	bl	8000bc8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b78:	f000 f8ae 	bl	8000cd8 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000b7c:	f000 f860 	bl	8000c40 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000b80:	480e      	ldr	r0, [pc, #56]	; (8000bbc <main+0x50>)
 8000b82:	f001 fd0f 	bl	80025a4 <HAL_TIM_Base_Start_IT>
  initButtons(); //Init for button_array
 8000b86:	f7ff fe9b 	bl	80008c0 <initButtons>
  setTimer(4, 1000); // Timer 5
 8000b8a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000b8e:	2004      	movs	r0, #4
 8000b90:	f000 fb68 	bl	8001264 <setTimer>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  fsm_automatic();
 8000b94:	f7ff fcfc 	bl	8000590 <fsm_automatic>
	  fsm_manual();
 8000b98:	f000 f944 	bl	8000e24 <fsm_manual>
	  fsm_setting();
 8000b9c:	f7ff ffa2 	bl	8000ae4 <fsm_setting>
	  if (timer_flag[4] == 1) {
 8000ba0:	4b07      	ldr	r3, [pc, #28]	; (8000bc0 <main+0x54>)
 8000ba2:	691b      	ldr	r3, [r3, #16]
 8000ba4:	2b01      	cmp	r3, #1
 8000ba6:	d1f5      	bne.n	8000b94 <main+0x28>
		  setTimer(4, 1000);
 8000ba8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000bac:	2004      	movs	r0, #4
 8000bae:	f000 fb59 	bl	8001264 <setTimer>
		  HAL_GPIO_TogglePin(LED7_GPIO_Port, LED7_Pin);
 8000bb2:	2180      	movs	r1, #128	; 0x80
 8000bb4:	4803      	ldr	r0, [pc, #12]	; (8000bc4 <main+0x58>)
 8000bb6:	f001 f8ae 	bl	8001d16 <HAL_GPIO_TogglePin>
	  fsm_automatic();
 8000bba:	e7eb      	b.n	8000b94 <main+0x28>
 8000bbc:	20000194 	.word	0x20000194
 8000bc0:	200001f0 	.word	0x200001f0
 8000bc4:	40011000 	.word	0x40011000

08000bc8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b090      	sub	sp, #64	; 0x40
 8000bcc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bce:	f107 0318 	add.w	r3, r7, #24
 8000bd2:	2228      	movs	r2, #40	; 0x28
 8000bd4:	2100      	movs	r1, #0
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	f002 f8ba 	bl	8002d50 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bdc:	1d3b      	adds	r3, r7, #4
 8000bde:	2200      	movs	r2, #0
 8000be0:	601a      	str	r2, [r3, #0]
 8000be2:	605a      	str	r2, [r3, #4]
 8000be4:	609a      	str	r2, [r3, #8]
 8000be6:	60da      	str	r2, [r3, #12]
 8000be8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000bea:	2302      	movs	r3, #2
 8000bec:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000bee:	2301      	movs	r3, #1
 8000bf0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000bf2:	2310      	movs	r3, #16
 8000bf4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bfa:	f107 0318 	add.w	r3, r7, #24
 8000bfe:	4618      	mov	r0, r3
 8000c00:	f001 f8a2 	bl	8001d48 <HAL_RCC_OscConfig>
 8000c04:	4603      	mov	r3, r0
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d001      	beq.n	8000c0e <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000c0a:	f000 f905 	bl	8000e18 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c0e:	230f      	movs	r3, #15
 8000c10:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000c12:	2300      	movs	r3, #0
 8000c14:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c16:	2300      	movs	r3, #0
 8000c18:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000c22:	1d3b      	adds	r3, r7, #4
 8000c24:	2100      	movs	r1, #0
 8000c26:	4618      	mov	r0, r3
 8000c28:	f001 fb10 	bl	800224c <HAL_RCC_ClockConfig>
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d001      	beq.n	8000c36 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000c32:	f000 f8f1 	bl	8000e18 <Error_Handler>
  }
}
 8000c36:	bf00      	nop
 8000c38:	3740      	adds	r7, #64	; 0x40
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	bd80      	pop	{r7, pc}
	...

08000c40 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b086      	sub	sp, #24
 8000c44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c46:	f107 0308 	add.w	r3, r7, #8
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	601a      	str	r2, [r3, #0]
 8000c4e:	605a      	str	r2, [r3, #4]
 8000c50:	609a      	str	r2, [r3, #8]
 8000c52:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c54:	463b      	mov	r3, r7
 8000c56:	2200      	movs	r2, #0
 8000c58:	601a      	str	r2, [r3, #0]
 8000c5a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000c5c:	4b1d      	ldr	r3, [pc, #116]	; (8000cd4 <MX_TIM2_Init+0x94>)
 8000c5e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c62:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 799;
 8000c64:	4b1b      	ldr	r3, [pc, #108]	; (8000cd4 <MX_TIM2_Init+0x94>)
 8000c66:	f240 321f 	movw	r2, #799	; 0x31f
 8000c6a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c6c:	4b19      	ldr	r3, [pc, #100]	; (8000cd4 <MX_TIM2_Init+0x94>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8000c72:	4b18      	ldr	r3, [pc, #96]	; (8000cd4 <MX_TIM2_Init+0x94>)
 8000c74:	2209      	movs	r2, #9
 8000c76:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c78:	4b16      	ldr	r3, [pc, #88]	; (8000cd4 <MX_TIM2_Init+0x94>)
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c7e:	4b15      	ldr	r3, [pc, #84]	; (8000cd4 <MX_TIM2_Init+0x94>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000c84:	4813      	ldr	r0, [pc, #76]	; (8000cd4 <MX_TIM2_Init+0x94>)
 8000c86:	f001 fc3d 	bl	8002504 <HAL_TIM_Base_Init>
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d001      	beq.n	8000c94 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000c90:	f000 f8c2 	bl	8000e18 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c94:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c98:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000c9a:	f107 0308 	add.w	r3, r7, #8
 8000c9e:	4619      	mov	r1, r3
 8000ca0:	480c      	ldr	r0, [pc, #48]	; (8000cd4 <MX_TIM2_Init+0x94>)
 8000ca2:	f001 fdcf 	bl	8002844 <HAL_TIM_ConfigClockSource>
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d001      	beq.n	8000cb0 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000cac:	f000 f8b4 	bl	8000e18 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000cb8:	463b      	mov	r3, r7
 8000cba:	4619      	mov	r1, r3
 8000cbc:	4805      	ldr	r0, [pc, #20]	; (8000cd4 <MX_TIM2_Init+0x94>)
 8000cbe:	f001 ffc9 	bl	8002c54 <HAL_TIMEx_MasterConfigSynchronization>
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d001      	beq.n	8000ccc <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000cc8:	f000 f8a6 	bl	8000e18 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000ccc:	bf00      	nop
 8000cce:	3718      	adds	r7, #24
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	bd80      	pop	{r7, pc}
 8000cd4:	20000194 	.word	0x20000194

08000cd8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b088      	sub	sp, #32
 8000cdc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cde:	f107 0310 	add.w	r3, r7, #16
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	601a      	str	r2, [r3, #0]
 8000ce6:	605a      	str	r2, [r3, #4]
 8000ce8:	609a      	str	r2, [r3, #8]
 8000cea:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cec:	4b37      	ldr	r3, [pc, #220]	; (8000dcc <MX_GPIO_Init+0xf4>)
 8000cee:	699b      	ldr	r3, [r3, #24]
 8000cf0:	4a36      	ldr	r2, [pc, #216]	; (8000dcc <MX_GPIO_Init+0xf4>)
 8000cf2:	f043 0310 	orr.w	r3, r3, #16
 8000cf6:	6193      	str	r3, [r2, #24]
 8000cf8:	4b34      	ldr	r3, [pc, #208]	; (8000dcc <MX_GPIO_Init+0xf4>)
 8000cfa:	699b      	ldr	r3, [r3, #24]
 8000cfc:	f003 0310 	and.w	r3, r3, #16
 8000d00:	60fb      	str	r3, [r7, #12]
 8000d02:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d04:	4b31      	ldr	r3, [pc, #196]	; (8000dcc <MX_GPIO_Init+0xf4>)
 8000d06:	699b      	ldr	r3, [r3, #24]
 8000d08:	4a30      	ldr	r2, [pc, #192]	; (8000dcc <MX_GPIO_Init+0xf4>)
 8000d0a:	f043 0304 	orr.w	r3, r3, #4
 8000d0e:	6193      	str	r3, [r2, #24]
 8000d10:	4b2e      	ldr	r3, [pc, #184]	; (8000dcc <MX_GPIO_Init+0xf4>)
 8000d12:	699b      	ldr	r3, [r3, #24]
 8000d14:	f003 0304 	and.w	r3, r3, #4
 8000d18:	60bb      	str	r3, [r7, #8]
 8000d1a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d1c:	4b2b      	ldr	r3, [pc, #172]	; (8000dcc <MX_GPIO_Init+0xf4>)
 8000d1e:	699b      	ldr	r3, [r3, #24]
 8000d20:	4a2a      	ldr	r2, [pc, #168]	; (8000dcc <MX_GPIO_Init+0xf4>)
 8000d22:	f043 0308 	orr.w	r3, r3, #8
 8000d26:	6193      	str	r3, [r2, #24]
 8000d28:	4b28      	ldr	r3, [pc, #160]	; (8000dcc <MX_GPIO_Init+0xf4>)
 8000d2a:	699b      	ldr	r3, [r3, #24]
 8000d2c:	f003 0308 	and.w	r3, r3, #8
 8000d30:	607b      	str	r3, [r7, #4]
 8000d32:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED1_Pin|LED2_Pin|LED3_Pin|LED4_Pin
 8000d34:	2200      	movs	r2, #0
 8000d36:	21bf      	movs	r1, #191	; 0xbf
 8000d38:	4825      	ldr	r0, [pc, #148]	; (8000dd0 <MX_GPIO_Init+0xf8>)
 8000d3a:	f000 ffd4 	bl	8001ce6 <HAL_GPIO_WritePin>
                          |LED5_Pin|LED6_Pin|LED7_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SEG2_Pin|EN0_Pin|EN1_Pin|EN2_Pin
 8000d3e:	2200      	movs	r2, #0
 8000d40:	f44f 7174 	mov.w	r1, #976	; 0x3d0
 8000d44:	4823      	ldr	r0, [pc, #140]	; (8000dd4 <MX_GPIO_Init+0xfc>)
 8000d46:	f000 ffce 	bl	8001ce6 <HAL_GPIO_WritePin>
                          |EN3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SEG0_Pin|SEG1_Pin|SEG3_Pin|SEG4_Pin
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	21f3      	movs	r1, #243	; 0xf3
 8000d4e:	4822      	ldr	r0, [pc, #136]	; (8000dd8 <MX_GPIO_Init+0x100>)
 8000d50:	f000 ffc9 	bl	8001ce6 <HAL_GPIO_WritePin>
                          |SEG5_Pin|SEG6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : LED1_Pin LED2_Pin LED3_Pin LED4_Pin
                           LED5_Pin LED6_Pin LED7_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin|LED4_Pin
 8000d54:	23bf      	movs	r3, #191	; 0xbf
 8000d56:	613b      	str	r3, [r7, #16]
                          |LED5_Pin|LED6_Pin|LED7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d58:	2301      	movs	r3, #1
 8000d5a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d60:	2302      	movs	r3, #2
 8000d62:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d64:	f107 0310 	add.w	r3, r7, #16
 8000d68:	4619      	mov	r1, r3
 8000d6a:	4819      	ldr	r0, [pc, #100]	; (8000dd0 <MX_GPIO_Init+0xf8>)
 8000d6c:	f000 fe10 	bl	8001990 <HAL_GPIO_Init>

  /*Configure GPIO pins : SEG2_Pin EN0_Pin EN1_Pin EN2_Pin
                           EN3_Pin */
  GPIO_InitStruct.Pin = SEG2_Pin|EN0_Pin|EN1_Pin|EN2_Pin
 8000d70:	f44f 7374 	mov.w	r3, #976	; 0x3d0
 8000d74:	613b      	str	r3, [r7, #16]
                          |EN3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d76:	2301      	movs	r3, #1
 8000d78:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d7e:	2302      	movs	r3, #2
 8000d80:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d82:	f107 0310 	add.w	r3, r7, #16
 8000d86:	4619      	mov	r1, r3
 8000d88:	4812      	ldr	r0, [pc, #72]	; (8000dd4 <MX_GPIO_Init+0xfc>)
 8000d8a:	f000 fe01 	bl	8001990 <HAL_GPIO_Init>

  /*Configure GPIO pins : SEG0_Pin SEG1_Pin SEG3_Pin SEG4_Pin
                           SEG5_Pin SEG6_Pin */
  GPIO_InitStruct.Pin = SEG0_Pin|SEG1_Pin|SEG3_Pin|SEG4_Pin
 8000d8e:	23f3      	movs	r3, #243	; 0xf3
 8000d90:	613b      	str	r3, [r7, #16]
                          |SEG5_Pin|SEG6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d92:	2301      	movs	r3, #1
 8000d94:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d96:	2300      	movs	r3, #0
 8000d98:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d9a:	2302      	movs	r3, #2
 8000d9c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d9e:	f107 0310 	add.w	r3, r7, #16
 8000da2:	4619      	mov	r1, r3
 8000da4:	480c      	ldr	r0, [pc, #48]	; (8000dd8 <MX_GPIO_Init+0x100>)
 8000da6:	f000 fdf3 	bl	8001990 <HAL_GPIO_Init>

  /*Configure GPIO pins : BTN3_Pin BTN1_Pin BTN2_Pin */
  GPIO_InitStruct.Pin = BTN3_Pin|BTN1_Pin|BTN2_Pin;
 8000daa:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8000dae:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000db0:	2300      	movs	r3, #0
 8000db2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db4:	2300      	movs	r3, #0
 8000db6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000db8:	f107 0310 	add.w	r3, r7, #16
 8000dbc:	4619      	mov	r1, r3
 8000dbe:	4806      	ldr	r0, [pc, #24]	; (8000dd8 <MX_GPIO_Init+0x100>)
 8000dc0:	f000 fde6 	bl	8001990 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000dc4:	bf00      	nop
 8000dc6:	3720      	adds	r7, #32
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	bd80      	pop	{r7, pc}
 8000dcc:	40021000 	.word	0x40021000
 8000dd0:	40011000 	.word	0x40011000
 8000dd4:	40010800 	.word	0x40010800
 8000dd8:	40010c00 	.word	0x40010c00

08000ddc <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
int idx = 0;
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b082      	sub	sp, #8
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
	timerRun();
 8000de4:	f000 fa5c 	bl	80012a0 <timerRun>
	getKeyInput();
 8000de8:	f7ff fdd0 	bl	800098c <getKeyInput>
	update7SEG(idx++);
 8000dec:	4b09      	ldr	r3, [pc, #36]	; (8000e14 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	1c5a      	adds	r2, r3, #1
 8000df2:	4908      	ldr	r1, [pc, #32]	; (8000e14 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8000df4:	600a      	str	r2, [r1, #0]
 8000df6:	4618      	mov	r0, r3
 8000df8:	f7ff fb18 	bl	800042c <update7SEG>
	if (idx >= 4){
 8000dfc:	4b05      	ldr	r3, [pc, #20]	; (8000e14 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	2b03      	cmp	r3, #3
 8000e02:	dd02      	ble.n	8000e0a <HAL_TIM_PeriodElapsedCallback+0x2e>
		idx = 0;
 8000e04:	4b03      	ldr	r3, [pc, #12]	; (8000e14 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8000e06:	2200      	movs	r2, #0
 8000e08:	601a      	str	r2, [r3, #0]
	}
}
 8000e0a:	bf00      	nop
 8000e0c:	3708      	adds	r7, #8
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	bd80      	pop	{r7, pc}
 8000e12:	bf00      	nop
 8000e14:	200001dc 	.word	0x200001dc

08000e18 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e1c:	b672      	cpsid	i
}
 8000e1e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e20:	e7fe      	b.n	8000e20 <Error_Handler+0x8>
	...

08000e24 <fsm_manual>:
int mode = 0;
int redValue = 0;
int yellowValue = 0;
int greenValue = 0;

void fsm_manual() {
 8000e24:	b580      	push	{r7, lr}
 8000e26:	af00      	add	r7, sp, #0
	switch(status) {
 8000e28:	4bbb      	ldr	r3, [pc, #748]	; (8001118 <fsm_manual+0x2f4>)
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	3b02      	subs	r3, #2
 8000e2e:	2b15      	cmp	r3, #21
 8000e30:	f200 816c 	bhi.w	800110c <fsm_manual+0x2e8>
 8000e34:	a201      	add	r2, pc, #4	; (adr r2, 8000e3c <fsm_manual+0x18>)
 8000e36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e3a:	bf00      	nop
 8000e3c:	08000e95 	.word	0x08000e95
 8000e40:	0800110d 	.word	0x0800110d
 8000e44:	0800110d 	.word	0x0800110d
 8000e48:	0800110d 	.word	0x0800110d
 8000e4c:	0800110d 	.word	0x0800110d
 8000e50:	0800110d 	.word	0x0800110d
 8000e54:	0800110d 	.word	0x0800110d
 8000e58:	0800110d 	.word	0x0800110d
 8000e5c:	0800110d 	.word	0x0800110d
 8000e60:	0800110d 	.word	0x0800110d
 8000e64:	0800110d 	.word	0x0800110d
 8000e68:	0800110d 	.word	0x0800110d
 8000e6c:	0800110d 	.word	0x0800110d
 8000e70:	0800110d 	.word	0x0800110d
 8000e74:	0800110d 	.word	0x0800110d
 8000e78:	0800110d 	.word	0x0800110d
 8000e7c:	0800110d 	.word	0x0800110d
 8000e80:	0800110d 	.word	0x0800110d
 8000e84:	0800110d 	.word	0x0800110d
 8000e88:	08000f07 	.word	0x08000f07
 8000e8c:	08000fb3 	.word	0x08000fb3
 8000e90:	0800105d 	.word	0x0800105d
		case MAN: {
			updateBufferXLine(mode);
 8000e94:	4ba1      	ldr	r3, [pc, #644]	; (800111c <fsm_manual+0x2f8>)
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	4618      	mov	r0, r3
 8000e9a:	f7ff fb19 	bl	80004d0 <updateBufferXLine>
			updateBufferYLine(0);
 8000e9e:	2000      	movs	r0, #0
 8000ea0:	f7ff fb46 	bl	8000530 <updateBufferYLine>
			if (timer_flag[3] == 1) {
 8000ea4:	4b9e      	ldr	r3, [pc, #632]	; (8001120 <fsm_manual+0x2fc>)
 8000ea6:	68db      	ldr	r3, [r3, #12]
 8000ea8:	2b01      	cmp	r3, #1
 8000eaa:	d106      	bne.n	8000eba <fsm_manual+0x96>
				setTimer(3, 500); // Timer 4
 8000eac:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000eb0:	2003      	movs	r0, #3
 8000eb2:	f000 f9d7 	bl	8001264 <setTimer>
				blinkAllLed(); // Blink 2Hz
 8000eb6:	f000 fbb7 	bl	8001628 <blinkAllLed>
			}
			if (isButtonPressed(0)) {
 8000eba:	2000      	movs	r0, #0
 8000ebc:	f7ff fd4c 	bl	8000958 <isButtonPressed>
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	f000 8124 	beq.w	8001110 <fsm_manual+0x2ec>
				status = MODE2;
 8000ec8:	4b93      	ldr	r3, [pc, #588]	; (8001118 <fsm_manual+0x2f4>)
 8000eca:	2215      	movs	r2, #21
 8000ecc:	601a      	str	r2, [r3, #0]
				mode = 2;
 8000ece:	4b93      	ldr	r3, [pc, #588]	; (800111c <fsm_manual+0x2f8>)
 8000ed0:	2202      	movs	r2, #2
 8000ed2:	601a      	str	r2, [r3, #0]
				// Save original values
				redValue = redTime;
 8000ed4:	4b93      	ldr	r3, [pc, #588]	; (8001124 <fsm_manual+0x300>)
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	4a93      	ldr	r2, [pc, #588]	; (8001128 <fsm_manual+0x304>)
 8000eda:	6013      	str	r3, [r2, #0]
				yellowValue = yellowTime;
 8000edc:	4b93      	ldr	r3, [pc, #588]	; (800112c <fsm_manual+0x308>)
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	4a93      	ldr	r2, [pc, #588]	; (8001130 <fsm_manual+0x30c>)
 8000ee2:	6013      	str	r3, [r2, #0]
				greenValue = greenTime;
 8000ee4:	4b93      	ldr	r3, [pc, #588]	; (8001134 <fsm_manual+0x310>)
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	4a93      	ldr	r2, [pc, #588]	; (8001138 <fsm_manual+0x314>)
 8000eea:	6013      	str	r3, [r2, #0]
				updateBufferXLine(mode);
 8000eec:	4b8b      	ldr	r3, [pc, #556]	; (800111c <fsm_manual+0x2f8>)
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	f7ff faed 	bl	80004d0 <updateBufferXLine>
				updateBufferYLine(redTime);
 8000ef6:	4b8b      	ldr	r3, [pc, #556]	; (8001124 <fsm_manual+0x300>)
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	4618      	mov	r0, r3
 8000efc:	f7ff fb18 	bl	8000530 <updateBufferYLine>
				clearTrafficLight();
 8000f00:	f000 fb08 	bl	8001514 <clearTrafficLight>
			}
			break;
 8000f04:	e104      	b.n	8001110 <fsm_manual+0x2ec>
		}
		case MODE2: {
			if (timer_flag[3] == 1) {
 8000f06:	4b86      	ldr	r3, [pc, #536]	; (8001120 <fsm_manual+0x2fc>)
 8000f08:	68db      	ldr	r3, [r3, #12]
 8000f0a:	2b01      	cmp	r3, #1
 8000f0c:	d106      	bne.n	8000f1c <fsm_manual+0xf8>
				setTimer(3, 500); // Timer 4
 8000f0e:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000f12:	2003      	movs	r0, #3
 8000f14:	f000 f9a6 	bl	8001264 <setTimer>
				blinkRedLed(); // Blink 2Hz
 8000f18:	f000 fb20 	bl	800155c <blinkRedLed>
			}
			if (isButtonPressed(0)) { // BTN1 pressed, update status and discard value
 8000f1c:	2000      	movs	r0, #0
 8000f1e:	f7ff fd1b 	bl	8000958 <isButtonPressed>
 8000f22:	4603      	mov	r3, r0
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d021      	beq.n	8000f6c <fsm_manual+0x148>
				status = MODE3;
 8000f28:	4b7b      	ldr	r3, [pc, #492]	; (8001118 <fsm_manual+0x2f4>)
 8000f2a:	2216      	movs	r2, #22
 8000f2c:	601a      	str	r2, [r3, #0]
				mode = 3;
 8000f2e:	4b7b      	ldr	r3, [pc, #492]	; (800111c <fsm_manual+0x2f8>)
 8000f30:	2203      	movs	r2, #3
 8000f32:	601a      	str	r2, [r3, #0]
				// Adjust Time to the original, not save the updated value
				setRedTime(redValue);
 8000f34:	4b7c      	ldr	r3, [pc, #496]	; (8001128 <fsm_manual+0x304>)
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	4618      	mov	r0, r3
 8000f3a:	f000 fac1 	bl	80014c0 <setRedTime>
				setYellowTime(yellowValue);
 8000f3e:	4b7c      	ldr	r3, [pc, #496]	; (8001130 <fsm_manual+0x30c>)
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	4618      	mov	r0, r3
 8000f44:	f000 faca 	bl	80014dc <setYellowTime>
				setGreenTime(greenValue);
 8000f48:	4b7b      	ldr	r3, [pc, #492]	; (8001138 <fsm_manual+0x314>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	f000 fad3 	bl	80014f8 <setGreenTime>
				updateBufferXLine(mode);
 8000f52:	4b72      	ldr	r3, [pc, #456]	; (800111c <fsm_manual+0x2f8>)
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	4618      	mov	r0, r3
 8000f58:	f7ff faba 	bl	80004d0 <updateBufferXLine>
				updateBufferYLine(yellowTime);
 8000f5c:	4b73      	ldr	r3, [pc, #460]	; (800112c <fsm_manual+0x308>)
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	4618      	mov	r0, r3
 8000f62:	f7ff fae5 	bl	8000530 <updateBufferYLine>
				clearTrafficLight();
 8000f66:	f000 fad5 	bl	8001514 <clearTrafficLight>
				break;
 8000f6a:	e0ea      	b.n	8001142 <fsm_manual+0x31e>
			}
			if (isButtonPressed(1)) { // BTN2 pressed, update value
 8000f6c:	2001      	movs	r0, #1
 8000f6e:	f7ff fcf3 	bl	8000958 <isButtonPressed>
 8000f72:	4603      	mov	r3, r0
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d007      	beq.n	8000f88 <fsm_manual+0x164>
				updateRedTime();
 8000f78:	f000 fa52 	bl	8001420 <updateRedTime>
				updateBufferYLine(redTime);
 8000f7c:	4b69      	ldr	r3, [pc, #420]	; (8001124 <fsm_manual+0x300>)
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	4618      	mov	r0, r3
 8000f82:	f7ff fad5 	bl	8000530 <updateBufferYLine>
				break;
 8000f86:	e0dc      	b.n	8001142 <fsm_manual+0x31e>
			}
			if (isButtonPressed(2)) { // BTN3 pressed, save the value -> update Time
 8000f88:	2002      	movs	r0, #2
 8000f8a:	f7ff fce5 	bl	8000958 <isButtonPressed>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	f000 80bf 	beq.w	8001114 <fsm_manual+0x2f0>
				status = MAN;
 8000f96:	4b60      	ldr	r3, [pc, #384]	; (8001118 <fsm_manual+0x2f4>)
 8000f98:	2202      	movs	r2, #2
 8000f9a:	601a      	str	r2, [r3, #0]
				setTimer(2, 10000); // Timer 3
 8000f9c:	f242 7110 	movw	r1, #10000	; 0x2710
 8000fa0:	2002      	movs	r0, #2
 8000fa2:	f000 f95f 	bl	8001264 <setTimer>
				clearTrafficLight();
 8000fa6:	f000 fab5 	bl	8001514 <clearTrafficLight>
				mode = 0;
 8000faa:	4b5c      	ldr	r3, [pc, #368]	; (800111c <fsm_manual+0x2f8>)
 8000fac:	2200      	movs	r2, #0
 8000fae:	601a      	str	r2, [r3, #0]
				break;
 8000fb0:	e0c7      	b.n	8001142 <fsm_manual+0x31e>
			}
			break;
		}
		case MODE3: {
			if (timer_flag[3] == 1) {
 8000fb2:	4b5b      	ldr	r3, [pc, #364]	; (8001120 <fsm_manual+0x2fc>)
 8000fb4:	68db      	ldr	r3, [r3, #12]
 8000fb6:	2b01      	cmp	r3, #1
 8000fb8:	d106      	bne.n	8000fc8 <fsm_manual+0x1a4>
				setTimer(3, 500); // Timer 4
 8000fba:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000fbe:	2003      	movs	r0, #3
 8000fc0:	f000 f950 	bl	8001264 <setTimer>
				blinkYellowLed(); // Blink 2Hz
 8000fc4:	f000 faec 	bl	80015a0 <blinkYellowLed>
			}
			if (isButtonPressed(0)) { // BTN1 pressed, update status and discard value
 8000fc8:	2000      	movs	r0, #0
 8000fca:	f7ff fcc5 	bl	8000958 <isButtonPressed>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d021      	beq.n	8001018 <fsm_manual+0x1f4>
				status = MODE4;
 8000fd4:	4b50      	ldr	r3, [pc, #320]	; (8001118 <fsm_manual+0x2f4>)
 8000fd6:	2217      	movs	r2, #23
 8000fd8:	601a      	str	r2, [r3, #0]
				mode = 4;
 8000fda:	4b50      	ldr	r3, [pc, #320]	; (800111c <fsm_manual+0x2f8>)
 8000fdc:	2204      	movs	r2, #4
 8000fde:	601a      	str	r2, [r3, #0]
				// Adjust Time to the original, not save the updated value
				setRedTime(redValue);
 8000fe0:	4b51      	ldr	r3, [pc, #324]	; (8001128 <fsm_manual+0x304>)
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	f000 fa6b 	bl	80014c0 <setRedTime>
				setYellowTime(yellowValue);
 8000fea:	4b51      	ldr	r3, [pc, #324]	; (8001130 <fsm_manual+0x30c>)
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	4618      	mov	r0, r3
 8000ff0:	f000 fa74 	bl	80014dc <setYellowTime>
				setGreenTime(greenValue);
 8000ff4:	4b50      	ldr	r3, [pc, #320]	; (8001138 <fsm_manual+0x314>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	f000 fa7d 	bl	80014f8 <setGreenTime>
				updateBufferXLine(mode);
 8000ffe:	4b47      	ldr	r3, [pc, #284]	; (800111c <fsm_manual+0x2f8>)
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	4618      	mov	r0, r3
 8001004:	f7ff fa64 	bl	80004d0 <updateBufferXLine>
				updateBufferYLine(greenTime);
 8001008:	4b4a      	ldr	r3, [pc, #296]	; (8001134 <fsm_manual+0x310>)
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	4618      	mov	r0, r3
 800100e:	f7ff fa8f 	bl	8000530 <updateBufferYLine>
				clearTrafficLight();
 8001012:	f000 fa7f 	bl	8001514 <clearTrafficLight>
				break;
 8001016:	e094      	b.n	8001142 <fsm_manual+0x31e>
			}
			if (isButtonPressed(1)) { // BTN2 pressed, update value
 8001018:	2001      	movs	r0, #1
 800101a:	f7ff fc9d 	bl	8000958 <isButtonPressed>
 800101e:	4603      	mov	r3, r0
 8001020:	2b00      	cmp	r3, #0
 8001022:	d007      	beq.n	8001034 <fsm_manual+0x210>
				updateYellowTime();
 8001024:	f000 fa2c 	bl	8001480 <updateYellowTime>
				updateBufferYLine(yellowTime);
 8001028:	4b40      	ldr	r3, [pc, #256]	; (800112c <fsm_manual+0x308>)
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	4618      	mov	r0, r3
 800102e:	f7ff fa7f 	bl	8000530 <updateBufferYLine>
				break;
 8001032:	e086      	b.n	8001142 <fsm_manual+0x31e>
			}
			if (isButtonPressed(2)) { // BTN3 pressed, save the value -> update Time
 8001034:	2002      	movs	r0, #2
 8001036:	f7ff fc8f 	bl	8000958 <isButtonPressed>
 800103a:	4603      	mov	r3, r0
 800103c:	2b00      	cmp	r3, #0
 800103e:	d07d      	beq.n	800113c <fsm_manual+0x318>
				status = MAN;
 8001040:	4b35      	ldr	r3, [pc, #212]	; (8001118 <fsm_manual+0x2f4>)
 8001042:	2202      	movs	r2, #2
 8001044:	601a      	str	r2, [r3, #0]
				setTimer(2, 10000); // Timer 3
 8001046:	f242 7110 	movw	r1, #10000	; 0x2710
 800104a:	2002      	movs	r0, #2
 800104c:	f000 f90a 	bl	8001264 <setTimer>
				clearTrafficLight();
 8001050:	f000 fa60 	bl	8001514 <clearTrafficLight>
				mode = 0;
 8001054:	4b31      	ldr	r3, [pc, #196]	; (800111c <fsm_manual+0x2f8>)
 8001056:	2200      	movs	r2, #0
 8001058:	601a      	str	r2, [r3, #0]
				break;
 800105a:	e072      	b.n	8001142 <fsm_manual+0x31e>
			}
			break;
		}
		case MODE4: {
			if (timer_flag[3] == 1) {
 800105c:	4b30      	ldr	r3, [pc, #192]	; (8001120 <fsm_manual+0x2fc>)
 800105e:	68db      	ldr	r3, [r3, #12]
 8001060:	2b01      	cmp	r3, #1
 8001062:	d106      	bne.n	8001072 <fsm_manual+0x24e>
				setTimer(3, 500); // Timer 4
 8001064:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8001068:	2003      	movs	r0, #3
 800106a:	f000 f8fb 	bl	8001264 <setTimer>
				blinkGreenLed(); // Blink 2Hz
 800106e:	f000 fab9 	bl	80015e4 <blinkGreenLed>
			}
			if (isButtonPressed(0)) { // BTN1 pressed, update status and discard value
 8001072:	2000      	movs	r0, #0
 8001074:	f7ff fc70 	bl	8000958 <isButtonPressed>
 8001078:	4603      	mov	r3, r0
 800107a:	2b00      	cmp	r3, #0
 800107c:	d024      	beq.n	80010c8 <fsm_manual+0x2a4>
				status = MAN;
 800107e:	4b26      	ldr	r3, [pc, #152]	; (8001118 <fsm_manual+0x2f4>)
 8001080:	2202      	movs	r2, #2
 8001082:	601a      	str	r2, [r3, #0]
				setTimer(2, 10000); // Timer 3
 8001084:	f242 7110 	movw	r1, #10000	; 0x2710
 8001088:	2002      	movs	r0, #2
 800108a:	f000 f8eb 	bl	8001264 <setTimer>
				clearTrafficLight();
 800108e:	f000 fa41 	bl	8001514 <clearTrafficLight>
				mode = 0;
 8001092:	4b22      	ldr	r3, [pc, #136]	; (800111c <fsm_manual+0x2f8>)
 8001094:	2200      	movs	r2, #0
 8001096:	601a      	str	r2, [r3, #0]
				// Adjust Time to the original, not save the updated value
				setRedTime(redValue);
 8001098:	4b23      	ldr	r3, [pc, #140]	; (8001128 <fsm_manual+0x304>)
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	4618      	mov	r0, r3
 800109e:	f000 fa0f 	bl	80014c0 <setRedTime>
				setYellowTime(yellowValue);
 80010a2:	4b23      	ldr	r3, [pc, #140]	; (8001130 <fsm_manual+0x30c>)
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	4618      	mov	r0, r3
 80010a8:	f000 fa18 	bl	80014dc <setYellowTime>
				setGreenTime(greenValue);
 80010ac:	4b22      	ldr	r3, [pc, #136]	; (8001138 <fsm_manual+0x314>)
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	4618      	mov	r0, r3
 80010b2:	f000 fa21 	bl	80014f8 <setGreenTime>
				updateBufferXLine(mode);
 80010b6:	4b19      	ldr	r3, [pc, #100]	; (800111c <fsm_manual+0x2f8>)
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	4618      	mov	r0, r3
 80010bc:	f7ff fa08 	bl	80004d0 <updateBufferXLine>
				updateBufferYLine(0);
 80010c0:	2000      	movs	r0, #0
 80010c2:	f7ff fa35 	bl	8000530 <updateBufferYLine>
				break;
 80010c6:	e03c      	b.n	8001142 <fsm_manual+0x31e>
			}
			if (isButtonPressed(1)) { // BTN2 pressed, update value
 80010c8:	2001      	movs	r0, #1
 80010ca:	f7ff fc45 	bl	8000958 <isButtonPressed>
 80010ce:	4603      	mov	r3, r0
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d007      	beq.n	80010e4 <fsm_manual+0x2c0>
				updateGreenTime();
 80010d4:	f000 f9bc 	bl	8001450 <updateGreenTime>
				updateBufferYLine(greenTime);
 80010d8:	4b16      	ldr	r3, [pc, #88]	; (8001134 <fsm_manual+0x310>)
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	4618      	mov	r0, r3
 80010de:	f7ff fa27 	bl	8000530 <updateBufferYLine>
				break;
 80010e2:	e02e      	b.n	8001142 <fsm_manual+0x31e>
			}
			if (isButtonPressed(2)) { // BTN3 pressed, save the value -> update Time
 80010e4:	2002      	movs	r0, #2
 80010e6:	f7ff fc37 	bl	8000958 <isButtonPressed>
 80010ea:	4603      	mov	r3, r0
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d027      	beq.n	8001140 <fsm_manual+0x31c>
				status = MAN;
 80010f0:	4b09      	ldr	r3, [pc, #36]	; (8001118 <fsm_manual+0x2f4>)
 80010f2:	2202      	movs	r2, #2
 80010f4:	601a      	str	r2, [r3, #0]
				setTimer(2, 10000); // Timer 3
 80010f6:	f242 7110 	movw	r1, #10000	; 0x2710
 80010fa:	2002      	movs	r0, #2
 80010fc:	f000 f8b2 	bl	8001264 <setTimer>
				clearTrafficLight();
 8001100:	f000 fa08 	bl	8001514 <clearTrafficLight>
				mode = 0;
 8001104:	4b05      	ldr	r3, [pc, #20]	; (800111c <fsm_manual+0x2f8>)
 8001106:	2200      	movs	r2, #0
 8001108:	601a      	str	r2, [r3, #0]
				break;
 800110a:	e01a      	b.n	8001142 <fsm_manual+0x31e>
			}
			break;
		}
		default: {
			break;
 800110c:	bf00      	nop
 800110e:	e018      	b.n	8001142 <fsm_manual+0x31e>
			break;
 8001110:	bf00      	nop
 8001112:	e016      	b.n	8001142 <fsm_manual+0x31e>
			break;
 8001114:	bf00      	nop
 8001116:	e014      	b.n	8001142 <fsm_manual+0x31e>
 8001118:	20000190 	.word	0x20000190
 800111c:	200001e0 	.word	0x200001e0
 8001120:	200001f0 	.word	0x200001f0
 8001124:	20000018 	.word	0x20000018
 8001128:	200001e4 	.word	0x200001e4
 800112c:	2000001c 	.word	0x2000001c
 8001130:	200001e8 	.word	0x200001e8
 8001134:	20000020 	.word	0x20000020
 8001138:	200001ec 	.word	0x200001ec
			break;
 800113c:	bf00      	nop
 800113e:	e000      	b.n	8001142 <fsm_manual+0x31e>
			break;
 8001140:	bf00      	nop
		}
	}
}
 8001142:	bf00      	nop
 8001144:	bd80      	pop	{r7, pc}
 8001146:	bf00      	nop

08001148 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001148:	b480      	push	{r7}
 800114a:	b085      	sub	sp, #20
 800114c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800114e:	4b15      	ldr	r3, [pc, #84]	; (80011a4 <HAL_MspInit+0x5c>)
 8001150:	699b      	ldr	r3, [r3, #24]
 8001152:	4a14      	ldr	r2, [pc, #80]	; (80011a4 <HAL_MspInit+0x5c>)
 8001154:	f043 0301 	orr.w	r3, r3, #1
 8001158:	6193      	str	r3, [r2, #24]
 800115a:	4b12      	ldr	r3, [pc, #72]	; (80011a4 <HAL_MspInit+0x5c>)
 800115c:	699b      	ldr	r3, [r3, #24]
 800115e:	f003 0301 	and.w	r3, r3, #1
 8001162:	60bb      	str	r3, [r7, #8]
 8001164:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001166:	4b0f      	ldr	r3, [pc, #60]	; (80011a4 <HAL_MspInit+0x5c>)
 8001168:	69db      	ldr	r3, [r3, #28]
 800116a:	4a0e      	ldr	r2, [pc, #56]	; (80011a4 <HAL_MspInit+0x5c>)
 800116c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001170:	61d3      	str	r3, [r2, #28]
 8001172:	4b0c      	ldr	r3, [pc, #48]	; (80011a4 <HAL_MspInit+0x5c>)
 8001174:	69db      	ldr	r3, [r3, #28]
 8001176:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800117a:	607b      	str	r3, [r7, #4]
 800117c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800117e:	4b0a      	ldr	r3, [pc, #40]	; (80011a8 <HAL_MspInit+0x60>)
 8001180:	685b      	ldr	r3, [r3, #4]
 8001182:	60fb      	str	r3, [r7, #12]
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800118a:	60fb      	str	r3, [r7, #12]
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001192:	60fb      	str	r3, [r7, #12]
 8001194:	4a04      	ldr	r2, [pc, #16]	; (80011a8 <HAL_MspInit+0x60>)
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800119a:	bf00      	nop
 800119c:	3714      	adds	r7, #20
 800119e:	46bd      	mov	sp, r7
 80011a0:	bc80      	pop	{r7}
 80011a2:	4770      	bx	lr
 80011a4:	40021000 	.word	0x40021000
 80011a8:	40010000 	.word	0x40010000

080011ac <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b084      	sub	sp, #16
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80011bc:	d113      	bne.n	80011e6 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80011be:	4b0c      	ldr	r3, [pc, #48]	; (80011f0 <HAL_TIM_Base_MspInit+0x44>)
 80011c0:	69db      	ldr	r3, [r3, #28]
 80011c2:	4a0b      	ldr	r2, [pc, #44]	; (80011f0 <HAL_TIM_Base_MspInit+0x44>)
 80011c4:	f043 0301 	orr.w	r3, r3, #1
 80011c8:	61d3      	str	r3, [r2, #28]
 80011ca:	4b09      	ldr	r3, [pc, #36]	; (80011f0 <HAL_TIM_Base_MspInit+0x44>)
 80011cc:	69db      	ldr	r3, [r3, #28]
 80011ce:	f003 0301 	and.w	r3, r3, #1
 80011d2:	60fb      	str	r3, [r7, #12]
 80011d4:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80011d6:	2200      	movs	r2, #0
 80011d8:	2100      	movs	r1, #0
 80011da:	201c      	movs	r0, #28
 80011dc:	f000 fba1 	bl	8001922 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80011e0:	201c      	movs	r0, #28
 80011e2:	f000 fbba 	bl	800195a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80011e6:	bf00      	nop
 80011e8:	3710      	adds	r7, #16
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bd80      	pop	{r7, pc}
 80011ee:	bf00      	nop
 80011f0:	40021000 	.word	0x40021000

080011f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011f4:	b480      	push	{r7}
 80011f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80011f8:	e7fe      	b.n	80011f8 <NMI_Handler+0x4>

080011fa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011fa:	b480      	push	{r7}
 80011fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011fe:	e7fe      	b.n	80011fe <HardFault_Handler+0x4>

08001200 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001200:	b480      	push	{r7}
 8001202:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001204:	e7fe      	b.n	8001204 <MemManage_Handler+0x4>

08001206 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001206:	b480      	push	{r7}
 8001208:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800120a:	e7fe      	b.n	800120a <BusFault_Handler+0x4>

0800120c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800120c:	b480      	push	{r7}
 800120e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001210:	e7fe      	b.n	8001210 <UsageFault_Handler+0x4>

08001212 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001212:	b480      	push	{r7}
 8001214:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001216:	bf00      	nop
 8001218:	46bd      	mov	sp, r7
 800121a:	bc80      	pop	{r7}
 800121c:	4770      	bx	lr

0800121e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800121e:	b480      	push	{r7}
 8001220:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001222:	bf00      	nop
 8001224:	46bd      	mov	sp, r7
 8001226:	bc80      	pop	{r7}
 8001228:	4770      	bx	lr

0800122a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800122a:	b480      	push	{r7}
 800122c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800122e:	bf00      	nop
 8001230:	46bd      	mov	sp, r7
 8001232:	bc80      	pop	{r7}
 8001234:	4770      	bx	lr

08001236 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001236:	b580      	push	{r7, lr}
 8001238:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800123a:	f000 fa7f 	bl	800173c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800123e:	bf00      	nop
 8001240:	bd80      	pop	{r7, pc}
	...

08001244 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001248:	4802      	ldr	r0, [pc, #8]	; (8001254 <TIM2_IRQHandler+0x10>)
 800124a:	f001 fa0b 	bl	8002664 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800124e:	bf00      	nop
 8001250:	bd80      	pop	{r7, pc}
 8001252:	bf00      	nop
 8001254:	20000194 	.word	0x20000194

08001258 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001258:	b480      	push	{r7}
 800125a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800125c:	bf00      	nop
 800125e:	46bd      	mov	sp, r7
 8001260:	bc80      	pop	{r7}
 8001262:	4770      	bx	lr

08001264 <setTimer>:
 *      Author: Thảo Quảng
 */
#include "timer.h"

int TIMER_CYCLE = 1;
void setTimer(int index, int counter){
 8001264:	b480      	push	{r7}
 8001266:	b083      	sub	sp, #12
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
 800126c:	6039      	str	r1, [r7, #0]
	timer_flag[index] = 0;
 800126e:	4a09      	ldr	r2, [pc, #36]	; (8001294 <setTimer+0x30>)
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	2100      	movs	r1, #0
 8001274:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	timer_counter[index] = counter / TIMER_CYCLE;
 8001278:	4b07      	ldr	r3, [pc, #28]	; (8001298 <setTimer+0x34>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	683a      	ldr	r2, [r7, #0]
 800127e:	fb92 f2f3 	sdiv	r2, r2, r3
 8001282:	4906      	ldr	r1, [pc, #24]	; (800129c <setTimer+0x38>)
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800128a:	bf00      	nop
 800128c:	370c      	adds	r7, #12
 800128e:	46bd      	mov	sp, r7
 8001290:	bc80      	pop	{r7}
 8001292:	4770      	bx	lr
 8001294:	200001f0 	.word	0x200001f0
 8001298:	20000014 	.word	0x20000014
 800129c:	20000218 	.word	0x20000218

080012a0 <timerRun>:

int timer_flag[10];
int timer_counter[10];
void timerRun(){
 80012a0:	b480      	push	{r7}
 80012a2:	b083      	sub	sp, #12
 80012a4:	af00      	add	r7, sp, #0
	for (int i = 0; i < 10; i++) {
 80012a6:	2300      	movs	r3, #0
 80012a8:	607b      	str	r3, [r7, #4]
 80012aa:	e01c      	b.n	80012e6 <timerRun+0x46>
		if (timer_counter[i] >= 0) {
 80012ac:	4a12      	ldr	r2, [pc, #72]	; (80012f8 <timerRun+0x58>)
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	db13      	blt.n	80012e0 <timerRun+0x40>
			timer_counter[i]--;
 80012b8:	4a0f      	ldr	r2, [pc, #60]	; (80012f8 <timerRun+0x58>)
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012c0:	1e5a      	subs	r2, r3, #1
 80012c2:	490d      	ldr	r1, [pc, #52]	; (80012f8 <timerRun+0x58>)
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			if (timer_counter[i] <= 0) {
 80012ca:	4a0b      	ldr	r2, [pc, #44]	; (80012f8 <timerRun+0x58>)
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	dc04      	bgt.n	80012e0 <timerRun+0x40>
				timer_flag[i] = 1;
 80012d6:	4a09      	ldr	r2, [pc, #36]	; (80012fc <timerRun+0x5c>)
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	2101      	movs	r1, #1
 80012dc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i = 0; i < 10; i++) {
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	3301      	adds	r3, #1
 80012e4:	607b      	str	r3, [r7, #4]
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	2b09      	cmp	r3, #9
 80012ea:	dddf      	ble.n	80012ac <timerRun+0xc>
			}
		}
	}
}
 80012ec:	bf00      	nop
 80012ee:	bf00      	nop
 80012f0:	370c      	adds	r7, #12
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bc80      	pop	{r7}
 80012f6:	4770      	bx	lr
 80012f8:	20000218 	.word	0x20000218
 80012fc:	200001f0 	.word	0x200001f0

08001300 <trafficGreenRed>:

int redTime = 5;
int yellowTime = 2;
int greenTime = 3;

void trafficGreenRed() {
 8001300:	b580      	push	{r7, lr}
 8001302:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, GPIO_PIN_RESET);
 8001304:	2200      	movs	r2, #0
 8001306:	2108      	movs	r1, #8
 8001308:	480e      	ldr	r0, [pc, #56]	; (8001344 <trafficGreenRed+0x44>)
 800130a:	f000 fcec 	bl	8001ce6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED5_GPIO_Port, LED5_Pin, GPIO_PIN_RESET);
 800130e:	2200      	movs	r2, #0
 8001310:	2110      	movs	r1, #16
 8001312:	480c      	ldr	r0, [pc, #48]	; (8001344 <trafficGreenRed+0x44>)
 8001314:	f000 fce7 	bl	8001ce6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED6_GPIO_Port, LED6_Pin, GPIO_PIN_SET);
 8001318:	2201      	movs	r2, #1
 800131a:	2120      	movs	r1, #32
 800131c:	4809      	ldr	r0, [pc, #36]	; (8001344 <trafficGreenRed+0x44>)
 800131e:	f000 fce2 	bl	8001ce6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 8001322:	2201      	movs	r2, #1
 8001324:	2101      	movs	r1, #1
 8001326:	4807      	ldr	r0, [pc, #28]	; (8001344 <trafficGreenRed+0x44>)
 8001328:	f000 fcdd 	bl	8001ce6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 800132c:	2200      	movs	r2, #0
 800132e:	2102      	movs	r1, #2
 8001330:	4804      	ldr	r0, [pc, #16]	; (8001344 <trafficGreenRed+0x44>)
 8001332:	f000 fcd8 	bl	8001ce6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET);
 8001336:	2200      	movs	r2, #0
 8001338:	2104      	movs	r1, #4
 800133a:	4802      	ldr	r0, [pc, #8]	; (8001344 <trafficGreenRed+0x44>)
 800133c:	f000 fcd3 	bl	8001ce6 <HAL_GPIO_WritePin>
}
 8001340:	bf00      	nop
 8001342:	bd80      	pop	{r7, pc}
 8001344:	40011000 	.word	0x40011000

08001348 <trafficYellowRed>:
void trafficYellowRed() {
 8001348:	b580      	push	{r7, lr}
 800134a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, GPIO_PIN_RESET);
 800134c:	2200      	movs	r2, #0
 800134e:	2108      	movs	r1, #8
 8001350:	480e      	ldr	r0, [pc, #56]	; (800138c <trafficYellowRed+0x44>)
 8001352:	f000 fcc8 	bl	8001ce6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED5_GPIO_Port, LED5_Pin, GPIO_PIN_SET);
 8001356:	2201      	movs	r2, #1
 8001358:	2110      	movs	r1, #16
 800135a:	480c      	ldr	r0, [pc, #48]	; (800138c <trafficYellowRed+0x44>)
 800135c:	f000 fcc3 	bl	8001ce6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED6_GPIO_Port, LED6_Pin, GPIO_PIN_RESET);
 8001360:	2200      	movs	r2, #0
 8001362:	2120      	movs	r1, #32
 8001364:	4809      	ldr	r0, [pc, #36]	; (800138c <trafficYellowRed+0x44>)
 8001366:	f000 fcbe 	bl	8001ce6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 800136a:	2201      	movs	r2, #1
 800136c:	2101      	movs	r1, #1
 800136e:	4807      	ldr	r0, [pc, #28]	; (800138c <trafficYellowRed+0x44>)
 8001370:	f000 fcb9 	bl	8001ce6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 8001374:	2200      	movs	r2, #0
 8001376:	2102      	movs	r1, #2
 8001378:	4804      	ldr	r0, [pc, #16]	; (800138c <trafficYellowRed+0x44>)
 800137a:	f000 fcb4 	bl	8001ce6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET);
 800137e:	2200      	movs	r2, #0
 8001380:	2104      	movs	r1, #4
 8001382:	4802      	ldr	r0, [pc, #8]	; (800138c <trafficYellowRed+0x44>)
 8001384:	f000 fcaf 	bl	8001ce6 <HAL_GPIO_WritePin>
}
 8001388:	bf00      	nop
 800138a:	bd80      	pop	{r7, pc}
 800138c:	40011000 	.word	0x40011000

08001390 <trafficRedGreen>:
void trafficRedGreen() {
 8001390:	b580      	push	{r7, lr}
 8001392:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, GPIO_PIN_SET);
 8001394:	2201      	movs	r2, #1
 8001396:	2108      	movs	r1, #8
 8001398:	480e      	ldr	r0, [pc, #56]	; (80013d4 <trafficRedGreen+0x44>)
 800139a:	f000 fca4 	bl	8001ce6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED5_GPIO_Port, LED5_Pin, GPIO_PIN_RESET);
 800139e:	2200      	movs	r2, #0
 80013a0:	2110      	movs	r1, #16
 80013a2:	480c      	ldr	r0, [pc, #48]	; (80013d4 <trafficRedGreen+0x44>)
 80013a4:	f000 fc9f 	bl	8001ce6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED6_GPIO_Port, LED6_Pin, GPIO_PIN_RESET);
 80013a8:	2200      	movs	r2, #0
 80013aa:	2120      	movs	r1, #32
 80013ac:	4809      	ldr	r0, [pc, #36]	; (80013d4 <trafficRedGreen+0x44>)
 80013ae:	f000 fc9a 	bl	8001ce6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 80013b2:	2200      	movs	r2, #0
 80013b4:	2101      	movs	r1, #1
 80013b6:	4807      	ldr	r0, [pc, #28]	; (80013d4 <trafficRedGreen+0x44>)
 80013b8:	f000 fc95 	bl	8001ce6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 80013bc:	2200      	movs	r2, #0
 80013be:	2102      	movs	r1, #2
 80013c0:	4804      	ldr	r0, [pc, #16]	; (80013d4 <trafficRedGreen+0x44>)
 80013c2:	f000 fc90 	bl	8001ce6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_SET);
 80013c6:	2201      	movs	r2, #1
 80013c8:	2104      	movs	r1, #4
 80013ca:	4802      	ldr	r0, [pc, #8]	; (80013d4 <trafficRedGreen+0x44>)
 80013cc:	f000 fc8b 	bl	8001ce6 <HAL_GPIO_WritePin>
}
 80013d0:	bf00      	nop
 80013d2:	bd80      	pop	{r7, pc}
 80013d4:	40011000 	.word	0x40011000

080013d8 <trafficRedYellow>:
void trafficRedYellow() {
 80013d8:	b580      	push	{r7, lr}
 80013da:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, GPIO_PIN_SET);
 80013dc:	2201      	movs	r2, #1
 80013de:	2108      	movs	r1, #8
 80013e0:	480e      	ldr	r0, [pc, #56]	; (800141c <trafficRedYellow+0x44>)
 80013e2:	f000 fc80 	bl	8001ce6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED5_GPIO_Port, LED5_Pin, GPIO_PIN_RESET);
 80013e6:	2200      	movs	r2, #0
 80013e8:	2110      	movs	r1, #16
 80013ea:	480c      	ldr	r0, [pc, #48]	; (800141c <trafficRedYellow+0x44>)
 80013ec:	f000 fc7b 	bl	8001ce6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED6_GPIO_Port, LED6_Pin, GPIO_PIN_RESET);
 80013f0:	2200      	movs	r2, #0
 80013f2:	2120      	movs	r1, #32
 80013f4:	4809      	ldr	r0, [pc, #36]	; (800141c <trafficRedYellow+0x44>)
 80013f6:	f000 fc76 	bl	8001ce6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 80013fa:	2200      	movs	r2, #0
 80013fc:	2101      	movs	r1, #1
 80013fe:	4807      	ldr	r0, [pc, #28]	; (800141c <trafficRedYellow+0x44>)
 8001400:	f000 fc71 	bl	8001ce6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
 8001404:	2201      	movs	r2, #1
 8001406:	2102      	movs	r1, #2
 8001408:	4804      	ldr	r0, [pc, #16]	; (800141c <trafficRedYellow+0x44>)
 800140a:	f000 fc6c 	bl	8001ce6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET);
 800140e:	2200      	movs	r2, #0
 8001410:	2104      	movs	r1, #4
 8001412:	4802      	ldr	r0, [pc, #8]	; (800141c <trafficRedYellow+0x44>)
 8001414:	f000 fc67 	bl	8001ce6 <HAL_GPIO_WritePin>
}
 8001418:	bf00      	nop
 800141a:	bd80      	pop	{r7, pc}
 800141c:	40011000 	.word	0x40011000

08001420 <updateRedTime>:

void updateRedTime() {
 8001420:	b480      	push	{r7}
 8001422:	af00      	add	r7, sp, #0
	if (redTime < 99) {
 8001424:	4b08      	ldr	r3, [pc, #32]	; (8001448 <updateRedTime+0x28>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	2b62      	cmp	r3, #98	; 0x62
 800142a:	dc09      	bgt.n	8001440 <updateRedTime+0x20>
		redTime++;
 800142c:	4b06      	ldr	r3, [pc, #24]	; (8001448 <updateRedTime+0x28>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	3301      	adds	r3, #1
 8001432:	4a05      	ldr	r2, [pc, #20]	; (8001448 <updateRedTime+0x28>)
 8001434:	6013      	str	r3, [r2, #0]
		greenTime++;
 8001436:	4b05      	ldr	r3, [pc, #20]	; (800144c <updateRedTime+0x2c>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	3301      	adds	r3, #1
 800143c:	4a03      	ldr	r2, [pc, #12]	; (800144c <updateRedTime+0x2c>)
 800143e:	6013      	str	r3, [r2, #0]
	}
}
 8001440:	bf00      	nop
 8001442:	46bd      	mov	sp, r7
 8001444:	bc80      	pop	{r7}
 8001446:	4770      	bx	lr
 8001448:	20000018 	.word	0x20000018
 800144c:	20000020 	.word	0x20000020

08001450 <updateGreenTime>:
void updateGreenTime() {
 8001450:	b480      	push	{r7}
 8001452:	af00      	add	r7, sp, #0
	if (redTime < 99) {
 8001454:	4b08      	ldr	r3, [pc, #32]	; (8001478 <updateGreenTime+0x28>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	2b62      	cmp	r3, #98	; 0x62
 800145a:	dc09      	bgt.n	8001470 <updateGreenTime+0x20>
		greenTime++;
 800145c:	4b07      	ldr	r3, [pc, #28]	; (800147c <updateGreenTime+0x2c>)
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	3301      	adds	r3, #1
 8001462:	4a06      	ldr	r2, [pc, #24]	; (800147c <updateGreenTime+0x2c>)
 8001464:	6013      	str	r3, [r2, #0]
		redTime++;
 8001466:	4b04      	ldr	r3, [pc, #16]	; (8001478 <updateGreenTime+0x28>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	3301      	adds	r3, #1
 800146c:	4a02      	ldr	r2, [pc, #8]	; (8001478 <updateGreenTime+0x28>)
 800146e:	6013      	str	r3, [r2, #0]
	}
}
 8001470:	bf00      	nop
 8001472:	46bd      	mov	sp, r7
 8001474:	bc80      	pop	{r7}
 8001476:	4770      	bx	lr
 8001478:	20000018 	.word	0x20000018
 800147c:	20000020 	.word	0x20000020

08001480 <updateYellowTime>:
void updateYellowTime() {
 8001480:	b480      	push	{r7}
 8001482:	af00      	add	r7, sp, #0
	if (redTime < 99 && yellowTime < greenTime) {
 8001484:	4b0b      	ldr	r3, [pc, #44]	; (80014b4 <updateYellowTime+0x34>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	2b62      	cmp	r3, #98	; 0x62
 800148a:	dc0f      	bgt.n	80014ac <updateYellowTime+0x2c>
 800148c:	4b0a      	ldr	r3, [pc, #40]	; (80014b8 <updateYellowTime+0x38>)
 800148e:	681a      	ldr	r2, [r3, #0]
 8001490:	4b0a      	ldr	r3, [pc, #40]	; (80014bc <updateYellowTime+0x3c>)
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	429a      	cmp	r2, r3
 8001496:	da09      	bge.n	80014ac <updateYellowTime+0x2c>
		yellowTime++;
 8001498:	4b07      	ldr	r3, [pc, #28]	; (80014b8 <updateYellowTime+0x38>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	3301      	adds	r3, #1
 800149e:	4a06      	ldr	r2, [pc, #24]	; (80014b8 <updateYellowTime+0x38>)
 80014a0:	6013      	str	r3, [r2, #0]
		redTime++;
 80014a2:	4b04      	ldr	r3, [pc, #16]	; (80014b4 <updateYellowTime+0x34>)
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	3301      	adds	r3, #1
 80014a8:	4a02      	ldr	r2, [pc, #8]	; (80014b4 <updateYellowTime+0x34>)
 80014aa:	6013      	str	r3, [r2, #0]
	}
}
 80014ac:	bf00      	nop
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bc80      	pop	{r7}
 80014b2:	4770      	bx	lr
 80014b4:	20000018 	.word	0x20000018
 80014b8:	2000001c 	.word	0x2000001c
 80014bc:	20000020 	.word	0x20000020

080014c0 <setRedTime>:

void setRedTime(int redValue) {
 80014c0:	b480      	push	{r7}
 80014c2:	b083      	sub	sp, #12
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
	redTime = redValue;
 80014c8:	4a03      	ldr	r2, [pc, #12]	; (80014d8 <setRedTime+0x18>)
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	6013      	str	r3, [r2, #0]
}
 80014ce:	bf00      	nop
 80014d0:	370c      	adds	r7, #12
 80014d2:	46bd      	mov	sp, r7
 80014d4:	bc80      	pop	{r7}
 80014d6:	4770      	bx	lr
 80014d8:	20000018 	.word	0x20000018

080014dc <setYellowTime>:
void setYellowTime(int yellowValue) {
 80014dc:	b480      	push	{r7}
 80014de:	b083      	sub	sp, #12
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
	yellowTime = yellowValue;
 80014e4:	4a03      	ldr	r2, [pc, #12]	; (80014f4 <setYellowTime+0x18>)
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	6013      	str	r3, [r2, #0]
}
 80014ea:	bf00      	nop
 80014ec:	370c      	adds	r7, #12
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bc80      	pop	{r7}
 80014f2:	4770      	bx	lr
 80014f4:	2000001c 	.word	0x2000001c

080014f8 <setGreenTime>:
void setGreenTime(int greenValue) {
 80014f8:	b480      	push	{r7}
 80014fa:	b083      	sub	sp, #12
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
	greenTime = greenValue;
 8001500:	4a03      	ldr	r2, [pc, #12]	; (8001510 <setGreenTime+0x18>)
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	6013      	str	r3, [r2, #0]
}
 8001506:	bf00      	nop
 8001508:	370c      	adds	r7, #12
 800150a:	46bd      	mov	sp, r7
 800150c:	bc80      	pop	{r7}
 800150e:	4770      	bx	lr
 8001510:	20000020 	.word	0x20000020

08001514 <clearTrafficLight>:

void clearTrafficLight() {
 8001514:	b580      	push	{r7, lr}
 8001516:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, GPIO_PIN_RESET);
 8001518:	2200      	movs	r2, #0
 800151a:	2108      	movs	r1, #8
 800151c:	480e      	ldr	r0, [pc, #56]	; (8001558 <clearTrafficLight+0x44>)
 800151e:	f000 fbe2 	bl	8001ce6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED5_GPIO_Port, LED5_Pin, GPIO_PIN_RESET);
 8001522:	2200      	movs	r2, #0
 8001524:	2110      	movs	r1, #16
 8001526:	480c      	ldr	r0, [pc, #48]	; (8001558 <clearTrafficLight+0x44>)
 8001528:	f000 fbdd 	bl	8001ce6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED6_GPIO_Port, LED6_Pin, GPIO_PIN_RESET);
 800152c:	2200      	movs	r2, #0
 800152e:	2120      	movs	r1, #32
 8001530:	4809      	ldr	r0, [pc, #36]	; (8001558 <clearTrafficLight+0x44>)
 8001532:	f000 fbd8 	bl	8001ce6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8001536:	2200      	movs	r2, #0
 8001538:	2101      	movs	r1, #1
 800153a:	4807      	ldr	r0, [pc, #28]	; (8001558 <clearTrafficLight+0x44>)
 800153c:	f000 fbd3 	bl	8001ce6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 8001540:	2200      	movs	r2, #0
 8001542:	2102      	movs	r1, #2
 8001544:	4804      	ldr	r0, [pc, #16]	; (8001558 <clearTrafficLight+0x44>)
 8001546:	f000 fbce 	bl	8001ce6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET);
 800154a:	2200      	movs	r2, #0
 800154c:	2104      	movs	r1, #4
 800154e:	4802      	ldr	r0, [pc, #8]	; (8001558 <clearTrafficLight+0x44>)
 8001550:	f000 fbc9 	bl	8001ce6 <HAL_GPIO_WritePin>
}
 8001554:	bf00      	nop
 8001556:	bd80      	pop	{r7, pc}
 8001558:	40011000 	.word	0x40011000

0800155c <blinkRedLed>:

void blinkRedLed() {
 800155c:	b580      	push	{r7, lr}
 800155e:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LED4_GPIO_Port, LED4_Pin);
 8001560:	2108      	movs	r1, #8
 8001562:	480e      	ldr	r0, [pc, #56]	; (800159c <blinkRedLed+0x40>)
 8001564:	f000 fbd7 	bl	8001d16 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 8001568:	2101      	movs	r1, #1
 800156a:	480c      	ldr	r0, [pc, #48]	; (800159c <blinkRedLed+0x40>)
 800156c:	f000 fbd3 	bl	8001d16 <HAL_GPIO_TogglePin>
	HAL_GPIO_WritePin(LED5_GPIO_Port, LED5_Pin, GPIO_PIN_RESET);
 8001570:	2200      	movs	r2, #0
 8001572:	2110      	movs	r1, #16
 8001574:	4809      	ldr	r0, [pc, #36]	; (800159c <blinkRedLed+0x40>)
 8001576:	f000 fbb6 	bl	8001ce6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED6_GPIO_Port, LED6_Pin, GPIO_PIN_RESET);
 800157a:	2200      	movs	r2, #0
 800157c:	2120      	movs	r1, #32
 800157e:	4807      	ldr	r0, [pc, #28]	; (800159c <blinkRedLed+0x40>)
 8001580:	f000 fbb1 	bl	8001ce6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 8001584:	2200      	movs	r2, #0
 8001586:	2102      	movs	r1, #2
 8001588:	4804      	ldr	r0, [pc, #16]	; (800159c <blinkRedLed+0x40>)
 800158a:	f000 fbac 	bl	8001ce6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET);
 800158e:	2200      	movs	r2, #0
 8001590:	2104      	movs	r1, #4
 8001592:	4802      	ldr	r0, [pc, #8]	; (800159c <blinkRedLed+0x40>)
 8001594:	f000 fba7 	bl	8001ce6 <HAL_GPIO_WritePin>
}
 8001598:	bf00      	nop
 800159a:	bd80      	pop	{r7, pc}
 800159c:	40011000 	.word	0x40011000

080015a0 <blinkYellowLed>:
void blinkYellowLed() {
 80015a0:	b580      	push	{r7, lr}
 80015a2:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LED5_GPIO_Port, LED5_Pin);
 80015a4:	2110      	movs	r1, #16
 80015a6:	480e      	ldr	r0, [pc, #56]	; (80015e0 <blinkYellowLed+0x40>)
 80015a8:	f000 fbb5 	bl	8001d16 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 80015ac:	2102      	movs	r1, #2
 80015ae:	480c      	ldr	r0, [pc, #48]	; (80015e0 <blinkYellowLed+0x40>)
 80015b0:	f000 fbb1 	bl	8001d16 <HAL_GPIO_TogglePin>
	HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, GPIO_PIN_RESET);
 80015b4:	2200      	movs	r2, #0
 80015b6:	2108      	movs	r1, #8
 80015b8:	4809      	ldr	r0, [pc, #36]	; (80015e0 <blinkYellowLed+0x40>)
 80015ba:	f000 fb94 	bl	8001ce6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED6_GPIO_Port, LED6_Pin, GPIO_PIN_RESET);
 80015be:	2200      	movs	r2, #0
 80015c0:	2120      	movs	r1, #32
 80015c2:	4807      	ldr	r0, [pc, #28]	; (80015e0 <blinkYellowLed+0x40>)
 80015c4:	f000 fb8f 	bl	8001ce6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 80015c8:	2200      	movs	r2, #0
 80015ca:	2101      	movs	r1, #1
 80015cc:	4804      	ldr	r0, [pc, #16]	; (80015e0 <blinkYellowLed+0x40>)
 80015ce:	f000 fb8a 	bl	8001ce6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET);
 80015d2:	2200      	movs	r2, #0
 80015d4:	2104      	movs	r1, #4
 80015d6:	4802      	ldr	r0, [pc, #8]	; (80015e0 <blinkYellowLed+0x40>)
 80015d8:	f000 fb85 	bl	8001ce6 <HAL_GPIO_WritePin>
}
 80015dc:	bf00      	nop
 80015de:	bd80      	pop	{r7, pc}
 80015e0:	40011000 	.word	0x40011000

080015e4 <blinkGreenLed>:
void blinkGreenLed() {
 80015e4:	b580      	push	{r7, lr}
 80015e6:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LED6_GPIO_Port, LED6_Pin);
 80015e8:	2120      	movs	r1, #32
 80015ea:	480e      	ldr	r0, [pc, #56]	; (8001624 <blinkGreenLed+0x40>)
 80015ec:	f000 fb93 	bl	8001d16 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin);
 80015f0:	2104      	movs	r1, #4
 80015f2:	480c      	ldr	r0, [pc, #48]	; (8001624 <blinkGreenLed+0x40>)
 80015f4:	f000 fb8f 	bl	8001d16 <HAL_GPIO_TogglePin>
	HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, GPIO_PIN_RESET);
 80015f8:	2200      	movs	r2, #0
 80015fa:	2108      	movs	r1, #8
 80015fc:	4809      	ldr	r0, [pc, #36]	; (8001624 <blinkGreenLed+0x40>)
 80015fe:	f000 fb72 	bl	8001ce6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED5_GPIO_Port, LED5_Pin, GPIO_PIN_RESET);
 8001602:	2200      	movs	r2, #0
 8001604:	2110      	movs	r1, #16
 8001606:	4807      	ldr	r0, [pc, #28]	; (8001624 <blinkGreenLed+0x40>)
 8001608:	f000 fb6d 	bl	8001ce6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 800160c:	2200      	movs	r2, #0
 800160e:	2101      	movs	r1, #1
 8001610:	4804      	ldr	r0, [pc, #16]	; (8001624 <blinkGreenLed+0x40>)
 8001612:	f000 fb68 	bl	8001ce6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 8001616:	2200      	movs	r2, #0
 8001618:	2102      	movs	r1, #2
 800161a:	4802      	ldr	r0, [pc, #8]	; (8001624 <blinkGreenLed+0x40>)
 800161c:	f000 fb63 	bl	8001ce6 <HAL_GPIO_WritePin>
}
 8001620:	bf00      	nop
 8001622:	bd80      	pop	{r7, pc}
 8001624:	40011000 	.word	0x40011000

08001628 <blinkAllLed>:

void blinkAllLed() {
 8001628:	b580      	push	{r7, lr}
 800162a:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LED4_GPIO_Port, LED4_Pin);
 800162c:	2108      	movs	r1, #8
 800162e:	480c      	ldr	r0, [pc, #48]	; (8001660 <blinkAllLed+0x38>)
 8001630:	f000 fb71 	bl	8001d16 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 8001634:	2101      	movs	r1, #1
 8001636:	480a      	ldr	r0, [pc, #40]	; (8001660 <blinkAllLed+0x38>)
 8001638:	f000 fb6d 	bl	8001d16 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(LED5_GPIO_Port, LED5_Pin);
 800163c:	2110      	movs	r1, #16
 800163e:	4808      	ldr	r0, [pc, #32]	; (8001660 <blinkAllLed+0x38>)
 8001640:	f000 fb69 	bl	8001d16 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 8001644:	2102      	movs	r1, #2
 8001646:	4806      	ldr	r0, [pc, #24]	; (8001660 <blinkAllLed+0x38>)
 8001648:	f000 fb65 	bl	8001d16 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(LED6_GPIO_Port, LED6_Pin);
 800164c:	2120      	movs	r1, #32
 800164e:	4804      	ldr	r0, [pc, #16]	; (8001660 <blinkAllLed+0x38>)
 8001650:	f000 fb61 	bl	8001d16 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin);
 8001654:	2104      	movs	r1, #4
 8001656:	4802      	ldr	r0, [pc, #8]	; (8001660 <blinkAllLed+0x38>)
 8001658:	f000 fb5d 	bl	8001d16 <HAL_GPIO_TogglePin>
}
 800165c:	bf00      	nop
 800165e:	bd80      	pop	{r7, pc}
 8001660:	40011000 	.word	0x40011000

08001664 <Reset_Handler>:
 8001664:	f7ff fdf8 	bl	8001258 <SystemInit>
 8001668:	480b      	ldr	r0, [pc, #44]	; (8001698 <LoopFillZerobss+0xe>)
 800166a:	490c      	ldr	r1, [pc, #48]	; (800169c <LoopFillZerobss+0x12>)
 800166c:	4a0c      	ldr	r2, [pc, #48]	; (80016a0 <LoopFillZerobss+0x16>)
 800166e:	2300      	movs	r3, #0
 8001670:	e002      	b.n	8001678 <LoopCopyDataInit>

08001672 <CopyDataInit>:
 8001672:	58d4      	ldr	r4, [r2, r3]
 8001674:	50c4      	str	r4, [r0, r3]
 8001676:	3304      	adds	r3, #4

08001678 <LoopCopyDataInit>:
 8001678:	18c4      	adds	r4, r0, r3
 800167a:	428c      	cmp	r4, r1
 800167c:	d3f9      	bcc.n	8001672 <CopyDataInit>
 800167e:	4a09      	ldr	r2, [pc, #36]	; (80016a4 <LoopFillZerobss+0x1a>)
 8001680:	4c09      	ldr	r4, [pc, #36]	; (80016a8 <LoopFillZerobss+0x1e>)
 8001682:	2300      	movs	r3, #0
 8001684:	e001      	b.n	800168a <LoopFillZerobss>

08001686 <FillZerobss>:
 8001686:	6013      	str	r3, [r2, #0]
 8001688:	3204      	adds	r2, #4

0800168a <LoopFillZerobss>:
 800168a:	42a2      	cmp	r2, r4
 800168c:	d3fb      	bcc.n	8001686 <FillZerobss>
 800168e:	f001 fb67 	bl	8002d60 <__libc_init_array>
 8001692:	f7ff fa6b 	bl	8000b6c <main>
 8001696:	4770      	bx	lr
 8001698:	20000000 	.word	0x20000000
 800169c:	2000002c 	.word	0x2000002c
 80016a0:	08002dec 	.word	0x08002dec
 80016a4:	2000002c 	.word	0x2000002c
 80016a8:	20000244 	.word	0x20000244

080016ac <ADC1_2_IRQHandler>:
 80016ac:	e7fe      	b.n	80016ac <ADC1_2_IRQHandler>
	...

080016b0 <HAL_Init>:
 80016b0:	b580      	push	{r7, lr}
 80016b2:	af00      	add	r7, sp, #0
 80016b4:	4b08      	ldr	r3, [pc, #32]	; (80016d8 <HAL_Init+0x28>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	4a07      	ldr	r2, [pc, #28]	; (80016d8 <HAL_Init+0x28>)
 80016ba:	f043 0310 	orr.w	r3, r3, #16
 80016be:	6013      	str	r3, [r2, #0]
 80016c0:	2003      	movs	r0, #3
 80016c2:	f000 f923 	bl	800190c <HAL_NVIC_SetPriorityGrouping>
 80016c6:	200f      	movs	r0, #15
 80016c8:	f000 f808 	bl	80016dc <HAL_InitTick>
 80016cc:	f7ff fd3c 	bl	8001148 <HAL_MspInit>
 80016d0:	2300      	movs	r3, #0
 80016d2:	4618      	mov	r0, r3
 80016d4:	bd80      	pop	{r7, pc}
 80016d6:	bf00      	nop
 80016d8:	40022000 	.word	0x40022000

080016dc <HAL_InitTick>:
 80016dc:	b580      	push	{r7, lr}
 80016de:	b082      	sub	sp, #8
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
 80016e4:	4b12      	ldr	r3, [pc, #72]	; (8001730 <HAL_InitTick+0x54>)
 80016e6:	681a      	ldr	r2, [r3, #0]
 80016e8:	4b12      	ldr	r3, [pc, #72]	; (8001734 <HAL_InitTick+0x58>)
 80016ea:	781b      	ldrb	r3, [r3, #0]
 80016ec:	4619      	mov	r1, r3
 80016ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016f2:	fbb3 f3f1 	udiv	r3, r3, r1
 80016f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80016fa:	4618      	mov	r0, r3
 80016fc:	f000 f93b 	bl	8001976 <HAL_SYSTICK_Config>
 8001700:	4603      	mov	r3, r0
 8001702:	2b00      	cmp	r3, #0
 8001704:	d001      	beq.n	800170a <HAL_InitTick+0x2e>
 8001706:	2301      	movs	r3, #1
 8001708:	e00e      	b.n	8001728 <HAL_InitTick+0x4c>
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	2b0f      	cmp	r3, #15
 800170e:	d80a      	bhi.n	8001726 <HAL_InitTick+0x4a>
 8001710:	2200      	movs	r2, #0
 8001712:	6879      	ldr	r1, [r7, #4]
 8001714:	f04f 30ff 	mov.w	r0, #4294967295
 8001718:	f000 f903 	bl	8001922 <HAL_NVIC_SetPriority>
 800171c:	4a06      	ldr	r2, [pc, #24]	; (8001738 <HAL_InitTick+0x5c>)
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	6013      	str	r3, [r2, #0]
 8001722:	2300      	movs	r3, #0
 8001724:	e000      	b.n	8001728 <HAL_InitTick+0x4c>
 8001726:	2301      	movs	r3, #1
 8001728:	4618      	mov	r0, r3
 800172a:	3708      	adds	r7, #8
 800172c:	46bd      	mov	sp, r7
 800172e:	bd80      	pop	{r7, pc}
 8001730:	20000010 	.word	0x20000010
 8001734:	20000028 	.word	0x20000028
 8001738:	20000024 	.word	0x20000024

0800173c <HAL_IncTick>:
 800173c:	b480      	push	{r7}
 800173e:	af00      	add	r7, sp, #0
 8001740:	4b05      	ldr	r3, [pc, #20]	; (8001758 <HAL_IncTick+0x1c>)
 8001742:	781b      	ldrb	r3, [r3, #0]
 8001744:	461a      	mov	r2, r3
 8001746:	4b05      	ldr	r3, [pc, #20]	; (800175c <HAL_IncTick+0x20>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	4413      	add	r3, r2
 800174c:	4a03      	ldr	r2, [pc, #12]	; (800175c <HAL_IncTick+0x20>)
 800174e:	6013      	str	r3, [r2, #0]
 8001750:	bf00      	nop
 8001752:	46bd      	mov	sp, r7
 8001754:	bc80      	pop	{r7}
 8001756:	4770      	bx	lr
 8001758:	20000028 	.word	0x20000028
 800175c:	20000240 	.word	0x20000240

08001760 <HAL_GetTick>:
 8001760:	b480      	push	{r7}
 8001762:	af00      	add	r7, sp, #0
 8001764:	4b02      	ldr	r3, [pc, #8]	; (8001770 <HAL_GetTick+0x10>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	4618      	mov	r0, r3
 800176a:	46bd      	mov	sp, r7
 800176c:	bc80      	pop	{r7}
 800176e:	4770      	bx	lr
 8001770:	20000240 	.word	0x20000240

08001774 <__NVIC_SetPriorityGrouping>:
 8001774:	b480      	push	{r7}
 8001776:	b085      	sub	sp, #20
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	f003 0307 	and.w	r3, r3, #7
 8001782:	60fb      	str	r3, [r7, #12]
 8001784:	4b0c      	ldr	r3, [pc, #48]	; (80017b8 <__NVIC_SetPriorityGrouping+0x44>)
 8001786:	68db      	ldr	r3, [r3, #12]
 8001788:	60bb      	str	r3, [r7, #8]
 800178a:	68ba      	ldr	r2, [r7, #8]
 800178c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001790:	4013      	ands	r3, r2
 8001792:	60bb      	str	r3, [r7, #8]
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	021a      	lsls	r2, r3, #8
 8001798:	68bb      	ldr	r3, [r7, #8]
 800179a:	4313      	orrs	r3, r2
 800179c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80017a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017a4:	60bb      	str	r3, [r7, #8]
 80017a6:	4a04      	ldr	r2, [pc, #16]	; (80017b8 <__NVIC_SetPriorityGrouping+0x44>)
 80017a8:	68bb      	ldr	r3, [r7, #8]
 80017aa:	60d3      	str	r3, [r2, #12]
 80017ac:	bf00      	nop
 80017ae:	3714      	adds	r7, #20
 80017b0:	46bd      	mov	sp, r7
 80017b2:	bc80      	pop	{r7}
 80017b4:	4770      	bx	lr
 80017b6:	bf00      	nop
 80017b8:	e000ed00 	.word	0xe000ed00

080017bc <__NVIC_GetPriorityGrouping>:
 80017bc:	b480      	push	{r7}
 80017be:	af00      	add	r7, sp, #0
 80017c0:	4b04      	ldr	r3, [pc, #16]	; (80017d4 <__NVIC_GetPriorityGrouping+0x18>)
 80017c2:	68db      	ldr	r3, [r3, #12]
 80017c4:	0a1b      	lsrs	r3, r3, #8
 80017c6:	f003 0307 	and.w	r3, r3, #7
 80017ca:	4618      	mov	r0, r3
 80017cc:	46bd      	mov	sp, r7
 80017ce:	bc80      	pop	{r7}
 80017d0:	4770      	bx	lr
 80017d2:	bf00      	nop
 80017d4:	e000ed00 	.word	0xe000ed00

080017d8 <__NVIC_EnableIRQ>:
 80017d8:	b480      	push	{r7}
 80017da:	b083      	sub	sp, #12
 80017dc:	af00      	add	r7, sp, #0
 80017de:	4603      	mov	r3, r0
 80017e0:	71fb      	strb	r3, [r7, #7]
 80017e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	db0b      	blt.n	8001802 <__NVIC_EnableIRQ+0x2a>
 80017ea:	79fb      	ldrb	r3, [r7, #7]
 80017ec:	f003 021f 	and.w	r2, r3, #31
 80017f0:	4906      	ldr	r1, [pc, #24]	; (800180c <__NVIC_EnableIRQ+0x34>)
 80017f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017f6:	095b      	lsrs	r3, r3, #5
 80017f8:	2001      	movs	r0, #1
 80017fa:	fa00 f202 	lsl.w	r2, r0, r2
 80017fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8001802:	bf00      	nop
 8001804:	370c      	adds	r7, #12
 8001806:	46bd      	mov	sp, r7
 8001808:	bc80      	pop	{r7}
 800180a:	4770      	bx	lr
 800180c:	e000e100 	.word	0xe000e100

08001810 <__NVIC_SetPriority>:
 8001810:	b480      	push	{r7}
 8001812:	b083      	sub	sp, #12
 8001814:	af00      	add	r7, sp, #0
 8001816:	4603      	mov	r3, r0
 8001818:	6039      	str	r1, [r7, #0]
 800181a:	71fb      	strb	r3, [r7, #7]
 800181c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001820:	2b00      	cmp	r3, #0
 8001822:	db0a      	blt.n	800183a <__NVIC_SetPriority+0x2a>
 8001824:	683b      	ldr	r3, [r7, #0]
 8001826:	b2da      	uxtb	r2, r3
 8001828:	490c      	ldr	r1, [pc, #48]	; (800185c <__NVIC_SetPriority+0x4c>)
 800182a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800182e:	0112      	lsls	r2, r2, #4
 8001830:	b2d2      	uxtb	r2, r2
 8001832:	440b      	add	r3, r1
 8001834:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
 8001838:	e00a      	b.n	8001850 <__NVIC_SetPriority+0x40>
 800183a:	683b      	ldr	r3, [r7, #0]
 800183c:	b2da      	uxtb	r2, r3
 800183e:	4908      	ldr	r1, [pc, #32]	; (8001860 <__NVIC_SetPriority+0x50>)
 8001840:	79fb      	ldrb	r3, [r7, #7]
 8001842:	f003 030f 	and.w	r3, r3, #15
 8001846:	3b04      	subs	r3, #4
 8001848:	0112      	lsls	r2, r2, #4
 800184a:	b2d2      	uxtb	r2, r2
 800184c:	440b      	add	r3, r1
 800184e:	761a      	strb	r2, [r3, #24]
 8001850:	bf00      	nop
 8001852:	370c      	adds	r7, #12
 8001854:	46bd      	mov	sp, r7
 8001856:	bc80      	pop	{r7}
 8001858:	4770      	bx	lr
 800185a:	bf00      	nop
 800185c:	e000e100 	.word	0xe000e100
 8001860:	e000ed00 	.word	0xe000ed00

08001864 <NVIC_EncodePriority>:
 8001864:	b480      	push	{r7}
 8001866:	b089      	sub	sp, #36	; 0x24
 8001868:	af00      	add	r7, sp, #0
 800186a:	60f8      	str	r0, [r7, #12]
 800186c:	60b9      	str	r1, [r7, #8]
 800186e:	607a      	str	r2, [r7, #4]
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	f003 0307 	and.w	r3, r3, #7
 8001876:	61fb      	str	r3, [r7, #28]
 8001878:	69fb      	ldr	r3, [r7, #28]
 800187a:	f1c3 0307 	rsb	r3, r3, #7
 800187e:	2b04      	cmp	r3, #4
 8001880:	bf28      	it	cs
 8001882:	2304      	movcs	r3, #4
 8001884:	61bb      	str	r3, [r7, #24]
 8001886:	69fb      	ldr	r3, [r7, #28]
 8001888:	3304      	adds	r3, #4
 800188a:	2b06      	cmp	r3, #6
 800188c:	d902      	bls.n	8001894 <NVIC_EncodePriority+0x30>
 800188e:	69fb      	ldr	r3, [r7, #28]
 8001890:	3b03      	subs	r3, #3
 8001892:	e000      	b.n	8001896 <NVIC_EncodePriority+0x32>
 8001894:	2300      	movs	r3, #0
 8001896:	617b      	str	r3, [r7, #20]
 8001898:	f04f 32ff 	mov.w	r2, #4294967295
 800189c:	69bb      	ldr	r3, [r7, #24]
 800189e:	fa02 f303 	lsl.w	r3, r2, r3
 80018a2:	43da      	mvns	r2, r3
 80018a4:	68bb      	ldr	r3, [r7, #8]
 80018a6:	401a      	ands	r2, r3
 80018a8:	697b      	ldr	r3, [r7, #20]
 80018aa:	409a      	lsls	r2, r3
 80018ac:	f04f 31ff 	mov.w	r1, #4294967295
 80018b0:	697b      	ldr	r3, [r7, #20]
 80018b2:	fa01 f303 	lsl.w	r3, r1, r3
 80018b6:	43d9      	mvns	r1, r3
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	400b      	ands	r3, r1
 80018bc:	4313      	orrs	r3, r2
 80018be:	4618      	mov	r0, r3
 80018c0:	3724      	adds	r7, #36	; 0x24
 80018c2:	46bd      	mov	sp, r7
 80018c4:	bc80      	pop	{r7}
 80018c6:	4770      	bx	lr

080018c8 <SysTick_Config>:
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b082      	sub	sp, #8
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	3b01      	subs	r3, #1
 80018d4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80018d8:	d301      	bcc.n	80018de <SysTick_Config+0x16>
 80018da:	2301      	movs	r3, #1
 80018dc:	e00f      	b.n	80018fe <SysTick_Config+0x36>
 80018de:	4a0a      	ldr	r2, [pc, #40]	; (8001908 <SysTick_Config+0x40>)
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	3b01      	subs	r3, #1
 80018e4:	6053      	str	r3, [r2, #4]
 80018e6:	210f      	movs	r1, #15
 80018e8:	f04f 30ff 	mov.w	r0, #4294967295
 80018ec:	f7ff ff90 	bl	8001810 <__NVIC_SetPriority>
 80018f0:	4b05      	ldr	r3, [pc, #20]	; (8001908 <SysTick_Config+0x40>)
 80018f2:	2200      	movs	r2, #0
 80018f4:	609a      	str	r2, [r3, #8]
 80018f6:	4b04      	ldr	r3, [pc, #16]	; (8001908 <SysTick_Config+0x40>)
 80018f8:	2207      	movs	r2, #7
 80018fa:	601a      	str	r2, [r3, #0]
 80018fc:	2300      	movs	r3, #0
 80018fe:	4618      	mov	r0, r3
 8001900:	3708      	adds	r7, #8
 8001902:	46bd      	mov	sp, r7
 8001904:	bd80      	pop	{r7, pc}
 8001906:	bf00      	nop
 8001908:	e000e010 	.word	0xe000e010

0800190c <HAL_NVIC_SetPriorityGrouping>:
 800190c:	b580      	push	{r7, lr}
 800190e:	b082      	sub	sp, #8
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
 8001914:	6878      	ldr	r0, [r7, #4]
 8001916:	f7ff ff2d 	bl	8001774 <__NVIC_SetPriorityGrouping>
 800191a:	bf00      	nop
 800191c:	3708      	adds	r7, #8
 800191e:	46bd      	mov	sp, r7
 8001920:	bd80      	pop	{r7, pc}

08001922 <HAL_NVIC_SetPriority>:
 8001922:	b580      	push	{r7, lr}
 8001924:	b086      	sub	sp, #24
 8001926:	af00      	add	r7, sp, #0
 8001928:	4603      	mov	r3, r0
 800192a:	60b9      	str	r1, [r7, #8]
 800192c:	607a      	str	r2, [r7, #4]
 800192e:	73fb      	strb	r3, [r7, #15]
 8001930:	2300      	movs	r3, #0
 8001932:	617b      	str	r3, [r7, #20]
 8001934:	f7ff ff42 	bl	80017bc <__NVIC_GetPriorityGrouping>
 8001938:	6178      	str	r0, [r7, #20]
 800193a:	687a      	ldr	r2, [r7, #4]
 800193c:	68b9      	ldr	r1, [r7, #8]
 800193e:	6978      	ldr	r0, [r7, #20]
 8001940:	f7ff ff90 	bl	8001864 <NVIC_EncodePriority>
 8001944:	4602      	mov	r2, r0
 8001946:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800194a:	4611      	mov	r1, r2
 800194c:	4618      	mov	r0, r3
 800194e:	f7ff ff5f 	bl	8001810 <__NVIC_SetPriority>
 8001952:	bf00      	nop
 8001954:	3718      	adds	r7, #24
 8001956:	46bd      	mov	sp, r7
 8001958:	bd80      	pop	{r7, pc}

0800195a <HAL_NVIC_EnableIRQ>:
 800195a:	b580      	push	{r7, lr}
 800195c:	b082      	sub	sp, #8
 800195e:	af00      	add	r7, sp, #0
 8001960:	4603      	mov	r3, r0
 8001962:	71fb      	strb	r3, [r7, #7]
 8001964:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001968:	4618      	mov	r0, r3
 800196a:	f7ff ff35 	bl	80017d8 <__NVIC_EnableIRQ>
 800196e:	bf00      	nop
 8001970:	3708      	adds	r7, #8
 8001972:	46bd      	mov	sp, r7
 8001974:	bd80      	pop	{r7, pc}

08001976 <HAL_SYSTICK_Config>:
 8001976:	b580      	push	{r7, lr}
 8001978:	b082      	sub	sp, #8
 800197a:	af00      	add	r7, sp, #0
 800197c:	6078      	str	r0, [r7, #4]
 800197e:	6878      	ldr	r0, [r7, #4]
 8001980:	f7ff ffa2 	bl	80018c8 <SysTick_Config>
 8001984:	4603      	mov	r3, r0
 8001986:	4618      	mov	r0, r3
 8001988:	3708      	adds	r7, #8
 800198a:	46bd      	mov	sp, r7
 800198c:	bd80      	pop	{r7, pc}
	...

08001990 <HAL_GPIO_Init>:
 8001990:	b480      	push	{r7}
 8001992:	b08b      	sub	sp, #44	; 0x2c
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
 8001998:	6039      	str	r1, [r7, #0]
 800199a:	2300      	movs	r3, #0
 800199c:	627b      	str	r3, [r7, #36]	; 0x24
 800199e:	2300      	movs	r3, #0
 80019a0:	623b      	str	r3, [r7, #32]
 80019a2:	e179      	b.n	8001c98 <HAL_GPIO_Init+0x308>
 80019a4:	2201      	movs	r2, #1
 80019a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019a8:	fa02 f303 	lsl.w	r3, r2, r3
 80019ac:	61fb      	str	r3, [r7, #28]
 80019ae:	683b      	ldr	r3, [r7, #0]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	69fa      	ldr	r2, [r7, #28]
 80019b4:	4013      	ands	r3, r2
 80019b6:	61bb      	str	r3, [r7, #24]
 80019b8:	69ba      	ldr	r2, [r7, #24]
 80019ba:	69fb      	ldr	r3, [r7, #28]
 80019bc:	429a      	cmp	r2, r3
 80019be:	f040 8168 	bne.w	8001c92 <HAL_GPIO_Init+0x302>
 80019c2:	683b      	ldr	r3, [r7, #0]
 80019c4:	685b      	ldr	r3, [r3, #4]
 80019c6:	4a96      	ldr	r2, [pc, #600]	; (8001c20 <HAL_GPIO_Init+0x290>)
 80019c8:	4293      	cmp	r3, r2
 80019ca:	d05e      	beq.n	8001a8a <HAL_GPIO_Init+0xfa>
 80019cc:	4a94      	ldr	r2, [pc, #592]	; (8001c20 <HAL_GPIO_Init+0x290>)
 80019ce:	4293      	cmp	r3, r2
 80019d0:	d875      	bhi.n	8001abe <HAL_GPIO_Init+0x12e>
 80019d2:	4a94      	ldr	r2, [pc, #592]	; (8001c24 <HAL_GPIO_Init+0x294>)
 80019d4:	4293      	cmp	r3, r2
 80019d6:	d058      	beq.n	8001a8a <HAL_GPIO_Init+0xfa>
 80019d8:	4a92      	ldr	r2, [pc, #584]	; (8001c24 <HAL_GPIO_Init+0x294>)
 80019da:	4293      	cmp	r3, r2
 80019dc:	d86f      	bhi.n	8001abe <HAL_GPIO_Init+0x12e>
 80019de:	4a92      	ldr	r2, [pc, #584]	; (8001c28 <HAL_GPIO_Init+0x298>)
 80019e0:	4293      	cmp	r3, r2
 80019e2:	d052      	beq.n	8001a8a <HAL_GPIO_Init+0xfa>
 80019e4:	4a90      	ldr	r2, [pc, #576]	; (8001c28 <HAL_GPIO_Init+0x298>)
 80019e6:	4293      	cmp	r3, r2
 80019e8:	d869      	bhi.n	8001abe <HAL_GPIO_Init+0x12e>
 80019ea:	4a90      	ldr	r2, [pc, #576]	; (8001c2c <HAL_GPIO_Init+0x29c>)
 80019ec:	4293      	cmp	r3, r2
 80019ee:	d04c      	beq.n	8001a8a <HAL_GPIO_Init+0xfa>
 80019f0:	4a8e      	ldr	r2, [pc, #568]	; (8001c2c <HAL_GPIO_Init+0x29c>)
 80019f2:	4293      	cmp	r3, r2
 80019f4:	d863      	bhi.n	8001abe <HAL_GPIO_Init+0x12e>
 80019f6:	4a8e      	ldr	r2, [pc, #568]	; (8001c30 <HAL_GPIO_Init+0x2a0>)
 80019f8:	4293      	cmp	r3, r2
 80019fa:	d046      	beq.n	8001a8a <HAL_GPIO_Init+0xfa>
 80019fc:	4a8c      	ldr	r2, [pc, #560]	; (8001c30 <HAL_GPIO_Init+0x2a0>)
 80019fe:	4293      	cmp	r3, r2
 8001a00:	d85d      	bhi.n	8001abe <HAL_GPIO_Init+0x12e>
 8001a02:	2b12      	cmp	r3, #18
 8001a04:	d82a      	bhi.n	8001a5c <HAL_GPIO_Init+0xcc>
 8001a06:	2b12      	cmp	r3, #18
 8001a08:	d859      	bhi.n	8001abe <HAL_GPIO_Init+0x12e>
 8001a0a:	a201      	add	r2, pc, #4	; (adr r2, 8001a10 <HAL_GPIO_Init+0x80>)
 8001a0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a10:	08001a8b 	.word	0x08001a8b
 8001a14:	08001a65 	.word	0x08001a65
 8001a18:	08001a77 	.word	0x08001a77
 8001a1c:	08001ab9 	.word	0x08001ab9
 8001a20:	08001abf 	.word	0x08001abf
 8001a24:	08001abf 	.word	0x08001abf
 8001a28:	08001abf 	.word	0x08001abf
 8001a2c:	08001abf 	.word	0x08001abf
 8001a30:	08001abf 	.word	0x08001abf
 8001a34:	08001abf 	.word	0x08001abf
 8001a38:	08001abf 	.word	0x08001abf
 8001a3c:	08001abf 	.word	0x08001abf
 8001a40:	08001abf 	.word	0x08001abf
 8001a44:	08001abf 	.word	0x08001abf
 8001a48:	08001abf 	.word	0x08001abf
 8001a4c:	08001abf 	.word	0x08001abf
 8001a50:	08001abf 	.word	0x08001abf
 8001a54:	08001a6d 	.word	0x08001a6d
 8001a58:	08001a81 	.word	0x08001a81
 8001a5c:	4a75      	ldr	r2, [pc, #468]	; (8001c34 <HAL_GPIO_Init+0x2a4>)
 8001a5e:	4293      	cmp	r3, r2
 8001a60:	d013      	beq.n	8001a8a <HAL_GPIO_Init+0xfa>
 8001a62:	e02c      	b.n	8001abe <HAL_GPIO_Init+0x12e>
 8001a64:	683b      	ldr	r3, [r7, #0]
 8001a66:	68db      	ldr	r3, [r3, #12]
 8001a68:	623b      	str	r3, [r7, #32]
 8001a6a:	e029      	b.n	8001ac0 <HAL_GPIO_Init+0x130>
 8001a6c:	683b      	ldr	r3, [r7, #0]
 8001a6e:	68db      	ldr	r3, [r3, #12]
 8001a70:	3304      	adds	r3, #4
 8001a72:	623b      	str	r3, [r7, #32]
 8001a74:	e024      	b.n	8001ac0 <HAL_GPIO_Init+0x130>
 8001a76:	683b      	ldr	r3, [r7, #0]
 8001a78:	68db      	ldr	r3, [r3, #12]
 8001a7a:	3308      	adds	r3, #8
 8001a7c:	623b      	str	r3, [r7, #32]
 8001a7e:	e01f      	b.n	8001ac0 <HAL_GPIO_Init+0x130>
 8001a80:	683b      	ldr	r3, [r7, #0]
 8001a82:	68db      	ldr	r3, [r3, #12]
 8001a84:	330c      	adds	r3, #12
 8001a86:	623b      	str	r3, [r7, #32]
 8001a88:	e01a      	b.n	8001ac0 <HAL_GPIO_Init+0x130>
 8001a8a:	683b      	ldr	r3, [r7, #0]
 8001a8c:	689b      	ldr	r3, [r3, #8]
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d102      	bne.n	8001a98 <HAL_GPIO_Init+0x108>
 8001a92:	2304      	movs	r3, #4
 8001a94:	623b      	str	r3, [r7, #32]
 8001a96:	e013      	b.n	8001ac0 <HAL_GPIO_Init+0x130>
 8001a98:	683b      	ldr	r3, [r7, #0]
 8001a9a:	689b      	ldr	r3, [r3, #8]
 8001a9c:	2b01      	cmp	r3, #1
 8001a9e:	d105      	bne.n	8001aac <HAL_GPIO_Init+0x11c>
 8001aa0:	2308      	movs	r3, #8
 8001aa2:	623b      	str	r3, [r7, #32]
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	69fa      	ldr	r2, [r7, #28]
 8001aa8:	611a      	str	r2, [r3, #16]
 8001aaa:	e009      	b.n	8001ac0 <HAL_GPIO_Init+0x130>
 8001aac:	2308      	movs	r3, #8
 8001aae:	623b      	str	r3, [r7, #32]
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	69fa      	ldr	r2, [r7, #28]
 8001ab4:	615a      	str	r2, [r3, #20]
 8001ab6:	e003      	b.n	8001ac0 <HAL_GPIO_Init+0x130>
 8001ab8:	2300      	movs	r3, #0
 8001aba:	623b      	str	r3, [r7, #32]
 8001abc:	e000      	b.n	8001ac0 <HAL_GPIO_Init+0x130>
 8001abe:	bf00      	nop
 8001ac0:	69bb      	ldr	r3, [r7, #24]
 8001ac2:	2bff      	cmp	r3, #255	; 0xff
 8001ac4:	d801      	bhi.n	8001aca <HAL_GPIO_Init+0x13a>
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	e001      	b.n	8001ace <HAL_GPIO_Init+0x13e>
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	3304      	adds	r3, #4
 8001ace:	617b      	str	r3, [r7, #20]
 8001ad0:	69bb      	ldr	r3, [r7, #24]
 8001ad2:	2bff      	cmp	r3, #255	; 0xff
 8001ad4:	d802      	bhi.n	8001adc <HAL_GPIO_Init+0x14c>
 8001ad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ad8:	009b      	lsls	r3, r3, #2
 8001ada:	e002      	b.n	8001ae2 <HAL_GPIO_Init+0x152>
 8001adc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ade:	3b08      	subs	r3, #8
 8001ae0:	009b      	lsls	r3, r3, #2
 8001ae2:	613b      	str	r3, [r7, #16]
 8001ae4:	697b      	ldr	r3, [r7, #20]
 8001ae6:	681a      	ldr	r2, [r3, #0]
 8001ae8:	210f      	movs	r1, #15
 8001aea:	693b      	ldr	r3, [r7, #16]
 8001aec:	fa01 f303 	lsl.w	r3, r1, r3
 8001af0:	43db      	mvns	r3, r3
 8001af2:	401a      	ands	r2, r3
 8001af4:	6a39      	ldr	r1, [r7, #32]
 8001af6:	693b      	ldr	r3, [r7, #16]
 8001af8:	fa01 f303 	lsl.w	r3, r1, r3
 8001afc:	431a      	orrs	r2, r3
 8001afe:	697b      	ldr	r3, [r7, #20]
 8001b00:	601a      	str	r2, [r3, #0]
 8001b02:	683b      	ldr	r3, [r7, #0]
 8001b04:	685b      	ldr	r3, [r3, #4]
 8001b06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	f000 80c1 	beq.w	8001c92 <HAL_GPIO_Init+0x302>
 8001b10:	4b49      	ldr	r3, [pc, #292]	; (8001c38 <HAL_GPIO_Init+0x2a8>)
 8001b12:	699b      	ldr	r3, [r3, #24]
 8001b14:	4a48      	ldr	r2, [pc, #288]	; (8001c38 <HAL_GPIO_Init+0x2a8>)
 8001b16:	f043 0301 	orr.w	r3, r3, #1
 8001b1a:	6193      	str	r3, [r2, #24]
 8001b1c:	4b46      	ldr	r3, [pc, #280]	; (8001c38 <HAL_GPIO_Init+0x2a8>)
 8001b1e:	699b      	ldr	r3, [r3, #24]
 8001b20:	f003 0301 	and.w	r3, r3, #1
 8001b24:	60bb      	str	r3, [r7, #8]
 8001b26:	68bb      	ldr	r3, [r7, #8]
 8001b28:	4a44      	ldr	r2, [pc, #272]	; (8001c3c <HAL_GPIO_Init+0x2ac>)
 8001b2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b2c:	089b      	lsrs	r3, r3, #2
 8001b2e:	3302      	adds	r3, #2
 8001b30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b34:	60fb      	str	r3, [r7, #12]
 8001b36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b38:	f003 0303 	and.w	r3, r3, #3
 8001b3c:	009b      	lsls	r3, r3, #2
 8001b3e:	220f      	movs	r2, #15
 8001b40:	fa02 f303 	lsl.w	r3, r2, r3
 8001b44:	43db      	mvns	r3, r3
 8001b46:	68fa      	ldr	r2, [r7, #12]
 8001b48:	4013      	ands	r3, r2
 8001b4a:	60fb      	str	r3, [r7, #12]
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	4a3c      	ldr	r2, [pc, #240]	; (8001c40 <HAL_GPIO_Init+0x2b0>)
 8001b50:	4293      	cmp	r3, r2
 8001b52:	d01f      	beq.n	8001b94 <HAL_GPIO_Init+0x204>
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	4a3b      	ldr	r2, [pc, #236]	; (8001c44 <HAL_GPIO_Init+0x2b4>)
 8001b58:	4293      	cmp	r3, r2
 8001b5a:	d019      	beq.n	8001b90 <HAL_GPIO_Init+0x200>
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	4a3a      	ldr	r2, [pc, #232]	; (8001c48 <HAL_GPIO_Init+0x2b8>)
 8001b60:	4293      	cmp	r3, r2
 8001b62:	d013      	beq.n	8001b8c <HAL_GPIO_Init+0x1fc>
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	4a39      	ldr	r2, [pc, #228]	; (8001c4c <HAL_GPIO_Init+0x2bc>)
 8001b68:	4293      	cmp	r3, r2
 8001b6a:	d00d      	beq.n	8001b88 <HAL_GPIO_Init+0x1f8>
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	4a38      	ldr	r2, [pc, #224]	; (8001c50 <HAL_GPIO_Init+0x2c0>)
 8001b70:	4293      	cmp	r3, r2
 8001b72:	d007      	beq.n	8001b84 <HAL_GPIO_Init+0x1f4>
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	4a37      	ldr	r2, [pc, #220]	; (8001c54 <HAL_GPIO_Init+0x2c4>)
 8001b78:	4293      	cmp	r3, r2
 8001b7a:	d101      	bne.n	8001b80 <HAL_GPIO_Init+0x1f0>
 8001b7c:	2305      	movs	r3, #5
 8001b7e:	e00a      	b.n	8001b96 <HAL_GPIO_Init+0x206>
 8001b80:	2306      	movs	r3, #6
 8001b82:	e008      	b.n	8001b96 <HAL_GPIO_Init+0x206>
 8001b84:	2304      	movs	r3, #4
 8001b86:	e006      	b.n	8001b96 <HAL_GPIO_Init+0x206>
 8001b88:	2303      	movs	r3, #3
 8001b8a:	e004      	b.n	8001b96 <HAL_GPIO_Init+0x206>
 8001b8c:	2302      	movs	r3, #2
 8001b8e:	e002      	b.n	8001b96 <HAL_GPIO_Init+0x206>
 8001b90:	2301      	movs	r3, #1
 8001b92:	e000      	b.n	8001b96 <HAL_GPIO_Init+0x206>
 8001b94:	2300      	movs	r3, #0
 8001b96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b98:	f002 0203 	and.w	r2, r2, #3
 8001b9c:	0092      	lsls	r2, r2, #2
 8001b9e:	4093      	lsls	r3, r2
 8001ba0:	68fa      	ldr	r2, [r7, #12]
 8001ba2:	4313      	orrs	r3, r2
 8001ba4:	60fb      	str	r3, [r7, #12]
 8001ba6:	4925      	ldr	r1, [pc, #148]	; (8001c3c <HAL_GPIO_Init+0x2ac>)
 8001ba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001baa:	089b      	lsrs	r3, r3, #2
 8001bac:	3302      	adds	r3, #2
 8001bae:	68fa      	ldr	r2, [r7, #12]
 8001bb0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8001bb4:	683b      	ldr	r3, [r7, #0]
 8001bb6:	685b      	ldr	r3, [r3, #4]
 8001bb8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d006      	beq.n	8001bce <HAL_GPIO_Init+0x23e>
 8001bc0:	4b25      	ldr	r3, [pc, #148]	; (8001c58 <HAL_GPIO_Init+0x2c8>)
 8001bc2:	689a      	ldr	r2, [r3, #8]
 8001bc4:	4924      	ldr	r1, [pc, #144]	; (8001c58 <HAL_GPIO_Init+0x2c8>)
 8001bc6:	69bb      	ldr	r3, [r7, #24]
 8001bc8:	4313      	orrs	r3, r2
 8001bca:	608b      	str	r3, [r1, #8]
 8001bcc:	e006      	b.n	8001bdc <HAL_GPIO_Init+0x24c>
 8001bce:	4b22      	ldr	r3, [pc, #136]	; (8001c58 <HAL_GPIO_Init+0x2c8>)
 8001bd0:	689a      	ldr	r2, [r3, #8]
 8001bd2:	69bb      	ldr	r3, [r7, #24]
 8001bd4:	43db      	mvns	r3, r3
 8001bd6:	4920      	ldr	r1, [pc, #128]	; (8001c58 <HAL_GPIO_Init+0x2c8>)
 8001bd8:	4013      	ands	r3, r2
 8001bda:	608b      	str	r3, [r1, #8]
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	685b      	ldr	r3, [r3, #4]
 8001be0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d006      	beq.n	8001bf6 <HAL_GPIO_Init+0x266>
 8001be8:	4b1b      	ldr	r3, [pc, #108]	; (8001c58 <HAL_GPIO_Init+0x2c8>)
 8001bea:	68da      	ldr	r2, [r3, #12]
 8001bec:	491a      	ldr	r1, [pc, #104]	; (8001c58 <HAL_GPIO_Init+0x2c8>)
 8001bee:	69bb      	ldr	r3, [r7, #24]
 8001bf0:	4313      	orrs	r3, r2
 8001bf2:	60cb      	str	r3, [r1, #12]
 8001bf4:	e006      	b.n	8001c04 <HAL_GPIO_Init+0x274>
 8001bf6:	4b18      	ldr	r3, [pc, #96]	; (8001c58 <HAL_GPIO_Init+0x2c8>)
 8001bf8:	68da      	ldr	r2, [r3, #12]
 8001bfa:	69bb      	ldr	r3, [r7, #24]
 8001bfc:	43db      	mvns	r3, r3
 8001bfe:	4916      	ldr	r1, [pc, #88]	; (8001c58 <HAL_GPIO_Init+0x2c8>)
 8001c00:	4013      	ands	r3, r2
 8001c02:	60cb      	str	r3, [r1, #12]
 8001c04:	683b      	ldr	r3, [r7, #0]
 8001c06:	685b      	ldr	r3, [r3, #4]
 8001c08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d025      	beq.n	8001c5c <HAL_GPIO_Init+0x2cc>
 8001c10:	4b11      	ldr	r3, [pc, #68]	; (8001c58 <HAL_GPIO_Init+0x2c8>)
 8001c12:	685a      	ldr	r2, [r3, #4]
 8001c14:	4910      	ldr	r1, [pc, #64]	; (8001c58 <HAL_GPIO_Init+0x2c8>)
 8001c16:	69bb      	ldr	r3, [r7, #24]
 8001c18:	4313      	orrs	r3, r2
 8001c1a:	604b      	str	r3, [r1, #4]
 8001c1c:	e025      	b.n	8001c6a <HAL_GPIO_Init+0x2da>
 8001c1e:	bf00      	nop
 8001c20:	10320000 	.word	0x10320000
 8001c24:	10310000 	.word	0x10310000
 8001c28:	10220000 	.word	0x10220000
 8001c2c:	10210000 	.word	0x10210000
 8001c30:	10120000 	.word	0x10120000
 8001c34:	10110000 	.word	0x10110000
 8001c38:	40021000 	.word	0x40021000
 8001c3c:	40010000 	.word	0x40010000
 8001c40:	40010800 	.word	0x40010800
 8001c44:	40010c00 	.word	0x40010c00
 8001c48:	40011000 	.word	0x40011000
 8001c4c:	40011400 	.word	0x40011400
 8001c50:	40011800 	.word	0x40011800
 8001c54:	40011c00 	.word	0x40011c00
 8001c58:	40010400 	.word	0x40010400
 8001c5c:	4b15      	ldr	r3, [pc, #84]	; (8001cb4 <HAL_GPIO_Init+0x324>)
 8001c5e:	685a      	ldr	r2, [r3, #4]
 8001c60:	69bb      	ldr	r3, [r7, #24]
 8001c62:	43db      	mvns	r3, r3
 8001c64:	4913      	ldr	r1, [pc, #76]	; (8001cb4 <HAL_GPIO_Init+0x324>)
 8001c66:	4013      	ands	r3, r2
 8001c68:	604b      	str	r3, [r1, #4]
 8001c6a:	683b      	ldr	r3, [r7, #0]
 8001c6c:	685b      	ldr	r3, [r3, #4]
 8001c6e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d006      	beq.n	8001c84 <HAL_GPIO_Init+0x2f4>
 8001c76:	4b0f      	ldr	r3, [pc, #60]	; (8001cb4 <HAL_GPIO_Init+0x324>)
 8001c78:	681a      	ldr	r2, [r3, #0]
 8001c7a:	490e      	ldr	r1, [pc, #56]	; (8001cb4 <HAL_GPIO_Init+0x324>)
 8001c7c:	69bb      	ldr	r3, [r7, #24]
 8001c7e:	4313      	orrs	r3, r2
 8001c80:	600b      	str	r3, [r1, #0]
 8001c82:	e006      	b.n	8001c92 <HAL_GPIO_Init+0x302>
 8001c84:	4b0b      	ldr	r3, [pc, #44]	; (8001cb4 <HAL_GPIO_Init+0x324>)
 8001c86:	681a      	ldr	r2, [r3, #0]
 8001c88:	69bb      	ldr	r3, [r7, #24]
 8001c8a:	43db      	mvns	r3, r3
 8001c8c:	4909      	ldr	r1, [pc, #36]	; (8001cb4 <HAL_GPIO_Init+0x324>)
 8001c8e:	4013      	ands	r3, r2
 8001c90:	600b      	str	r3, [r1, #0]
 8001c92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c94:	3301      	adds	r3, #1
 8001c96:	627b      	str	r3, [r7, #36]	; 0x24
 8001c98:	683b      	ldr	r3, [r7, #0]
 8001c9a:	681a      	ldr	r2, [r3, #0]
 8001c9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c9e:	fa22 f303 	lsr.w	r3, r2, r3
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	f47f ae7e 	bne.w	80019a4 <HAL_GPIO_Init+0x14>
 8001ca8:	bf00      	nop
 8001caa:	bf00      	nop
 8001cac:	372c      	adds	r7, #44	; 0x2c
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	bc80      	pop	{r7}
 8001cb2:	4770      	bx	lr
 8001cb4:	40010400 	.word	0x40010400

08001cb8 <HAL_GPIO_ReadPin>:
 8001cb8:	b480      	push	{r7}
 8001cba:	b085      	sub	sp, #20
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
 8001cc0:	460b      	mov	r3, r1
 8001cc2:	807b      	strh	r3, [r7, #2]
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	689a      	ldr	r2, [r3, #8]
 8001cc8:	887b      	ldrh	r3, [r7, #2]
 8001cca:	4013      	ands	r3, r2
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d002      	beq.n	8001cd6 <HAL_GPIO_ReadPin+0x1e>
 8001cd0:	2301      	movs	r3, #1
 8001cd2:	73fb      	strb	r3, [r7, #15]
 8001cd4:	e001      	b.n	8001cda <HAL_GPIO_ReadPin+0x22>
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	73fb      	strb	r3, [r7, #15]
 8001cda:	7bfb      	ldrb	r3, [r7, #15]
 8001cdc:	4618      	mov	r0, r3
 8001cde:	3714      	adds	r7, #20
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	bc80      	pop	{r7}
 8001ce4:	4770      	bx	lr

08001ce6 <HAL_GPIO_WritePin>:
 8001ce6:	b480      	push	{r7}
 8001ce8:	b083      	sub	sp, #12
 8001cea:	af00      	add	r7, sp, #0
 8001cec:	6078      	str	r0, [r7, #4]
 8001cee:	460b      	mov	r3, r1
 8001cf0:	807b      	strh	r3, [r7, #2]
 8001cf2:	4613      	mov	r3, r2
 8001cf4:	707b      	strb	r3, [r7, #1]
 8001cf6:	787b      	ldrb	r3, [r7, #1]
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d003      	beq.n	8001d04 <HAL_GPIO_WritePin+0x1e>
 8001cfc:	887a      	ldrh	r2, [r7, #2]
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	611a      	str	r2, [r3, #16]
 8001d02:	e003      	b.n	8001d0c <HAL_GPIO_WritePin+0x26>
 8001d04:	887b      	ldrh	r3, [r7, #2]
 8001d06:	041a      	lsls	r2, r3, #16
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	611a      	str	r2, [r3, #16]
 8001d0c:	bf00      	nop
 8001d0e:	370c      	adds	r7, #12
 8001d10:	46bd      	mov	sp, r7
 8001d12:	bc80      	pop	{r7}
 8001d14:	4770      	bx	lr

08001d16 <HAL_GPIO_TogglePin>:
 8001d16:	b480      	push	{r7}
 8001d18:	b085      	sub	sp, #20
 8001d1a:	af00      	add	r7, sp, #0
 8001d1c:	6078      	str	r0, [r7, #4]
 8001d1e:	460b      	mov	r3, r1
 8001d20:	807b      	strh	r3, [r7, #2]
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	68db      	ldr	r3, [r3, #12]
 8001d26:	60fb      	str	r3, [r7, #12]
 8001d28:	887a      	ldrh	r2, [r7, #2]
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	4013      	ands	r3, r2
 8001d2e:	041a      	lsls	r2, r3, #16
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	43d9      	mvns	r1, r3
 8001d34:	887b      	ldrh	r3, [r7, #2]
 8001d36:	400b      	ands	r3, r1
 8001d38:	431a      	orrs	r2, r3
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	611a      	str	r2, [r3, #16]
 8001d3e:	bf00      	nop
 8001d40:	3714      	adds	r7, #20
 8001d42:	46bd      	mov	sp, r7
 8001d44:	bc80      	pop	{r7}
 8001d46:	4770      	bx	lr

08001d48 <HAL_RCC_OscConfig>:
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b086      	sub	sp, #24
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d101      	bne.n	8001d5a <HAL_RCC_OscConfig+0x12>
 8001d56:	2301      	movs	r3, #1
 8001d58:	e272      	b.n	8002240 <HAL_RCC_OscConfig+0x4f8>
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f003 0301 	and.w	r3, r3, #1
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	f000 8087 	beq.w	8001e76 <HAL_RCC_OscConfig+0x12e>
 8001d68:	4b92      	ldr	r3, [pc, #584]	; (8001fb4 <HAL_RCC_OscConfig+0x26c>)
 8001d6a:	685b      	ldr	r3, [r3, #4]
 8001d6c:	f003 030c 	and.w	r3, r3, #12
 8001d70:	2b04      	cmp	r3, #4
 8001d72:	d00c      	beq.n	8001d8e <HAL_RCC_OscConfig+0x46>
 8001d74:	4b8f      	ldr	r3, [pc, #572]	; (8001fb4 <HAL_RCC_OscConfig+0x26c>)
 8001d76:	685b      	ldr	r3, [r3, #4]
 8001d78:	f003 030c 	and.w	r3, r3, #12
 8001d7c:	2b08      	cmp	r3, #8
 8001d7e:	d112      	bne.n	8001da6 <HAL_RCC_OscConfig+0x5e>
 8001d80:	4b8c      	ldr	r3, [pc, #560]	; (8001fb4 <HAL_RCC_OscConfig+0x26c>)
 8001d82:	685b      	ldr	r3, [r3, #4]
 8001d84:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d8c:	d10b      	bne.n	8001da6 <HAL_RCC_OscConfig+0x5e>
 8001d8e:	4b89      	ldr	r3, [pc, #548]	; (8001fb4 <HAL_RCC_OscConfig+0x26c>)
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d06c      	beq.n	8001e74 <HAL_RCC_OscConfig+0x12c>
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	685b      	ldr	r3, [r3, #4]
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d168      	bne.n	8001e74 <HAL_RCC_OscConfig+0x12c>
 8001da2:	2301      	movs	r3, #1
 8001da4:	e24c      	b.n	8002240 <HAL_RCC_OscConfig+0x4f8>
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	685b      	ldr	r3, [r3, #4]
 8001daa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001dae:	d106      	bne.n	8001dbe <HAL_RCC_OscConfig+0x76>
 8001db0:	4b80      	ldr	r3, [pc, #512]	; (8001fb4 <HAL_RCC_OscConfig+0x26c>)
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	4a7f      	ldr	r2, [pc, #508]	; (8001fb4 <HAL_RCC_OscConfig+0x26c>)
 8001db6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001dba:	6013      	str	r3, [r2, #0]
 8001dbc:	e02e      	b.n	8001e1c <HAL_RCC_OscConfig+0xd4>
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	685b      	ldr	r3, [r3, #4]
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d10c      	bne.n	8001de0 <HAL_RCC_OscConfig+0x98>
 8001dc6:	4b7b      	ldr	r3, [pc, #492]	; (8001fb4 <HAL_RCC_OscConfig+0x26c>)
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	4a7a      	ldr	r2, [pc, #488]	; (8001fb4 <HAL_RCC_OscConfig+0x26c>)
 8001dcc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001dd0:	6013      	str	r3, [r2, #0]
 8001dd2:	4b78      	ldr	r3, [pc, #480]	; (8001fb4 <HAL_RCC_OscConfig+0x26c>)
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	4a77      	ldr	r2, [pc, #476]	; (8001fb4 <HAL_RCC_OscConfig+0x26c>)
 8001dd8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ddc:	6013      	str	r3, [r2, #0]
 8001dde:	e01d      	b.n	8001e1c <HAL_RCC_OscConfig+0xd4>
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	685b      	ldr	r3, [r3, #4]
 8001de4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001de8:	d10c      	bne.n	8001e04 <HAL_RCC_OscConfig+0xbc>
 8001dea:	4b72      	ldr	r3, [pc, #456]	; (8001fb4 <HAL_RCC_OscConfig+0x26c>)
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	4a71      	ldr	r2, [pc, #452]	; (8001fb4 <HAL_RCC_OscConfig+0x26c>)
 8001df0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001df4:	6013      	str	r3, [r2, #0]
 8001df6:	4b6f      	ldr	r3, [pc, #444]	; (8001fb4 <HAL_RCC_OscConfig+0x26c>)
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	4a6e      	ldr	r2, [pc, #440]	; (8001fb4 <HAL_RCC_OscConfig+0x26c>)
 8001dfc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e00:	6013      	str	r3, [r2, #0]
 8001e02:	e00b      	b.n	8001e1c <HAL_RCC_OscConfig+0xd4>
 8001e04:	4b6b      	ldr	r3, [pc, #428]	; (8001fb4 <HAL_RCC_OscConfig+0x26c>)
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	4a6a      	ldr	r2, [pc, #424]	; (8001fb4 <HAL_RCC_OscConfig+0x26c>)
 8001e0a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e0e:	6013      	str	r3, [r2, #0]
 8001e10:	4b68      	ldr	r3, [pc, #416]	; (8001fb4 <HAL_RCC_OscConfig+0x26c>)
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	4a67      	ldr	r2, [pc, #412]	; (8001fb4 <HAL_RCC_OscConfig+0x26c>)
 8001e16:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e1a:	6013      	str	r3, [r2, #0]
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	685b      	ldr	r3, [r3, #4]
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d013      	beq.n	8001e4c <HAL_RCC_OscConfig+0x104>
 8001e24:	f7ff fc9c 	bl	8001760 <HAL_GetTick>
 8001e28:	6138      	str	r0, [r7, #16]
 8001e2a:	e008      	b.n	8001e3e <HAL_RCC_OscConfig+0xf6>
 8001e2c:	f7ff fc98 	bl	8001760 <HAL_GetTick>
 8001e30:	4602      	mov	r2, r0
 8001e32:	693b      	ldr	r3, [r7, #16]
 8001e34:	1ad3      	subs	r3, r2, r3
 8001e36:	2b64      	cmp	r3, #100	; 0x64
 8001e38:	d901      	bls.n	8001e3e <HAL_RCC_OscConfig+0xf6>
 8001e3a:	2303      	movs	r3, #3
 8001e3c:	e200      	b.n	8002240 <HAL_RCC_OscConfig+0x4f8>
 8001e3e:	4b5d      	ldr	r3, [pc, #372]	; (8001fb4 <HAL_RCC_OscConfig+0x26c>)
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d0f0      	beq.n	8001e2c <HAL_RCC_OscConfig+0xe4>
 8001e4a:	e014      	b.n	8001e76 <HAL_RCC_OscConfig+0x12e>
 8001e4c:	f7ff fc88 	bl	8001760 <HAL_GetTick>
 8001e50:	6138      	str	r0, [r7, #16]
 8001e52:	e008      	b.n	8001e66 <HAL_RCC_OscConfig+0x11e>
 8001e54:	f7ff fc84 	bl	8001760 <HAL_GetTick>
 8001e58:	4602      	mov	r2, r0
 8001e5a:	693b      	ldr	r3, [r7, #16]
 8001e5c:	1ad3      	subs	r3, r2, r3
 8001e5e:	2b64      	cmp	r3, #100	; 0x64
 8001e60:	d901      	bls.n	8001e66 <HAL_RCC_OscConfig+0x11e>
 8001e62:	2303      	movs	r3, #3
 8001e64:	e1ec      	b.n	8002240 <HAL_RCC_OscConfig+0x4f8>
 8001e66:	4b53      	ldr	r3, [pc, #332]	; (8001fb4 <HAL_RCC_OscConfig+0x26c>)
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d1f0      	bne.n	8001e54 <HAL_RCC_OscConfig+0x10c>
 8001e72:	e000      	b.n	8001e76 <HAL_RCC_OscConfig+0x12e>
 8001e74:	bf00      	nop
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f003 0302 	and.w	r3, r3, #2
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d063      	beq.n	8001f4a <HAL_RCC_OscConfig+0x202>
 8001e82:	4b4c      	ldr	r3, [pc, #304]	; (8001fb4 <HAL_RCC_OscConfig+0x26c>)
 8001e84:	685b      	ldr	r3, [r3, #4]
 8001e86:	f003 030c 	and.w	r3, r3, #12
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d00b      	beq.n	8001ea6 <HAL_RCC_OscConfig+0x15e>
 8001e8e:	4b49      	ldr	r3, [pc, #292]	; (8001fb4 <HAL_RCC_OscConfig+0x26c>)
 8001e90:	685b      	ldr	r3, [r3, #4]
 8001e92:	f003 030c 	and.w	r3, r3, #12
 8001e96:	2b08      	cmp	r3, #8
 8001e98:	d11c      	bne.n	8001ed4 <HAL_RCC_OscConfig+0x18c>
 8001e9a:	4b46      	ldr	r3, [pc, #280]	; (8001fb4 <HAL_RCC_OscConfig+0x26c>)
 8001e9c:	685b      	ldr	r3, [r3, #4]
 8001e9e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d116      	bne.n	8001ed4 <HAL_RCC_OscConfig+0x18c>
 8001ea6:	4b43      	ldr	r3, [pc, #268]	; (8001fb4 <HAL_RCC_OscConfig+0x26c>)
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f003 0302 	and.w	r3, r3, #2
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d005      	beq.n	8001ebe <HAL_RCC_OscConfig+0x176>
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	691b      	ldr	r3, [r3, #16]
 8001eb6:	2b01      	cmp	r3, #1
 8001eb8:	d001      	beq.n	8001ebe <HAL_RCC_OscConfig+0x176>
 8001eba:	2301      	movs	r3, #1
 8001ebc:	e1c0      	b.n	8002240 <HAL_RCC_OscConfig+0x4f8>
 8001ebe:	4b3d      	ldr	r3, [pc, #244]	; (8001fb4 <HAL_RCC_OscConfig+0x26c>)
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	695b      	ldr	r3, [r3, #20]
 8001eca:	00db      	lsls	r3, r3, #3
 8001ecc:	4939      	ldr	r1, [pc, #228]	; (8001fb4 <HAL_RCC_OscConfig+0x26c>)
 8001ece:	4313      	orrs	r3, r2
 8001ed0:	600b      	str	r3, [r1, #0]
 8001ed2:	e03a      	b.n	8001f4a <HAL_RCC_OscConfig+0x202>
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	691b      	ldr	r3, [r3, #16]
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d020      	beq.n	8001f1e <HAL_RCC_OscConfig+0x1d6>
 8001edc:	4b36      	ldr	r3, [pc, #216]	; (8001fb8 <HAL_RCC_OscConfig+0x270>)
 8001ede:	2201      	movs	r2, #1
 8001ee0:	601a      	str	r2, [r3, #0]
 8001ee2:	f7ff fc3d 	bl	8001760 <HAL_GetTick>
 8001ee6:	6138      	str	r0, [r7, #16]
 8001ee8:	e008      	b.n	8001efc <HAL_RCC_OscConfig+0x1b4>
 8001eea:	f7ff fc39 	bl	8001760 <HAL_GetTick>
 8001eee:	4602      	mov	r2, r0
 8001ef0:	693b      	ldr	r3, [r7, #16]
 8001ef2:	1ad3      	subs	r3, r2, r3
 8001ef4:	2b02      	cmp	r3, #2
 8001ef6:	d901      	bls.n	8001efc <HAL_RCC_OscConfig+0x1b4>
 8001ef8:	2303      	movs	r3, #3
 8001efa:	e1a1      	b.n	8002240 <HAL_RCC_OscConfig+0x4f8>
 8001efc:	4b2d      	ldr	r3, [pc, #180]	; (8001fb4 <HAL_RCC_OscConfig+0x26c>)
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f003 0302 	and.w	r3, r3, #2
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d0f0      	beq.n	8001eea <HAL_RCC_OscConfig+0x1a2>
 8001f08:	4b2a      	ldr	r3, [pc, #168]	; (8001fb4 <HAL_RCC_OscConfig+0x26c>)
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	695b      	ldr	r3, [r3, #20]
 8001f14:	00db      	lsls	r3, r3, #3
 8001f16:	4927      	ldr	r1, [pc, #156]	; (8001fb4 <HAL_RCC_OscConfig+0x26c>)
 8001f18:	4313      	orrs	r3, r2
 8001f1a:	600b      	str	r3, [r1, #0]
 8001f1c:	e015      	b.n	8001f4a <HAL_RCC_OscConfig+0x202>
 8001f1e:	4b26      	ldr	r3, [pc, #152]	; (8001fb8 <HAL_RCC_OscConfig+0x270>)
 8001f20:	2200      	movs	r2, #0
 8001f22:	601a      	str	r2, [r3, #0]
 8001f24:	f7ff fc1c 	bl	8001760 <HAL_GetTick>
 8001f28:	6138      	str	r0, [r7, #16]
 8001f2a:	e008      	b.n	8001f3e <HAL_RCC_OscConfig+0x1f6>
 8001f2c:	f7ff fc18 	bl	8001760 <HAL_GetTick>
 8001f30:	4602      	mov	r2, r0
 8001f32:	693b      	ldr	r3, [r7, #16]
 8001f34:	1ad3      	subs	r3, r2, r3
 8001f36:	2b02      	cmp	r3, #2
 8001f38:	d901      	bls.n	8001f3e <HAL_RCC_OscConfig+0x1f6>
 8001f3a:	2303      	movs	r3, #3
 8001f3c:	e180      	b.n	8002240 <HAL_RCC_OscConfig+0x4f8>
 8001f3e:	4b1d      	ldr	r3, [pc, #116]	; (8001fb4 <HAL_RCC_OscConfig+0x26c>)
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f003 0302 	and.w	r3, r3, #2
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d1f0      	bne.n	8001f2c <HAL_RCC_OscConfig+0x1e4>
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f003 0308 	and.w	r3, r3, #8
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d03a      	beq.n	8001fcc <HAL_RCC_OscConfig+0x284>
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	699b      	ldr	r3, [r3, #24]
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d019      	beq.n	8001f92 <HAL_RCC_OscConfig+0x24a>
 8001f5e:	4b17      	ldr	r3, [pc, #92]	; (8001fbc <HAL_RCC_OscConfig+0x274>)
 8001f60:	2201      	movs	r2, #1
 8001f62:	601a      	str	r2, [r3, #0]
 8001f64:	f7ff fbfc 	bl	8001760 <HAL_GetTick>
 8001f68:	6138      	str	r0, [r7, #16]
 8001f6a:	e008      	b.n	8001f7e <HAL_RCC_OscConfig+0x236>
 8001f6c:	f7ff fbf8 	bl	8001760 <HAL_GetTick>
 8001f70:	4602      	mov	r2, r0
 8001f72:	693b      	ldr	r3, [r7, #16]
 8001f74:	1ad3      	subs	r3, r2, r3
 8001f76:	2b02      	cmp	r3, #2
 8001f78:	d901      	bls.n	8001f7e <HAL_RCC_OscConfig+0x236>
 8001f7a:	2303      	movs	r3, #3
 8001f7c:	e160      	b.n	8002240 <HAL_RCC_OscConfig+0x4f8>
 8001f7e:	4b0d      	ldr	r3, [pc, #52]	; (8001fb4 <HAL_RCC_OscConfig+0x26c>)
 8001f80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f82:	f003 0302 	and.w	r3, r3, #2
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d0f0      	beq.n	8001f6c <HAL_RCC_OscConfig+0x224>
 8001f8a:	2001      	movs	r0, #1
 8001f8c:	f000 fa9c 	bl	80024c8 <RCC_Delay>
 8001f90:	e01c      	b.n	8001fcc <HAL_RCC_OscConfig+0x284>
 8001f92:	4b0a      	ldr	r3, [pc, #40]	; (8001fbc <HAL_RCC_OscConfig+0x274>)
 8001f94:	2200      	movs	r2, #0
 8001f96:	601a      	str	r2, [r3, #0]
 8001f98:	f7ff fbe2 	bl	8001760 <HAL_GetTick>
 8001f9c:	6138      	str	r0, [r7, #16]
 8001f9e:	e00f      	b.n	8001fc0 <HAL_RCC_OscConfig+0x278>
 8001fa0:	f7ff fbde 	bl	8001760 <HAL_GetTick>
 8001fa4:	4602      	mov	r2, r0
 8001fa6:	693b      	ldr	r3, [r7, #16]
 8001fa8:	1ad3      	subs	r3, r2, r3
 8001faa:	2b02      	cmp	r3, #2
 8001fac:	d908      	bls.n	8001fc0 <HAL_RCC_OscConfig+0x278>
 8001fae:	2303      	movs	r3, #3
 8001fb0:	e146      	b.n	8002240 <HAL_RCC_OscConfig+0x4f8>
 8001fb2:	bf00      	nop
 8001fb4:	40021000 	.word	0x40021000
 8001fb8:	42420000 	.word	0x42420000
 8001fbc:	42420480 	.word	0x42420480
 8001fc0:	4b92      	ldr	r3, [pc, #584]	; (800220c <HAL_RCC_OscConfig+0x4c4>)
 8001fc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fc4:	f003 0302 	and.w	r3, r3, #2
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d1e9      	bne.n	8001fa0 <HAL_RCC_OscConfig+0x258>
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f003 0304 	and.w	r3, r3, #4
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	f000 80a6 	beq.w	8002126 <HAL_RCC_OscConfig+0x3de>
 8001fda:	2300      	movs	r3, #0
 8001fdc:	75fb      	strb	r3, [r7, #23]
 8001fde:	4b8b      	ldr	r3, [pc, #556]	; (800220c <HAL_RCC_OscConfig+0x4c4>)
 8001fe0:	69db      	ldr	r3, [r3, #28]
 8001fe2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d10d      	bne.n	8002006 <HAL_RCC_OscConfig+0x2be>
 8001fea:	4b88      	ldr	r3, [pc, #544]	; (800220c <HAL_RCC_OscConfig+0x4c4>)
 8001fec:	69db      	ldr	r3, [r3, #28]
 8001fee:	4a87      	ldr	r2, [pc, #540]	; (800220c <HAL_RCC_OscConfig+0x4c4>)
 8001ff0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ff4:	61d3      	str	r3, [r2, #28]
 8001ff6:	4b85      	ldr	r3, [pc, #532]	; (800220c <HAL_RCC_OscConfig+0x4c4>)
 8001ff8:	69db      	ldr	r3, [r3, #28]
 8001ffa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ffe:	60bb      	str	r3, [r7, #8]
 8002000:	68bb      	ldr	r3, [r7, #8]
 8002002:	2301      	movs	r3, #1
 8002004:	75fb      	strb	r3, [r7, #23]
 8002006:	4b82      	ldr	r3, [pc, #520]	; (8002210 <HAL_RCC_OscConfig+0x4c8>)
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800200e:	2b00      	cmp	r3, #0
 8002010:	d118      	bne.n	8002044 <HAL_RCC_OscConfig+0x2fc>
 8002012:	4b7f      	ldr	r3, [pc, #508]	; (8002210 <HAL_RCC_OscConfig+0x4c8>)
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	4a7e      	ldr	r2, [pc, #504]	; (8002210 <HAL_RCC_OscConfig+0x4c8>)
 8002018:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800201c:	6013      	str	r3, [r2, #0]
 800201e:	f7ff fb9f 	bl	8001760 <HAL_GetTick>
 8002022:	6138      	str	r0, [r7, #16]
 8002024:	e008      	b.n	8002038 <HAL_RCC_OscConfig+0x2f0>
 8002026:	f7ff fb9b 	bl	8001760 <HAL_GetTick>
 800202a:	4602      	mov	r2, r0
 800202c:	693b      	ldr	r3, [r7, #16]
 800202e:	1ad3      	subs	r3, r2, r3
 8002030:	2b64      	cmp	r3, #100	; 0x64
 8002032:	d901      	bls.n	8002038 <HAL_RCC_OscConfig+0x2f0>
 8002034:	2303      	movs	r3, #3
 8002036:	e103      	b.n	8002240 <HAL_RCC_OscConfig+0x4f8>
 8002038:	4b75      	ldr	r3, [pc, #468]	; (8002210 <HAL_RCC_OscConfig+0x4c8>)
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002040:	2b00      	cmp	r3, #0
 8002042:	d0f0      	beq.n	8002026 <HAL_RCC_OscConfig+0x2de>
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	68db      	ldr	r3, [r3, #12]
 8002048:	2b01      	cmp	r3, #1
 800204a:	d106      	bne.n	800205a <HAL_RCC_OscConfig+0x312>
 800204c:	4b6f      	ldr	r3, [pc, #444]	; (800220c <HAL_RCC_OscConfig+0x4c4>)
 800204e:	6a1b      	ldr	r3, [r3, #32]
 8002050:	4a6e      	ldr	r2, [pc, #440]	; (800220c <HAL_RCC_OscConfig+0x4c4>)
 8002052:	f043 0301 	orr.w	r3, r3, #1
 8002056:	6213      	str	r3, [r2, #32]
 8002058:	e02d      	b.n	80020b6 <HAL_RCC_OscConfig+0x36e>
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	68db      	ldr	r3, [r3, #12]
 800205e:	2b00      	cmp	r3, #0
 8002060:	d10c      	bne.n	800207c <HAL_RCC_OscConfig+0x334>
 8002062:	4b6a      	ldr	r3, [pc, #424]	; (800220c <HAL_RCC_OscConfig+0x4c4>)
 8002064:	6a1b      	ldr	r3, [r3, #32]
 8002066:	4a69      	ldr	r2, [pc, #420]	; (800220c <HAL_RCC_OscConfig+0x4c4>)
 8002068:	f023 0301 	bic.w	r3, r3, #1
 800206c:	6213      	str	r3, [r2, #32]
 800206e:	4b67      	ldr	r3, [pc, #412]	; (800220c <HAL_RCC_OscConfig+0x4c4>)
 8002070:	6a1b      	ldr	r3, [r3, #32]
 8002072:	4a66      	ldr	r2, [pc, #408]	; (800220c <HAL_RCC_OscConfig+0x4c4>)
 8002074:	f023 0304 	bic.w	r3, r3, #4
 8002078:	6213      	str	r3, [r2, #32]
 800207a:	e01c      	b.n	80020b6 <HAL_RCC_OscConfig+0x36e>
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	68db      	ldr	r3, [r3, #12]
 8002080:	2b05      	cmp	r3, #5
 8002082:	d10c      	bne.n	800209e <HAL_RCC_OscConfig+0x356>
 8002084:	4b61      	ldr	r3, [pc, #388]	; (800220c <HAL_RCC_OscConfig+0x4c4>)
 8002086:	6a1b      	ldr	r3, [r3, #32]
 8002088:	4a60      	ldr	r2, [pc, #384]	; (800220c <HAL_RCC_OscConfig+0x4c4>)
 800208a:	f043 0304 	orr.w	r3, r3, #4
 800208e:	6213      	str	r3, [r2, #32]
 8002090:	4b5e      	ldr	r3, [pc, #376]	; (800220c <HAL_RCC_OscConfig+0x4c4>)
 8002092:	6a1b      	ldr	r3, [r3, #32]
 8002094:	4a5d      	ldr	r2, [pc, #372]	; (800220c <HAL_RCC_OscConfig+0x4c4>)
 8002096:	f043 0301 	orr.w	r3, r3, #1
 800209a:	6213      	str	r3, [r2, #32]
 800209c:	e00b      	b.n	80020b6 <HAL_RCC_OscConfig+0x36e>
 800209e:	4b5b      	ldr	r3, [pc, #364]	; (800220c <HAL_RCC_OscConfig+0x4c4>)
 80020a0:	6a1b      	ldr	r3, [r3, #32]
 80020a2:	4a5a      	ldr	r2, [pc, #360]	; (800220c <HAL_RCC_OscConfig+0x4c4>)
 80020a4:	f023 0301 	bic.w	r3, r3, #1
 80020a8:	6213      	str	r3, [r2, #32]
 80020aa:	4b58      	ldr	r3, [pc, #352]	; (800220c <HAL_RCC_OscConfig+0x4c4>)
 80020ac:	6a1b      	ldr	r3, [r3, #32]
 80020ae:	4a57      	ldr	r2, [pc, #348]	; (800220c <HAL_RCC_OscConfig+0x4c4>)
 80020b0:	f023 0304 	bic.w	r3, r3, #4
 80020b4:	6213      	str	r3, [r2, #32]
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	68db      	ldr	r3, [r3, #12]
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d015      	beq.n	80020ea <HAL_RCC_OscConfig+0x3a2>
 80020be:	f7ff fb4f 	bl	8001760 <HAL_GetTick>
 80020c2:	6138      	str	r0, [r7, #16]
 80020c4:	e00a      	b.n	80020dc <HAL_RCC_OscConfig+0x394>
 80020c6:	f7ff fb4b 	bl	8001760 <HAL_GetTick>
 80020ca:	4602      	mov	r2, r0
 80020cc:	693b      	ldr	r3, [r7, #16]
 80020ce:	1ad3      	subs	r3, r2, r3
 80020d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80020d4:	4293      	cmp	r3, r2
 80020d6:	d901      	bls.n	80020dc <HAL_RCC_OscConfig+0x394>
 80020d8:	2303      	movs	r3, #3
 80020da:	e0b1      	b.n	8002240 <HAL_RCC_OscConfig+0x4f8>
 80020dc:	4b4b      	ldr	r3, [pc, #300]	; (800220c <HAL_RCC_OscConfig+0x4c4>)
 80020de:	6a1b      	ldr	r3, [r3, #32]
 80020e0:	f003 0302 	and.w	r3, r3, #2
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d0ee      	beq.n	80020c6 <HAL_RCC_OscConfig+0x37e>
 80020e8:	e014      	b.n	8002114 <HAL_RCC_OscConfig+0x3cc>
 80020ea:	f7ff fb39 	bl	8001760 <HAL_GetTick>
 80020ee:	6138      	str	r0, [r7, #16]
 80020f0:	e00a      	b.n	8002108 <HAL_RCC_OscConfig+0x3c0>
 80020f2:	f7ff fb35 	bl	8001760 <HAL_GetTick>
 80020f6:	4602      	mov	r2, r0
 80020f8:	693b      	ldr	r3, [r7, #16]
 80020fa:	1ad3      	subs	r3, r2, r3
 80020fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002100:	4293      	cmp	r3, r2
 8002102:	d901      	bls.n	8002108 <HAL_RCC_OscConfig+0x3c0>
 8002104:	2303      	movs	r3, #3
 8002106:	e09b      	b.n	8002240 <HAL_RCC_OscConfig+0x4f8>
 8002108:	4b40      	ldr	r3, [pc, #256]	; (800220c <HAL_RCC_OscConfig+0x4c4>)
 800210a:	6a1b      	ldr	r3, [r3, #32]
 800210c:	f003 0302 	and.w	r3, r3, #2
 8002110:	2b00      	cmp	r3, #0
 8002112:	d1ee      	bne.n	80020f2 <HAL_RCC_OscConfig+0x3aa>
 8002114:	7dfb      	ldrb	r3, [r7, #23]
 8002116:	2b01      	cmp	r3, #1
 8002118:	d105      	bne.n	8002126 <HAL_RCC_OscConfig+0x3de>
 800211a:	4b3c      	ldr	r3, [pc, #240]	; (800220c <HAL_RCC_OscConfig+0x4c4>)
 800211c:	69db      	ldr	r3, [r3, #28]
 800211e:	4a3b      	ldr	r2, [pc, #236]	; (800220c <HAL_RCC_OscConfig+0x4c4>)
 8002120:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002124:	61d3      	str	r3, [r2, #28]
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	69db      	ldr	r3, [r3, #28]
 800212a:	2b00      	cmp	r3, #0
 800212c:	f000 8087 	beq.w	800223e <HAL_RCC_OscConfig+0x4f6>
 8002130:	4b36      	ldr	r3, [pc, #216]	; (800220c <HAL_RCC_OscConfig+0x4c4>)
 8002132:	685b      	ldr	r3, [r3, #4]
 8002134:	f003 030c 	and.w	r3, r3, #12
 8002138:	2b08      	cmp	r3, #8
 800213a:	d061      	beq.n	8002200 <HAL_RCC_OscConfig+0x4b8>
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	69db      	ldr	r3, [r3, #28]
 8002140:	2b02      	cmp	r3, #2
 8002142:	d146      	bne.n	80021d2 <HAL_RCC_OscConfig+0x48a>
 8002144:	4b33      	ldr	r3, [pc, #204]	; (8002214 <HAL_RCC_OscConfig+0x4cc>)
 8002146:	2200      	movs	r2, #0
 8002148:	601a      	str	r2, [r3, #0]
 800214a:	f7ff fb09 	bl	8001760 <HAL_GetTick>
 800214e:	6138      	str	r0, [r7, #16]
 8002150:	e008      	b.n	8002164 <HAL_RCC_OscConfig+0x41c>
 8002152:	f7ff fb05 	bl	8001760 <HAL_GetTick>
 8002156:	4602      	mov	r2, r0
 8002158:	693b      	ldr	r3, [r7, #16]
 800215a:	1ad3      	subs	r3, r2, r3
 800215c:	2b02      	cmp	r3, #2
 800215e:	d901      	bls.n	8002164 <HAL_RCC_OscConfig+0x41c>
 8002160:	2303      	movs	r3, #3
 8002162:	e06d      	b.n	8002240 <HAL_RCC_OscConfig+0x4f8>
 8002164:	4b29      	ldr	r3, [pc, #164]	; (800220c <HAL_RCC_OscConfig+0x4c4>)
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800216c:	2b00      	cmp	r3, #0
 800216e:	d1f0      	bne.n	8002152 <HAL_RCC_OscConfig+0x40a>
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	6a1b      	ldr	r3, [r3, #32]
 8002174:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002178:	d108      	bne.n	800218c <HAL_RCC_OscConfig+0x444>
 800217a:	4b24      	ldr	r3, [pc, #144]	; (800220c <HAL_RCC_OscConfig+0x4c4>)
 800217c:	685b      	ldr	r3, [r3, #4]
 800217e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	689b      	ldr	r3, [r3, #8]
 8002186:	4921      	ldr	r1, [pc, #132]	; (800220c <HAL_RCC_OscConfig+0x4c4>)
 8002188:	4313      	orrs	r3, r2
 800218a:	604b      	str	r3, [r1, #4]
 800218c:	4b1f      	ldr	r3, [pc, #124]	; (800220c <HAL_RCC_OscConfig+0x4c4>)
 800218e:	685b      	ldr	r3, [r3, #4]
 8002190:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	6a19      	ldr	r1, [r3, #32]
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800219c:	430b      	orrs	r3, r1
 800219e:	491b      	ldr	r1, [pc, #108]	; (800220c <HAL_RCC_OscConfig+0x4c4>)
 80021a0:	4313      	orrs	r3, r2
 80021a2:	604b      	str	r3, [r1, #4]
 80021a4:	4b1b      	ldr	r3, [pc, #108]	; (8002214 <HAL_RCC_OscConfig+0x4cc>)
 80021a6:	2201      	movs	r2, #1
 80021a8:	601a      	str	r2, [r3, #0]
 80021aa:	f7ff fad9 	bl	8001760 <HAL_GetTick>
 80021ae:	6138      	str	r0, [r7, #16]
 80021b0:	e008      	b.n	80021c4 <HAL_RCC_OscConfig+0x47c>
 80021b2:	f7ff fad5 	bl	8001760 <HAL_GetTick>
 80021b6:	4602      	mov	r2, r0
 80021b8:	693b      	ldr	r3, [r7, #16]
 80021ba:	1ad3      	subs	r3, r2, r3
 80021bc:	2b02      	cmp	r3, #2
 80021be:	d901      	bls.n	80021c4 <HAL_RCC_OscConfig+0x47c>
 80021c0:	2303      	movs	r3, #3
 80021c2:	e03d      	b.n	8002240 <HAL_RCC_OscConfig+0x4f8>
 80021c4:	4b11      	ldr	r3, [pc, #68]	; (800220c <HAL_RCC_OscConfig+0x4c4>)
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d0f0      	beq.n	80021b2 <HAL_RCC_OscConfig+0x46a>
 80021d0:	e035      	b.n	800223e <HAL_RCC_OscConfig+0x4f6>
 80021d2:	4b10      	ldr	r3, [pc, #64]	; (8002214 <HAL_RCC_OscConfig+0x4cc>)
 80021d4:	2200      	movs	r2, #0
 80021d6:	601a      	str	r2, [r3, #0]
 80021d8:	f7ff fac2 	bl	8001760 <HAL_GetTick>
 80021dc:	6138      	str	r0, [r7, #16]
 80021de:	e008      	b.n	80021f2 <HAL_RCC_OscConfig+0x4aa>
 80021e0:	f7ff fabe 	bl	8001760 <HAL_GetTick>
 80021e4:	4602      	mov	r2, r0
 80021e6:	693b      	ldr	r3, [r7, #16]
 80021e8:	1ad3      	subs	r3, r2, r3
 80021ea:	2b02      	cmp	r3, #2
 80021ec:	d901      	bls.n	80021f2 <HAL_RCC_OscConfig+0x4aa>
 80021ee:	2303      	movs	r3, #3
 80021f0:	e026      	b.n	8002240 <HAL_RCC_OscConfig+0x4f8>
 80021f2:	4b06      	ldr	r3, [pc, #24]	; (800220c <HAL_RCC_OscConfig+0x4c4>)
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d1f0      	bne.n	80021e0 <HAL_RCC_OscConfig+0x498>
 80021fe:	e01e      	b.n	800223e <HAL_RCC_OscConfig+0x4f6>
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	69db      	ldr	r3, [r3, #28]
 8002204:	2b01      	cmp	r3, #1
 8002206:	d107      	bne.n	8002218 <HAL_RCC_OscConfig+0x4d0>
 8002208:	2301      	movs	r3, #1
 800220a:	e019      	b.n	8002240 <HAL_RCC_OscConfig+0x4f8>
 800220c:	40021000 	.word	0x40021000
 8002210:	40007000 	.word	0x40007000
 8002214:	42420060 	.word	0x42420060
 8002218:	4b0b      	ldr	r3, [pc, #44]	; (8002248 <HAL_RCC_OscConfig+0x500>)
 800221a:	685b      	ldr	r3, [r3, #4]
 800221c:	60fb      	str	r3, [r7, #12]
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	6a1b      	ldr	r3, [r3, #32]
 8002228:	429a      	cmp	r2, r3
 800222a:	d106      	bne.n	800223a <HAL_RCC_OscConfig+0x4f2>
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002236:	429a      	cmp	r2, r3
 8002238:	d001      	beq.n	800223e <HAL_RCC_OscConfig+0x4f6>
 800223a:	2301      	movs	r3, #1
 800223c:	e000      	b.n	8002240 <HAL_RCC_OscConfig+0x4f8>
 800223e:	2300      	movs	r3, #0
 8002240:	4618      	mov	r0, r3
 8002242:	3718      	adds	r7, #24
 8002244:	46bd      	mov	sp, r7
 8002246:	bd80      	pop	{r7, pc}
 8002248:	40021000 	.word	0x40021000

0800224c <HAL_RCC_ClockConfig>:
 800224c:	b580      	push	{r7, lr}
 800224e:	b084      	sub	sp, #16
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
 8002254:	6039      	str	r1, [r7, #0]
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	2b00      	cmp	r3, #0
 800225a:	d101      	bne.n	8002260 <HAL_RCC_ClockConfig+0x14>
 800225c:	2301      	movs	r3, #1
 800225e:	e0d0      	b.n	8002402 <HAL_RCC_ClockConfig+0x1b6>
 8002260:	4b6a      	ldr	r3, [pc, #424]	; (800240c <HAL_RCC_ClockConfig+0x1c0>)
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f003 0307 	and.w	r3, r3, #7
 8002268:	683a      	ldr	r2, [r7, #0]
 800226a:	429a      	cmp	r2, r3
 800226c:	d910      	bls.n	8002290 <HAL_RCC_ClockConfig+0x44>
 800226e:	4b67      	ldr	r3, [pc, #412]	; (800240c <HAL_RCC_ClockConfig+0x1c0>)
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f023 0207 	bic.w	r2, r3, #7
 8002276:	4965      	ldr	r1, [pc, #404]	; (800240c <HAL_RCC_ClockConfig+0x1c0>)
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	4313      	orrs	r3, r2
 800227c:	600b      	str	r3, [r1, #0]
 800227e:	4b63      	ldr	r3, [pc, #396]	; (800240c <HAL_RCC_ClockConfig+0x1c0>)
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f003 0307 	and.w	r3, r3, #7
 8002286:	683a      	ldr	r2, [r7, #0]
 8002288:	429a      	cmp	r2, r3
 800228a:	d001      	beq.n	8002290 <HAL_RCC_ClockConfig+0x44>
 800228c:	2301      	movs	r3, #1
 800228e:	e0b8      	b.n	8002402 <HAL_RCC_ClockConfig+0x1b6>
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f003 0302 	and.w	r3, r3, #2
 8002298:	2b00      	cmp	r3, #0
 800229a:	d020      	beq.n	80022de <HAL_RCC_ClockConfig+0x92>
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f003 0304 	and.w	r3, r3, #4
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d005      	beq.n	80022b4 <HAL_RCC_ClockConfig+0x68>
 80022a8:	4b59      	ldr	r3, [pc, #356]	; (8002410 <HAL_RCC_ClockConfig+0x1c4>)
 80022aa:	685b      	ldr	r3, [r3, #4]
 80022ac:	4a58      	ldr	r2, [pc, #352]	; (8002410 <HAL_RCC_ClockConfig+0x1c4>)
 80022ae:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80022b2:	6053      	str	r3, [r2, #4]
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f003 0308 	and.w	r3, r3, #8
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d005      	beq.n	80022cc <HAL_RCC_ClockConfig+0x80>
 80022c0:	4b53      	ldr	r3, [pc, #332]	; (8002410 <HAL_RCC_ClockConfig+0x1c4>)
 80022c2:	685b      	ldr	r3, [r3, #4]
 80022c4:	4a52      	ldr	r2, [pc, #328]	; (8002410 <HAL_RCC_ClockConfig+0x1c4>)
 80022c6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80022ca:	6053      	str	r3, [r2, #4]
 80022cc:	4b50      	ldr	r3, [pc, #320]	; (8002410 <HAL_RCC_ClockConfig+0x1c4>)
 80022ce:	685b      	ldr	r3, [r3, #4]
 80022d0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	689b      	ldr	r3, [r3, #8]
 80022d8:	494d      	ldr	r1, [pc, #308]	; (8002410 <HAL_RCC_ClockConfig+0x1c4>)
 80022da:	4313      	orrs	r3, r2
 80022dc:	604b      	str	r3, [r1, #4]
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f003 0301 	and.w	r3, r3, #1
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d040      	beq.n	800236c <HAL_RCC_ClockConfig+0x120>
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	685b      	ldr	r3, [r3, #4]
 80022ee:	2b01      	cmp	r3, #1
 80022f0:	d107      	bne.n	8002302 <HAL_RCC_ClockConfig+0xb6>
 80022f2:	4b47      	ldr	r3, [pc, #284]	; (8002410 <HAL_RCC_ClockConfig+0x1c4>)
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d115      	bne.n	800232a <HAL_RCC_ClockConfig+0xde>
 80022fe:	2301      	movs	r3, #1
 8002300:	e07f      	b.n	8002402 <HAL_RCC_ClockConfig+0x1b6>
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	685b      	ldr	r3, [r3, #4]
 8002306:	2b02      	cmp	r3, #2
 8002308:	d107      	bne.n	800231a <HAL_RCC_ClockConfig+0xce>
 800230a:	4b41      	ldr	r3, [pc, #260]	; (8002410 <HAL_RCC_ClockConfig+0x1c4>)
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002312:	2b00      	cmp	r3, #0
 8002314:	d109      	bne.n	800232a <HAL_RCC_ClockConfig+0xde>
 8002316:	2301      	movs	r3, #1
 8002318:	e073      	b.n	8002402 <HAL_RCC_ClockConfig+0x1b6>
 800231a:	4b3d      	ldr	r3, [pc, #244]	; (8002410 <HAL_RCC_ClockConfig+0x1c4>)
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f003 0302 	and.w	r3, r3, #2
 8002322:	2b00      	cmp	r3, #0
 8002324:	d101      	bne.n	800232a <HAL_RCC_ClockConfig+0xde>
 8002326:	2301      	movs	r3, #1
 8002328:	e06b      	b.n	8002402 <HAL_RCC_ClockConfig+0x1b6>
 800232a:	4b39      	ldr	r3, [pc, #228]	; (8002410 <HAL_RCC_ClockConfig+0x1c4>)
 800232c:	685b      	ldr	r3, [r3, #4]
 800232e:	f023 0203 	bic.w	r2, r3, #3
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	685b      	ldr	r3, [r3, #4]
 8002336:	4936      	ldr	r1, [pc, #216]	; (8002410 <HAL_RCC_ClockConfig+0x1c4>)
 8002338:	4313      	orrs	r3, r2
 800233a:	604b      	str	r3, [r1, #4]
 800233c:	f7ff fa10 	bl	8001760 <HAL_GetTick>
 8002340:	60f8      	str	r0, [r7, #12]
 8002342:	e00a      	b.n	800235a <HAL_RCC_ClockConfig+0x10e>
 8002344:	f7ff fa0c 	bl	8001760 <HAL_GetTick>
 8002348:	4602      	mov	r2, r0
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	1ad3      	subs	r3, r2, r3
 800234e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002352:	4293      	cmp	r3, r2
 8002354:	d901      	bls.n	800235a <HAL_RCC_ClockConfig+0x10e>
 8002356:	2303      	movs	r3, #3
 8002358:	e053      	b.n	8002402 <HAL_RCC_ClockConfig+0x1b6>
 800235a:	4b2d      	ldr	r3, [pc, #180]	; (8002410 <HAL_RCC_ClockConfig+0x1c4>)
 800235c:	685b      	ldr	r3, [r3, #4]
 800235e:	f003 020c 	and.w	r2, r3, #12
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	685b      	ldr	r3, [r3, #4]
 8002366:	009b      	lsls	r3, r3, #2
 8002368:	429a      	cmp	r2, r3
 800236a:	d1eb      	bne.n	8002344 <HAL_RCC_ClockConfig+0xf8>
 800236c:	4b27      	ldr	r3, [pc, #156]	; (800240c <HAL_RCC_ClockConfig+0x1c0>)
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f003 0307 	and.w	r3, r3, #7
 8002374:	683a      	ldr	r2, [r7, #0]
 8002376:	429a      	cmp	r2, r3
 8002378:	d210      	bcs.n	800239c <HAL_RCC_ClockConfig+0x150>
 800237a:	4b24      	ldr	r3, [pc, #144]	; (800240c <HAL_RCC_ClockConfig+0x1c0>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f023 0207 	bic.w	r2, r3, #7
 8002382:	4922      	ldr	r1, [pc, #136]	; (800240c <HAL_RCC_ClockConfig+0x1c0>)
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	4313      	orrs	r3, r2
 8002388:	600b      	str	r3, [r1, #0]
 800238a:	4b20      	ldr	r3, [pc, #128]	; (800240c <HAL_RCC_ClockConfig+0x1c0>)
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f003 0307 	and.w	r3, r3, #7
 8002392:	683a      	ldr	r2, [r7, #0]
 8002394:	429a      	cmp	r2, r3
 8002396:	d001      	beq.n	800239c <HAL_RCC_ClockConfig+0x150>
 8002398:	2301      	movs	r3, #1
 800239a:	e032      	b.n	8002402 <HAL_RCC_ClockConfig+0x1b6>
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f003 0304 	and.w	r3, r3, #4
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d008      	beq.n	80023ba <HAL_RCC_ClockConfig+0x16e>
 80023a8:	4b19      	ldr	r3, [pc, #100]	; (8002410 <HAL_RCC_ClockConfig+0x1c4>)
 80023aa:	685b      	ldr	r3, [r3, #4]
 80023ac:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	68db      	ldr	r3, [r3, #12]
 80023b4:	4916      	ldr	r1, [pc, #88]	; (8002410 <HAL_RCC_ClockConfig+0x1c4>)
 80023b6:	4313      	orrs	r3, r2
 80023b8:	604b      	str	r3, [r1, #4]
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f003 0308 	and.w	r3, r3, #8
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d009      	beq.n	80023da <HAL_RCC_ClockConfig+0x18e>
 80023c6:	4b12      	ldr	r3, [pc, #72]	; (8002410 <HAL_RCC_ClockConfig+0x1c4>)
 80023c8:	685b      	ldr	r3, [r3, #4]
 80023ca:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	691b      	ldr	r3, [r3, #16]
 80023d2:	00db      	lsls	r3, r3, #3
 80023d4:	490e      	ldr	r1, [pc, #56]	; (8002410 <HAL_RCC_ClockConfig+0x1c4>)
 80023d6:	4313      	orrs	r3, r2
 80023d8:	604b      	str	r3, [r1, #4]
 80023da:	f000 f821 	bl	8002420 <HAL_RCC_GetSysClockFreq>
 80023de:	4602      	mov	r2, r0
 80023e0:	4b0b      	ldr	r3, [pc, #44]	; (8002410 <HAL_RCC_ClockConfig+0x1c4>)
 80023e2:	685b      	ldr	r3, [r3, #4]
 80023e4:	091b      	lsrs	r3, r3, #4
 80023e6:	f003 030f 	and.w	r3, r3, #15
 80023ea:	490a      	ldr	r1, [pc, #40]	; (8002414 <HAL_RCC_ClockConfig+0x1c8>)
 80023ec:	5ccb      	ldrb	r3, [r1, r3]
 80023ee:	fa22 f303 	lsr.w	r3, r2, r3
 80023f2:	4a09      	ldr	r2, [pc, #36]	; (8002418 <HAL_RCC_ClockConfig+0x1cc>)
 80023f4:	6013      	str	r3, [r2, #0]
 80023f6:	4b09      	ldr	r3, [pc, #36]	; (800241c <HAL_RCC_ClockConfig+0x1d0>)
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	4618      	mov	r0, r3
 80023fc:	f7ff f96e 	bl	80016dc <HAL_InitTick>
 8002400:	2300      	movs	r3, #0
 8002402:	4618      	mov	r0, r3
 8002404:	3710      	adds	r7, #16
 8002406:	46bd      	mov	sp, r7
 8002408:	bd80      	pop	{r7, pc}
 800240a:	bf00      	nop
 800240c:	40022000 	.word	0x40022000
 8002410:	40021000 	.word	0x40021000
 8002414:	08002dc0 	.word	0x08002dc0
 8002418:	20000010 	.word	0x20000010
 800241c:	20000024 	.word	0x20000024

08002420 <HAL_RCC_GetSysClockFreq>:
 8002420:	b480      	push	{r7}
 8002422:	b087      	sub	sp, #28
 8002424:	af00      	add	r7, sp, #0
 8002426:	2300      	movs	r3, #0
 8002428:	60fb      	str	r3, [r7, #12]
 800242a:	2300      	movs	r3, #0
 800242c:	60bb      	str	r3, [r7, #8]
 800242e:	2300      	movs	r3, #0
 8002430:	617b      	str	r3, [r7, #20]
 8002432:	2300      	movs	r3, #0
 8002434:	607b      	str	r3, [r7, #4]
 8002436:	2300      	movs	r3, #0
 8002438:	613b      	str	r3, [r7, #16]
 800243a:	4b1e      	ldr	r3, [pc, #120]	; (80024b4 <HAL_RCC_GetSysClockFreq+0x94>)
 800243c:	685b      	ldr	r3, [r3, #4]
 800243e:	60fb      	str	r3, [r7, #12]
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	f003 030c 	and.w	r3, r3, #12
 8002446:	2b04      	cmp	r3, #4
 8002448:	d002      	beq.n	8002450 <HAL_RCC_GetSysClockFreq+0x30>
 800244a:	2b08      	cmp	r3, #8
 800244c:	d003      	beq.n	8002456 <HAL_RCC_GetSysClockFreq+0x36>
 800244e:	e027      	b.n	80024a0 <HAL_RCC_GetSysClockFreq+0x80>
 8002450:	4b19      	ldr	r3, [pc, #100]	; (80024b8 <HAL_RCC_GetSysClockFreq+0x98>)
 8002452:	613b      	str	r3, [r7, #16]
 8002454:	e027      	b.n	80024a6 <HAL_RCC_GetSysClockFreq+0x86>
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	0c9b      	lsrs	r3, r3, #18
 800245a:	f003 030f 	and.w	r3, r3, #15
 800245e:	4a17      	ldr	r2, [pc, #92]	; (80024bc <HAL_RCC_GetSysClockFreq+0x9c>)
 8002460:	5cd3      	ldrb	r3, [r2, r3]
 8002462:	607b      	str	r3, [r7, #4]
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800246a:	2b00      	cmp	r3, #0
 800246c:	d010      	beq.n	8002490 <HAL_RCC_GetSysClockFreq+0x70>
 800246e:	4b11      	ldr	r3, [pc, #68]	; (80024b4 <HAL_RCC_GetSysClockFreq+0x94>)
 8002470:	685b      	ldr	r3, [r3, #4]
 8002472:	0c5b      	lsrs	r3, r3, #17
 8002474:	f003 0301 	and.w	r3, r3, #1
 8002478:	4a11      	ldr	r2, [pc, #68]	; (80024c0 <HAL_RCC_GetSysClockFreq+0xa0>)
 800247a:	5cd3      	ldrb	r3, [r2, r3]
 800247c:	60bb      	str	r3, [r7, #8]
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	4a0d      	ldr	r2, [pc, #52]	; (80024b8 <HAL_RCC_GetSysClockFreq+0x98>)
 8002482:	fb03 f202 	mul.w	r2, r3, r2
 8002486:	68bb      	ldr	r3, [r7, #8]
 8002488:	fbb2 f3f3 	udiv	r3, r2, r3
 800248c:	617b      	str	r3, [r7, #20]
 800248e:	e004      	b.n	800249a <HAL_RCC_GetSysClockFreq+0x7a>
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	4a0c      	ldr	r2, [pc, #48]	; (80024c4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002494:	fb02 f303 	mul.w	r3, r2, r3
 8002498:	617b      	str	r3, [r7, #20]
 800249a:	697b      	ldr	r3, [r7, #20]
 800249c:	613b      	str	r3, [r7, #16]
 800249e:	e002      	b.n	80024a6 <HAL_RCC_GetSysClockFreq+0x86>
 80024a0:	4b05      	ldr	r3, [pc, #20]	; (80024b8 <HAL_RCC_GetSysClockFreq+0x98>)
 80024a2:	613b      	str	r3, [r7, #16]
 80024a4:	bf00      	nop
 80024a6:	693b      	ldr	r3, [r7, #16]
 80024a8:	4618      	mov	r0, r3
 80024aa:	371c      	adds	r7, #28
 80024ac:	46bd      	mov	sp, r7
 80024ae:	bc80      	pop	{r7}
 80024b0:	4770      	bx	lr
 80024b2:	bf00      	nop
 80024b4:	40021000 	.word	0x40021000
 80024b8:	007a1200 	.word	0x007a1200
 80024bc:	08002dd0 	.word	0x08002dd0
 80024c0:	08002de0 	.word	0x08002de0
 80024c4:	003d0900 	.word	0x003d0900

080024c8 <RCC_Delay>:
 80024c8:	b480      	push	{r7}
 80024ca:	b085      	sub	sp, #20
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
 80024d0:	4b0a      	ldr	r3, [pc, #40]	; (80024fc <RCC_Delay+0x34>)
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	4a0a      	ldr	r2, [pc, #40]	; (8002500 <RCC_Delay+0x38>)
 80024d6:	fba2 2303 	umull	r2, r3, r2, r3
 80024da:	0a5b      	lsrs	r3, r3, #9
 80024dc:	687a      	ldr	r2, [r7, #4]
 80024de:	fb02 f303 	mul.w	r3, r2, r3
 80024e2:	60fb      	str	r3, [r7, #12]
 80024e4:	bf00      	nop
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	1e5a      	subs	r2, r3, #1
 80024ea:	60fa      	str	r2, [r7, #12]
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d1f9      	bne.n	80024e4 <RCC_Delay+0x1c>
 80024f0:	bf00      	nop
 80024f2:	bf00      	nop
 80024f4:	3714      	adds	r7, #20
 80024f6:	46bd      	mov	sp, r7
 80024f8:	bc80      	pop	{r7}
 80024fa:	4770      	bx	lr
 80024fc:	20000010 	.word	0x20000010
 8002500:	10624dd3 	.word	0x10624dd3

08002504 <HAL_TIM_Base_Init>:
 8002504:	b580      	push	{r7, lr}
 8002506:	b082      	sub	sp, #8
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	2b00      	cmp	r3, #0
 8002510:	d101      	bne.n	8002516 <HAL_TIM_Base_Init+0x12>
 8002512:	2301      	movs	r3, #1
 8002514:	e041      	b.n	800259a <HAL_TIM_Base_Init+0x96>
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800251c:	b2db      	uxtb	r3, r3
 800251e:	2b00      	cmp	r3, #0
 8002520:	d106      	bne.n	8002530 <HAL_TIM_Base_Init+0x2c>
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	2200      	movs	r2, #0
 8002526:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800252a:	6878      	ldr	r0, [r7, #4]
 800252c:	f7fe fe3e 	bl	80011ac <HAL_TIM_Base_MspInit>
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	2202      	movs	r2, #2
 8002534:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681a      	ldr	r2, [r3, #0]
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	3304      	adds	r3, #4
 8002540:	4619      	mov	r1, r3
 8002542:	4610      	mov	r0, r2
 8002544:	f000 fa6a 	bl	8002a1c <TIM_Base_SetConfig>
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	2201      	movs	r2, #1
 800254c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	2201      	movs	r2, #1
 8002554:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	2201      	movs	r2, #1
 800255c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	2201      	movs	r2, #1
 8002564:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	2201      	movs	r2, #1
 800256c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	2201      	movs	r2, #1
 8002574:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	2201      	movs	r2, #1
 800257c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	2201      	movs	r2, #1
 8002584:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	2201      	movs	r2, #1
 800258c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	2201      	movs	r2, #1
 8002594:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8002598:	2300      	movs	r3, #0
 800259a:	4618      	mov	r0, r3
 800259c:	3708      	adds	r7, #8
 800259e:	46bd      	mov	sp, r7
 80025a0:	bd80      	pop	{r7, pc}
	...

080025a4 <HAL_TIM_Base_Start_IT>:
 80025a4:	b480      	push	{r7}
 80025a6:	b085      	sub	sp, #20
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80025b2:	b2db      	uxtb	r3, r3
 80025b4:	2b01      	cmp	r3, #1
 80025b6:	d001      	beq.n	80025bc <HAL_TIM_Base_Start_IT+0x18>
 80025b8:	2301      	movs	r3, #1
 80025ba:	e044      	b.n	8002646 <HAL_TIM_Base_Start_IT+0xa2>
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	2202      	movs	r2, #2
 80025c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	68da      	ldr	r2, [r3, #12]
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f042 0201 	orr.w	r2, r2, #1
 80025d2:	60da      	str	r2, [r3, #12]
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	4a1d      	ldr	r2, [pc, #116]	; (8002650 <HAL_TIM_Base_Start_IT+0xac>)
 80025da:	4293      	cmp	r3, r2
 80025dc:	d018      	beq.n	8002610 <HAL_TIM_Base_Start_IT+0x6c>
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	4a1c      	ldr	r2, [pc, #112]	; (8002654 <HAL_TIM_Base_Start_IT+0xb0>)
 80025e4:	4293      	cmp	r3, r2
 80025e6:	d013      	beq.n	8002610 <HAL_TIM_Base_Start_IT+0x6c>
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80025f0:	d00e      	beq.n	8002610 <HAL_TIM_Base_Start_IT+0x6c>
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	4a18      	ldr	r2, [pc, #96]	; (8002658 <HAL_TIM_Base_Start_IT+0xb4>)
 80025f8:	4293      	cmp	r3, r2
 80025fa:	d009      	beq.n	8002610 <HAL_TIM_Base_Start_IT+0x6c>
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	4a16      	ldr	r2, [pc, #88]	; (800265c <HAL_TIM_Base_Start_IT+0xb8>)
 8002602:	4293      	cmp	r3, r2
 8002604:	d004      	beq.n	8002610 <HAL_TIM_Base_Start_IT+0x6c>
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	4a15      	ldr	r2, [pc, #84]	; (8002660 <HAL_TIM_Base_Start_IT+0xbc>)
 800260c:	4293      	cmp	r3, r2
 800260e:	d111      	bne.n	8002634 <HAL_TIM_Base_Start_IT+0x90>
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	689b      	ldr	r3, [r3, #8]
 8002616:	f003 0307 	and.w	r3, r3, #7
 800261a:	60fb      	str	r3, [r7, #12]
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	2b06      	cmp	r3, #6
 8002620:	d010      	beq.n	8002644 <HAL_TIM_Base_Start_IT+0xa0>
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	681a      	ldr	r2, [r3, #0]
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f042 0201 	orr.w	r2, r2, #1
 8002630:	601a      	str	r2, [r3, #0]
 8002632:	e007      	b.n	8002644 <HAL_TIM_Base_Start_IT+0xa0>
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	681a      	ldr	r2, [r3, #0]
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f042 0201 	orr.w	r2, r2, #1
 8002642:	601a      	str	r2, [r3, #0]
 8002644:	2300      	movs	r3, #0
 8002646:	4618      	mov	r0, r3
 8002648:	3714      	adds	r7, #20
 800264a:	46bd      	mov	sp, r7
 800264c:	bc80      	pop	{r7}
 800264e:	4770      	bx	lr
 8002650:	40012c00 	.word	0x40012c00
 8002654:	40013400 	.word	0x40013400
 8002658:	40000400 	.word	0x40000400
 800265c:	40000800 	.word	0x40000800
 8002660:	40000c00 	.word	0x40000c00

08002664 <HAL_TIM_IRQHandler>:
 8002664:	b580      	push	{r7, lr}
 8002666:	b084      	sub	sp, #16
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	68db      	ldr	r3, [r3, #12]
 8002672:	60fb      	str	r3, [r7, #12]
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	691b      	ldr	r3, [r3, #16]
 800267a:	60bb      	str	r3, [r7, #8]
 800267c:	68bb      	ldr	r3, [r7, #8]
 800267e:	f003 0302 	and.w	r3, r3, #2
 8002682:	2b00      	cmp	r3, #0
 8002684:	d020      	beq.n	80026c8 <HAL_TIM_IRQHandler+0x64>
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	f003 0302 	and.w	r3, r3, #2
 800268c:	2b00      	cmp	r3, #0
 800268e:	d01b      	beq.n	80026c8 <HAL_TIM_IRQHandler+0x64>
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f06f 0202 	mvn.w	r2, #2
 8002698:	611a      	str	r2, [r3, #16]
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	2201      	movs	r2, #1
 800269e:	771a      	strb	r2, [r3, #28]
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	699b      	ldr	r3, [r3, #24]
 80026a6:	f003 0303 	and.w	r3, r3, #3
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d003      	beq.n	80026b6 <HAL_TIM_IRQHandler+0x52>
 80026ae:	6878      	ldr	r0, [r7, #4]
 80026b0:	f000 f998 	bl	80029e4 <HAL_TIM_IC_CaptureCallback>
 80026b4:	e005      	b.n	80026c2 <HAL_TIM_IRQHandler+0x5e>
 80026b6:	6878      	ldr	r0, [r7, #4]
 80026b8:	f000 f98b 	bl	80029d2 <HAL_TIM_OC_DelayElapsedCallback>
 80026bc:	6878      	ldr	r0, [r7, #4]
 80026be:	f000 f99a 	bl	80029f6 <HAL_TIM_PWM_PulseFinishedCallback>
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	2200      	movs	r2, #0
 80026c6:	771a      	strb	r2, [r3, #28]
 80026c8:	68bb      	ldr	r3, [r7, #8]
 80026ca:	f003 0304 	and.w	r3, r3, #4
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d020      	beq.n	8002714 <HAL_TIM_IRQHandler+0xb0>
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	f003 0304 	and.w	r3, r3, #4
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d01b      	beq.n	8002714 <HAL_TIM_IRQHandler+0xb0>
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f06f 0204 	mvn.w	r2, #4
 80026e4:	611a      	str	r2, [r3, #16]
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	2202      	movs	r2, #2
 80026ea:	771a      	strb	r2, [r3, #28]
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	699b      	ldr	r3, [r3, #24]
 80026f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d003      	beq.n	8002702 <HAL_TIM_IRQHandler+0x9e>
 80026fa:	6878      	ldr	r0, [r7, #4]
 80026fc:	f000 f972 	bl	80029e4 <HAL_TIM_IC_CaptureCallback>
 8002700:	e005      	b.n	800270e <HAL_TIM_IRQHandler+0xaa>
 8002702:	6878      	ldr	r0, [r7, #4]
 8002704:	f000 f965 	bl	80029d2 <HAL_TIM_OC_DelayElapsedCallback>
 8002708:	6878      	ldr	r0, [r7, #4]
 800270a:	f000 f974 	bl	80029f6 <HAL_TIM_PWM_PulseFinishedCallback>
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	2200      	movs	r2, #0
 8002712:	771a      	strb	r2, [r3, #28]
 8002714:	68bb      	ldr	r3, [r7, #8]
 8002716:	f003 0308 	and.w	r3, r3, #8
 800271a:	2b00      	cmp	r3, #0
 800271c:	d020      	beq.n	8002760 <HAL_TIM_IRQHandler+0xfc>
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	f003 0308 	and.w	r3, r3, #8
 8002724:	2b00      	cmp	r3, #0
 8002726:	d01b      	beq.n	8002760 <HAL_TIM_IRQHandler+0xfc>
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f06f 0208 	mvn.w	r2, #8
 8002730:	611a      	str	r2, [r3, #16]
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	2204      	movs	r2, #4
 8002736:	771a      	strb	r2, [r3, #28]
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	69db      	ldr	r3, [r3, #28]
 800273e:	f003 0303 	and.w	r3, r3, #3
 8002742:	2b00      	cmp	r3, #0
 8002744:	d003      	beq.n	800274e <HAL_TIM_IRQHandler+0xea>
 8002746:	6878      	ldr	r0, [r7, #4]
 8002748:	f000 f94c 	bl	80029e4 <HAL_TIM_IC_CaptureCallback>
 800274c:	e005      	b.n	800275a <HAL_TIM_IRQHandler+0xf6>
 800274e:	6878      	ldr	r0, [r7, #4]
 8002750:	f000 f93f 	bl	80029d2 <HAL_TIM_OC_DelayElapsedCallback>
 8002754:	6878      	ldr	r0, [r7, #4]
 8002756:	f000 f94e 	bl	80029f6 <HAL_TIM_PWM_PulseFinishedCallback>
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	2200      	movs	r2, #0
 800275e:	771a      	strb	r2, [r3, #28]
 8002760:	68bb      	ldr	r3, [r7, #8]
 8002762:	f003 0310 	and.w	r3, r3, #16
 8002766:	2b00      	cmp	r3, #0
 8002768:	d020      	beq.n	80027ac <HAL_TIM_IRQHandler+0x148>
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	f003 0310 	and.w	r3, r3, #16
 8002770:	2b00      	cmp	r3, #0
 8002772:	d01b      	beq.n	80027ac <HAL_TIM_IRQHandler+0x148>
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f06f 0210 	mvn.w	r2, #16
 800277c:	611a      	str	r2, [r3, #16]
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	2208      	movs	r2, #8
 8002782:	771a      	strb	r2, [r3, #28]
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	69db      	ldr	r3, [r3, #28]
 800278a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800278e:	2b00      	cmp	r3, #0
 8002790:	d003      	beq.n	800279a <HAL_TIM_IRQHandler+0x136>
 8002792:	6878      	ldr	r0, [r7, #4]
 8002794:	f000 f926 	bl	80029e4 <HAL_TIM_IC_CaptureCallback>
 8002798:	e005      	b.n	80027a6 <HAL_TIM_IRQHandler+0x142>
 800279a:	6878      	ldr	r0, [r7, #4]
 800279c:	f000 f919 	bl	80029d2 <HAL_TIM_OC_DelayElapsedCallback>
 80027a0:	6878      	ldr	r0, [r7, #4]
 80027a2:	f000 f928 	bl	80029f6 <HAL_TIM_PWM_PulseFinishedCallback>
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	2200      	movs	r2, #0
 80027aa:	771a      	strb	r2, [r3, #28]
 80027ac:	68bb      	ldr	r3, [r7, #8]
 80027ae:	f003 0301 	and.w	r3, r3, #1
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d00c      	beq.n	80027d0 <HAL_TIM_IRQHandler+0x16c>
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	f003 0301 	and.w	r3, r3, #1
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d007      	beq.n	80027d0 <HAL_TIM_IRQHandler+0x16c>
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f06f 0201 	mvn.w	r2, #1
 80027c8:	611a      	str	r2, [r3, #16]
 80027ca:	6878      	ldr	r0, [r7, #4]
 80027cc:	f7fe fb06 	bl	8000ddc <HAL_TIM_PeriodElapsedCallback>
 80027d0:	68bb      	ldr	r3, [r7, #8]
 80027d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d00c      	beq.n	80027f4 <HAL_TIM_IRQHandler+0x190>
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d007      	beq.n	80027f4 <HAL_TIM_IRQHandler+0x190>
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80027ec:	611a      	str	r2, [r3, #16]
 80027ee:	6878      	ldr	r0, [r7, #4]
 80027f0:	f000 faa5 	bl	8002d3e <HAL_TIMEx_BreakCallback>
 80027f4:	68bb      	ldr	r3, [r7, #8]
 80027f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d00c      	beq.n	8002818 <HAL_TIM_IRQHandler+0x1b4>
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002804:	2b00      	cmp	r3, #0
 8002806:	d007      	beq.n	8002818 <HAL_TIM_IRQHandler+0x1b4>
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002810:	611a      	str	r2, [r3, #16]
 8002812:	6878      	ldr	r0, [r7, #4]
 8002814:	f000 f8f8 	bl	8002a08 <HAL_TIM_TriggerCallback>
 8002818:	68bb      	ldr	r3, [r7, #8]
 800281a:	f003 0320 	and.w	r3, r3, #32
 800281e:	2b00      	cmp	r3, #0
 8002820:	d00c      	beq.n	800283c <HAL_TIM_IRQHandler+0x1d8>
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	f003 0320 	and.w	r3, r3, #32
 8002828:	2b00      	cmp	r3, #0
 800282a:	d007      	beq.n	800283c <HAL_TIM_IRQHandler+0x1d8>
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f06f 0220 	mvn.w	r2, #32
 8002834:	611a      	str	r2, [r3, #16]
 8002836:	6878      	ldr	r0, [r7, #4]
 8002838:	f000 fa78 	bl	8002d2c <HAL_TIMEx_CommutCallback>
 800283c:	bf00      	nop
 800283e:	3710      	adds	r7, #16
 8002840:	46bd      	mov	sp, r7
 8002842:	bd80      	pop	{r7, pc}

08002844 <HAL_TIM_ConfigClockSource>:
 8002844:	b580      	push	{r7, lr}
 8002846:	b084      	sub	sp, #16
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]
 800284c:	6039      	str	r1, [r7, #0]
 800284e:	2300      	movs	r3, #0
 8002850:	73fb      	strb	r3, [r7, #15]
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002858:	2b01      	cmp	r3, #1
 800285a:	d101      	bne.n	8002860 <HAL_TIM_ConfigClockSource+0x1c>
 800285c:	2302      	movs	r3, #2
 800285e:	e0b4      	b.n	80029ca <HAL_TIM_ConfigClockSource+0x186>
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	2201      	movs	r2, #1
 8002864:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	2202      	movs	r2, #2
 800286c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	689b      	ldr	r3, [r3, #8]
 8002876:	60bb      	str	r3, [r7, #8]
 8002878:	68bb      	ldr	r3, [r7, #8]
 800287a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800287e:	60bb      	str	r3, [r7, #8]
 8002880:	68bb      	ldr	r3, [r7, #8]
 8002882:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002886:	60bb      	str	r3, [r7, #8]
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	68ba      	ldr	r2, [r7, #8]
 800288e:	609a      	str	r2, [r3, #8]
 8002890:	683b      	ldr	r3, [r7, #0]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002898:	d03e      	beq.n	8002918 <HAL_TIM_ConfigClockSource+0xd4>
 800289a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800289e:	f200 8087 	bhi.w	80029b0 <HAL_TIM_ConfigClockSource+0x16c>
 80028a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80028a6:	f000 8086 	beq.w	80029b6 <HAL_TIM_ConfigClockSource+0x172>
 80028aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80028ae:	d87f      	bhi.n	80029b0 <HAL_TIM_ConfigClockSource+0x16c>
 80028b0:	2b70      	cmp	r3, #112	; 0x70
 80028b2:	d01a      	beq.n	80028ea <HAL_TIM_ConfigClockSource+0xa6>
 80028b4:	2b70      	cmp	r3, #112	; 0x70
 80028b6:	d87b      	bhi.n	80029b0 <HAL_TIM_ConfigClockSource+0x16c>
 80028b8:	2b60      	cmp	r3, #96	; 0x60
 80028ba:	d050      	beq.n	800295e <HAL_TIM_ConfigClockSource+0x11a>
 80028bc:	2b60      	cmp	r3, #96	; 0x60
 80028be:	d877      	bhi.n	80029b0 <HAL_TIM_ConfigClockSource+0x16c>
 80028c0:	2b50      	cmp	r3, #80	; 0x50
 80028c2:	d03c      	beq.n	800293e <HAL_TIM_ConfigClockSource+0xfa>
 80028c4:	2b50      	cmp	r3, #80	; 0x50
 80028c6:	d873      	bhi.n	80029b0 <HAL_TIM_ConfigClockSource+0x16c>
 80028c8:	2b40      	cmp	r3, #64	; 0x40
 80028ca:	d058      	beq.n	800297e <HAL_TIM_ConfigClockSource+0x13a>
 80028cc:	2b40      	cmp	r3, #64	; 0x40
 80028ce:	d86f      	bhi.n	80029b0 <HAL_TIM_ConfigClockSource+0x16c>
 80028d0:	2b30      	cmp	r3, #48	; 0x30
 80028d2:	d064      	beq.n	800299e <HAL_TIM_ConfigClockSource+0x15a>
 80028d4:	2b30      	cmp	r3, #48	; 0x30
 80028d6:	d86b      	bhi.n	80029b0 <HAL_TIM_ConfigClockSource+0x16c>
 80028d8:	2b20      	cmp	r3, #32
 80028da:	d060      	beq.n	800299e <HAL_TIM_ConfigClockSource+0x15a>
 80028dc:	2b20      	cmp	r3, #32
 80028de:	d867      	bhi.n	80029b0 <HAL_TIM_ConfigClockSource+0x16c>
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d05c      	beq.n	800299e <HAL_TIM_ConfigClockSource+0x15a>
 80028e4:	2b10      	cmp	r3, #16
 80028e6:	d05a      	beq.n	800299e <HAL_TIM_ConfigClockSource+0x15a>
 80028e8:	e062      	b.n	80029b0 <HAL_TIM_ConfigClockSource+0x16c>
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	6818      	ldr	r0, [r3, #0]
 80028ee:	683b      	ldr	r3, [r7, #0]
 80028f0:	6899      	ldr	r1, [r3, #8]
 80028f2:	683b      	ldr	r3, [r7, #0]
 80028f4:	685a      	ldr	r2, [r3, #4]
 80028f6:	683b      	ldr	r3, [r7, #0]
 80028f8:	68db      	ldr	r3, [r3, #12]
 80028fa:	f000 f98c 	bl	8002c16 <TIM_ETR_SetConfig>
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	689b      	ldr	r3, [r3, #8]
 8002904:	60bb      	str	r3, [r7, #8]
 8002906:	68bb      	ldr	r3, [r7, #8]
 8002908:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800290c:	60bb      	str	r3, [r7, #8]
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	68ba      	ldr	r2, [r7, #8]
 8002914:	609a      	str	r2, [r3, #8]
 8002916:	e04f      	b.n	80029b8 <HAL_TIM_ConfigClockSource+0x174>
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	6818      	ldr	r0, [r3, #0]
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	6899      	ldr	r1, [r3, #8]
 8002920:	683b      	ldr	r3, [r7, #0]
 8002922:	685a      	ldr	r2, [r3, #4]
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	68db      	ldr	r3, [r3, #12]
 8002928:	f000 f975 	bl	8002c16 <TIM_ETR_SetConfig>
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	689a      	ldr	r2, [r3, #8]
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800293a:	609a      	str	r2, [r3, #8]
 800293c:	e03c      	b.n	80029b8 <HAL_TIM_ConfigClockSource+0x174>
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6818      	ldr	r0, [r3, #0]
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	6859      	ldr	r1, [r3, #4]
 8002946:	683b      	ldr	r3, [r7, #0]
 8002948:	68db      	ldr	r3, [r3, #12]
 800294a:	461a      	mov	r2, r3
 800294c:	f000 f8ec 	bl	8002b28 <TIM_TI1_ConfigInputStage>
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	2150      	movs	r1, #80	; 0x50
 8002956:	4618      	mov	r0, r3
 8002958:	f000 f943 	bl	8002be2 <TIM_ITRx_SetConfig>
 800295c:	e02c      	b.n	80029b8 <HAL_TIM_ConfigClockSource+0x174>
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	6818      	ldr	r0, [r3, #0]
 8002962:	683b      	ldr	r3, [r7, #0]
 8002964:	6859      	ldr	r1, [r3, #4]
 8002966:	683b      	ldr	r3, [r7, #0]
 8002968:	68db      	ldr	r3, [r3, #12]
 800296a:	461a      	mov	r2, r3
 800296c:	f000 f90a 	bl	8002b84 <TIM_TI2_ConfigInputStage>
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	2160      	movs	r1, #96	; 0x60
 8002976:	4618      	mov	r0, r3
 8002978:	f000 f933 	bl	8002be2 <TIM_ITRx_SetConfig>
 800297c:	e01c      	b.n	80029b8 <HAL_TIM_ConfigClockSource+0x174>
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	6818      	ldr	r0, [r3, #0]
 8002982:	683b      	ldr	r3, [r7, #0]
 8002984:	6859      	ldr	r1, [r3, #4]
 8002986:	683b      	ldr	r3, [r7, #0]
 8002988:	68db      	ldr	r3, [r3, #12]
 800298a:	461a      	mov	r2, r3
 800298c:	f000 f8cc 	bl	8002b28 <TIM_TI1_ConfigInputStage>
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	2140      	movs	r1, #64	; 0x40
 8002996:	4618      	mov	r0, r3
 8002998:	f000 f923 	bl	8002be2 <TIM_ITRx_SetConfig>
 800299c:	e00c      	b.n	80029b8 <HAL_TIM_ConfigClockSource+0x174>
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681a      	ldr	r2, [r3, #0]
 80029a2:	683b      	ldr	r3, [r7, #0]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	4619      	mov	r1, r3
 80029a8:	4610      	mov	r0, r2
 80029aa:	f000 f91a 	bl	8002be2 <TIM_ITRx_SetConfig>
 80029ae:	e003      	b.n	80029b8 <HAL_TIM_ConfigClockSource+0x174>
 80029b0:	2301      	movs	r3, #1
 80029b2:	73fb      	strb	r3, [r7, #15]
 80029b4:	e000      	b.n	80029b8 <HAL_TIM_ConfigClockSource+0x174>
 80029b6:	bf00      	nop
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	2201      	movs	r2, #1
 80029bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	2200      	movs	r2, #0
 80029c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80029c8:	7bfb      	ldrb	r3, [r7, #15]
 80029ca:	4618      	mov	r0, r3
 80029cc:	3710      	adds	r7, #16
 80029ce:	46bd      	mov	sp, r7
 80029d0:	bd80      	pop	{r7, pc}

080029d2 <HAL_TIM_OC_DelayElapsedCallback>:
 80029d2:	b480      	push	{r7}
 80029d4:	b083      	sub	sp, #12
 80029d6:	af00      	add	r7, sp, #0
 80029d8:	6078      	str	r0, [r7, #4]
 80029da:	bf00      	nop
 80029dc:	370c      	adds	r7, #12
 80029de:	46bd      	mov	sp, r7
 80029e0:	bc80      	pop	{r7}
 80029e2:	4770      	bx	lr

080029e4 <HAL_TIM_IC_CaptureCallback>:
 80029e4:	b480      	push	{r7}
 80029e6:	b083      	sub	sp, #12
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
 80029ec:	bf00      	nop
 80029ee:	370c      	adds	r7, #12
 80029f0:	46bd      	mov	sp, r7
 80029f2:	bc80      	pop	{r7}
 80029f4:	4770      	bx	lr

080029f6 <HAL_TIM_PWM_PulseFinishedCallback>:
 80029f6:	b480      	push	{r7}
 80029f8:	b083      	sub	sp, #12
 80029fa:	af00      	add	r7, sp, #0
 80029fc:	6078      	str	r0, [r7, #4]
 80029fe:	bf00      	nop
 8002a00:	370c      	adds	r7, #12
 8002a02:	46bd      	mov	sp, r7
 8002a04:	bc80      	pop	{r7}
 8002a06:	4770      	bx	lr

08002a08 <HAL_TIM_TriggerCallback>:
 8002a08:	b480      	push	{r7}
 8002a0a:	b083      	sub	sp, #12
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
 8002a10:	bf00      	nop
 8002a12:	370c      	adds	r7, #12
 8002a14:	46bd      	mov	sp, r7
 8002a16:	bc80      	pop	{r7}
 8002a18:	4770      	bx	lr
	...

08002a1c <TIM_Base_SetConfig>:
 8002a1c:	b480      	push	{r7}
 8002a1e:	b085      	sub	sp, #20
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
 8002a24:	6039      	str	r1, [r7, #0]
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	60fb      	str	r3, [r7, #12]
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	4a39      	ldr	r2, [pc, #228]	; (8002b14 <TIM_Base_SetConfig+0xf8>)
 8002a30:	4293      	cmp	r3, r2
 8002a32:	d013      	beq.n	8002a5c <TIM_Base_SetConfig+0x40>
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	4a38      	ldr	r2, [pc, #224]	; (8002b18 <TIM_Base_SetConfig+0xfc>)
 8002a38:	4293      	cmp	r3, r2
 8002a3a:	d00f      	beq.n	8002a5c <TIM_Base_SetConfig+0x40>
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a42:	d00b      	beq.n	8002a5c <TIM_Base_SetConfig+0x40>
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	4a35      	ldr	r2, [pc, #212]	; (8002b1c <TIM_Base_SetConfig+0x100>)
 8002a48:	4293      	cmp	r3, r2
 8002a4a:	d007      	beq.n	8002a5c <TIM_Base_SetConfig+0x40>
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	4a34      	ldr	r2, [pc, #208]	; (8002b20 <TIM_Base_SetConfig+0x104>)
 8002a50:	4293      	cmp	r3, r2
 8002a52:	d003      	beq.n	8002a5c <TIM_Base_SetConfig+0x40>
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	4a33      	ldr	r2, [pc, #204]	; (8002b24 <TIM_Base_SetConfig+0x108>)
 8002a58:	4293      	cmp	r3, r2
 8002a5a:	d108      	bne.n	8002a6e <TIM_Base_SetConfig+0x52>
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a62:	60fb      	str	r3, [r7, #12]
 8002a64:	683b      	ldr	r3, [r7, #0]
 8002a66:	685b      	ldr	r3, [r3, #4]
 8002a68:	68fa      	ldr	r2, [r7, #12]
 8002a6a:	4313      	orrs	r3, r2
 8002a6c:	60fb      	str	r3, [r7, #12]
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	4a28      	ldr	r2, [pc, #160]	; (8002b14 <TIM_Base_SetConfig+0xf8>)
 8002a72:	4293      	cmp	r3, r2
 8002a74:	d013      	beq.n	8002a9e <TIM_Base_SetConfig+0x82>
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	4a27      	ldr	r2, [pc, #156]	; (8002b18 <TIM_Base_SetConfig+0xfc>)
 8002a7a:	4293      	cmp	r3, r2
 8002a7c:	d00f      	beq.n	8002a9e <TIM_Base_SetConfig+0x82>
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a84:	d00b      	beq.n	8002a9e <TIM_Base_SetConfig+0x82>
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	4a24      	ldr	r2, [pc, #144]	; (8002b1c <TIM_Base_SetConfig+0x100>)
 8002a8a:	4293      	cmp	r3, r2
 8002a8c:	d007      	beq.n	8002a9e <TIM_Base_SetConfig+0x82>
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	4a23      	ldr	r2, [pc, #140]	; (8002b20 <TIM_Base_SetConfig+0x104>)
 8002a92:	4293      	cmp	r3, r2
 8002a94:	d003      	beq.n	8002a9e <TIM_Base_SetConfig+0x82>
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	4a22      	ldr	r2, [pc, #136]	; (8002b24 <TIM_Base_SetConfig+0x108>)
 8002a9a:	4293      	cmp	r3, r2
 8002a9c:	d108      	bne.n	8002ab0 <TIM_Base_SetConfig+0x94>
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002aa4:	60fb      	str	r3, [r7, #12]
 8002aa6:	683b      	ldr	r3, [r7, #0]
 8002aa8:	68db      	ldr	r3, [r3, #12]
 8002aaa:	68fa      	ldr	r2, [r7, #12]
 8002aac:	4313      	orrs	r3, r2
 8002aae:	60fb      	str	r3, [r7, #12]
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002ab6:	683b      	ldr	r3, [r7, #0]
 8002ab8:	695b      	ldr	r3, [r3, #20]
 8002aba:	4313      	orrs	r3, r2
 8002abc:	60fb      	str	r3, [r7, #12]
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	68fa      	ldr	r2, [r7, #12]
 8002ac2:	601a      	str	r2, [r3, #0]
 8002ac4:	683b      	ldr	r3, [r7, #0]
 8002ac6:	689a      	ldr	r2, [r3, #8]
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	62da      	str	r2, [r3, #44]	; 0x2c
 8002acc:	683b      	ldr	r3, [r7, #0]
 8002ace:	681a      	ldr	r2, [r3, #0]
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	629a      	str	r2, [r3, #40]	; 0x28
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	4a0f      	ldr	r2, [pc, #60]	; (8002b14 <TIM_Base_SetConfig+0xf8>)
 8002ad8:	4293      	cmp	r3, r2
 8002ada:	d003      	beq.n	8002ae4 <TIM_Base_SetConfig+0xc8>
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	4a0e      	ldr	r2, [pc, #56]	; (8002b18 <TIM_Base_SetConfig+0xfc>)
 8002ae0:	4293      	cmp	r3, r2
 8002ae2:	d103      	bne.n	8002aec <TIM_Base_SetConfig+0xd0>
 8002ae4:	683b      	ldr	r3, [r7, #0]
 8002ae6:	691a      	ldr	r2, [r3, #16]
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	631a      	str	r2, [r3, #48]	; 0x30
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	2201      	movs	r2, #1
 8002af0:	615a      	str	r2, [r3, #20]
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	691b      	ldr	r3, [r3, #16]
 8002af6:	f003 0301 	and.w	r3, r3, #1
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d005      	beq.n	8002b0a <TIM_Base_SetConfig+0xee>
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	691b      	ldr	r3, [r3, #16]
 8002b02:	f023 0201 	bic.w	r2, r3, #1
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	611a      	str	r2, [r3, #16]
 8002b0a:	bf00      	nop
 8002b0c:	3714      	adds	r7, #20
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	bc80      	pop	{r7}
 8002b12:	4770      	bx	lr
 8002b14:	40012c00 	.word	0x40012c00
 8002b18:	40013400 	.word	0x40013400
 8002b1c:	40000400 	.word	0x40000400
 8002b20:	40000800 	.word	0x40000800
 8002b24:	40000c00 	.word	0x40000c00

08002b28 <TIM_TI1_ConfigInputStage>:
 8002b28:	b480      	push	{r7}
 8002b2a:	b087      	sub	sp, #28
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	60f8      	str	r0, [r7, #12]
 8002b30:	60b9      	str	r1, [r7, #8]
 8002b32:	607a      	str	r2, [r7, #4]
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	6a1b      	ldr	r3, [r3, #32]
 8002b38:	617b      	str	r3, [r7, #20]
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	6a1b      	ldr	r3, [r3, #32]
 8002b3e:	f023 0201 	bic.w	r2, r3, #1
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	621a      	str	r2, [r3, #32]
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	699b      	ldr	r3, [r3, #24]
 8002b4a:	613b      	str	r3, [r7, #16]
 8002b4c:	693b      	ldr	r3, [r7, #16]
 8002b4e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002b52:	613b      	str	r3, [r7, #16]
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	011b      	lsls	r3, r3, #4
 8002b58:	693a      	ldr	r2, [r7, #16]
 8002b5a:	4313      	orrs	r3, r2
 8002b5c:	613b      	str	r3, [r7, #16]
 8002b5e:	697b      	ldr	r3, [r7, #20]
 8002b60:	f023 030a 	bic.w	r3, r3, #10
 8002b64:	617b      	str	r3, [r7, #20]
 8002b66:	697a      	ldr	r2, [r7, #20]
 8002b68:	68bb      	ldr	r3, [r7, #8]
 8002b6a:	4313      	orrs	r3, r2
 8002b6c:	617b      	str	r3, [r7, #20]
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	693a      	ldr	r2, [r7, #16]
 8002b72:	619a      	str	r2, [r3, #24]
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	697a      	ldr	r2, [r7, #20]
 8002b78:	621a      	str	r2, [r3, #32]
 8002b7a:	bf00      	nop
 8002b7c:	371c      	adds	r7, #28
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	bc80      	pop	{r7}
 8002b82:	4770      	bx	lr

08002b84 <TIM_TI2_ConfigInputStage>:
 8002b84:	b480      	push	{r7}
 8002b86:	b087      	sub	sp, #28
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	60f8      	str	r0, [r7, #12]
 8002b8c:	60b9      	str	r1, [r7, #8]
 8002b8e:	607a      	str	r2, [r7, #4]
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	6a1b      	ldr	r3, [r3, #32]
 8002b94:	617b      	str	r3, [r7, #20]
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	6a1b      	ldr	r3, [r3, #32]
 8002b9a:	f023 0210 	bic.w	r2, r3, #16
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	621a      	str	r2, [r3, #32]
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	699b      	ldr	r3, [r3, #24]
 8002ba6:	613b      	str	r3, [r7, #16]
 8002ba8:	693b      	ldr	r3, [r7, #16]
 8002baa:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002bae:	613b      	str	r3, [r7, #16]
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	031b      	lsls	r3, r3, #12
 8002bb4:	693a      	ldr	r2, [r7, #16]
 8002bb6:	4313      	orrs	r3, r2
 8002bb8:	613b      	str	r3, [r7, #16]
 8002bba:	697b      	ldr	r3, [r7, #20]
 8002bbc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002bc0:	617b      	str	r3, [r7, #20]
 8002bc2:	68bb      	ldr	r3, [r7, #8]
 8002bc4:	011b      	lsls	r3, r3, #4
 8002bc6:	697a      	ldr	r2, [r7, #20]
 8002bc8:	4313      	orrs	r3, r2
 8002bca:	617b      	str	r3, [r7, #20]
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	693a      	ldr	r2, [r7, #16]
 8002bd0:	619a      	str	r2, [r3, #24]
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	697a      	ldr	r2, [r7, #20]
 8002bd6:	621a      	str	r2, [r3, #32]
 8002bd8:	bf00      	nop
 8002bda:	371c      	adds	r7, #28
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	bc80      	pop	{r7}
 8002be0:	4770      	bx	lr

08002be2 <TIM_ITRx_SetConfig>:
 8002be2:	b480      	push	{r7}
 8002be4:	b085      	sub	sp, #20
 8002be6:	af00      	add	r7, sp, #0
 8002be8:	6078      	str	r0, [r7, #4]
 8002bea:	6039      	str	r1, [r7, #0]
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	689b      	ldr	r3, [r3, #8]
 8002bf0:	60fb      	str	r3, [r7, #12]
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002bf8:	60fb      	str	r3, [r7, #12]
 8002bfa:	683a      	ldr	r2, [r7, #0]
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	4313      	orrs	r3, r2
 8002c00:	f043 0307 	orr.w	r3, r3, #7
 8002c04:	60fb      	str	r3, [r7, #12]
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	68fa      	ldr	r2, [r7, #12]
 8002c0a:	609a      	str	r2, [r3, #8]
 8002c0c:	bf00      	nop
 8002c0e:	3714      	adds	r7, #20
 8002c10:	46bd      	mov	sp, r7
 8002c12:	bc80      	pop	{r7}
 8002c14:	4770      	bx	lr

08002c16 <TIM_ETR_SetConfig>:
 8002c16:	b480      	push	{r7}
 8002c18:	b087      	sub	sp, #28
 8002c1a:	af00      	add	r7, sp, #0
 8002c1c:	60f8      	str	r0, [r7, #12]
 8002c1e:	60b9      	str	r1, [r7, #8]
 8002c20:	607a      	str	r2, [r7, #4]
 8002c22:	603b      	str	r3, [r7, #0]
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	689b      	ldr	r3, [r3, #8]
 8002c28:	617b      	str	r3, [r7, #20]
 8002c2a:	697b      	ldr	r3, [r7, #20]
 8002c2c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002c30:	617b      	str	r3, [r7, #20]
 8002c32:	683b      	ldr	r3, [r7, #0]
 8002c34:	021a      	lsls	r2, r3, #8
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	431a      	orrs	r2, r3
 8002c3a:	68bb      	ldr	r3, [r7, #8]
 8002c3c:	4313      	orrs	r3, r2
 8002c3e:	697a      	ldr	r2, [r7, #20]
 8002c40:	4313      	orrs	r3, r2
 8002c42:	617b      	str	r3, [r7, #20]
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	697a      	ldr	r2, [r7, #20]
 8002c48:	609a      	str	r2, [r3, #8]
 8002c4a:	bf00      	nop
 8002c4c:	371c      	adds	r7, #28
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	bc80      	pop	{r7}
 8002c52:	4770      	bx	lr

08002c54 <HAL_TIMEx_MasterConfigSynchronization>:
 8002c54:	b480      	push	{r7}
 8002c56:	b085      	sub	sp, #20
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]
 8002c5c:	6039      	str	r1, [r7, #0]
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c64:	2b01      	cmp	r3, #1
 8002c66:	d101      	bne.n	8002c6c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002c68:	2302      	movs	r3, #2
 8002c6a:	e050      	b.n	8002d0e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	2201      	movs	r2, #1
 8002c70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	2202      	movs	r2, #2
 8002c78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	685b      	ldr	r3, [r3, #4]
 8002c82:	60fb      	str	r3, [r7, #12]
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	689b      	ldr	r3, [r3, #8]
 8002c8a:	60bb      	str	r3, [r7, #8]
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c92:	60fb      	str	r3, [r7, #12]
 8002c94:	683b      	ldr	r3, [r7, #0]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	68fa      	ldr	r2, [r7, #12]
 8002c9a:	4313      	orrs	r3, r2
 8002c9c:	60fb      	str	r3, [r7, #12]
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	68fa      	ldr	r2, [r7, #12]
 8002ca4:	605a      	str	r2, [r3, #4]
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	4a1b      	ldr	r2, [pc, #108]	; (8002d18 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8002cac:	4293      	cmp	r3, r2
 8002cae:	d018      	beq.n	8002ce2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	4a19      	ldr	r2, [pc, #100]	; (8002d1c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8002cb6:	4293      	cmp	r3, r2
 8002cb8:	d013      	beq.n	8002ce2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002cc2:	d00e      	beq.n	8002ce2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	4a15      	ldr	r2, [pc, #84]	; (8002d20 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8002cca:	4293      	cmp	r3, r2
 8002ccc:	d009      	beq.n	8002ce2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	4a14      	ldr	r2, [pc, #80]	; (8002d24 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8002cd4:	4293      	cmp	r3, r2
 8002cd6:	d004      	beq.n	8002ce2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	4a12      	ldr	r2, [pc, #72]	; (8002d28 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8002cde:	4293      	cmp	r3, r2
 8002ce0:	d10c      	bne.n	8002cfc <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 8002ce2:	68bb      	ldr	r3, [r7, #8]
 8002ce4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002ce8:	60bb      	str	r3, [r7, #8]
 8002cea:	683b      	ldr	r3, [r7, #0]
 8002cec:	685b      	ldr	r3, [r3, #4]
 8002cee:	68ba      	ldr	r2, [r7, #8]
 8002cf0:	4313      	orrs	r3, r2
 8002cf2:	60bb      	str	r3, [r7, #8]
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	68ba      	ldr	r2, [r7, #8]
 8002cfa:	609a      	str	r2, [r3, #8]
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	2201      	movs	r2, #1
 8002d00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	2200      	movs	r2, #0
 8002d08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002d0c:	2300      	movs	r3, #0
 8002d0e:	4618      	mov	r0, r3
 8002d10:	3714      	adds	r7, #20
 8002d12:	46bd      	mov	sp, r7
 8002d14:	bc80      	pop	{r7}
 8002d16:	4770      	bx	lr
 8002d18:	40012c00 	.word	0x40012c00
 8002d1c:	40013400 	.word	0x40013400
 8002d20:	40000400 	.word	0x40000400
 8002d24:	40000800 	.word	0x40000800
 8002d28:	40000c00 	.word	0x40000c00

08002d2c <HAL_TIMEx_CommutCallback>:
 8002d2c:	b480      	push	{r7}
 8002d2e:	b083      	sub	sp, #12
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
 8002d34:	bf00      	nop
 8002d36:	370c      	adds	r7, #12
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	bc80      	pop	{r7}
 8002d3c:	4770      	bx	lr

08002d3e <HAL_TIMEx_BreakCallback>:
 8002d3e:	b480      	push	{r7}
 8002d40:	b083      	sub	sp, #12
 8002d42:	af00      	add	r7, sp, #0
 8002d44:	6078      	str	r0, [r7, #4]
 8002d46:	bf00      	nop
 8002d48:	370c      	adds	r7, #12
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	bc80      	pop	{r7}
 8002d4e:	4770      	bx	lr

08002d50 <memset>:
 8002d50:	4603      	mov	r3, r0
 8002d52:	4402      	add	r2, r0
 8002d54:	4293      	cmp	r3, r2
 8002d56:	d100      	bne.n	8002d5a <memset+0xa>
 8002d58:	4770      	bx	lr
 8002d5a:	f803 1b01 	strb.w	r1, [r3], #1
 8002d5e:	e7f9      	b.n	8002d54 <memset+0x4>

08002d60 <__libc_init_array>:
 8002d60:	b570      	push	{r4, r5, r6, lr}
 8002d62:	2600      	movs	r6, #0
 8002d64:	4d0c      	ldr	r5, [pc, #48]	; (8002d98 <__libc_init_array+0x38>)
 8002d66:	4c0d      	ldr	r4, [pc, #52]	; (8002d9c <__libc_init_array+0x3c>)
 8002d68:	1b64      	subs	r4, r4, r5
 8002d6a:	10a4      	asrs	r4, r4, #2
 8002d6c:	42a6      	cmp	r6, r4
 8002d6e:	d109      	bne.n	8002d84 <__libc_init_array+0x24>
 8002d70:	f000 f81a 	bl	8002da8 <_init>
 8002d74:	2600      	movs	r6, #0
 8002d76:	4d0a      	ldr	r5, [pc, #40]	; (8002da0 <__libc_init_array+0x40>)
 8002d78:	4c0a      	ldr	r4, [pc, #40]	; (8002da4 <__libc_init_array+0x44>)
 8002d7a:	1b64      	subs	r4, r4, r5
 8002d7c:	10a4      	asrs	r4, r4, #2
 8002d7e:	42a6      	cmp	r6, r4
 8002d80:	d105      	bne.n	8002d8e <__libc_init_array+0x2e>
 8002d82:	bd70      	pop	{r4, r5, r6, pc}
 8002d84:	f855 3b04 	ldr.w	r3, [r5], #4
 8002d88:	4798      	blx	r3
 8002d8a:	3601      	adds	r6, #1
 8002d8c:	e7ee      	b.n	8002d6c <__libc_init_array+0xc>
 8002d8e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002d92:	4798      	blx	r3
 8002d94:	3601      	adds	r6, #1
 8002d96:	e7f2      	b.n	8002d7e <__libc_init_array+0x1e>
 8002d98:	08002de4 	.word	0x08002de4
 8002d9c:	08002de4 	.word	0x08002de4
 8002da0:	08002de4 	.word	0x08002de4
 8002da4:	08002de8 	.word	0x08002de8

08002da8 <_init>:
 8002da8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002daa:	bf00      	nop
 8002dac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002dae:	bc08      	pop	{r3}
 8002db0:	469e      	mov	lr, r3
 8002db2:	4770      	bx	lr

08002db4 <_fini>:
 8002db4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002db6:	bf00      	nop
 8002db8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002dba:	bc08      	pop	{r3}
 8002dbc:	469e      	mov	lr, r3
 8002dbe:	4770      	bx	lr
