
RCT6_lab2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004730  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000080  08004914  08004914  00014914  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004994  08004994  00020064  2**0
                  CONTENTS
  4 .ARM          00000000  08004994  08004994  00020064  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004994  08004994  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004994  08004994  00014994  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004998  08004998  00014998  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  0800499c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002b8  20000064  08004a00  00020064  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000031c  08004a00  0002031c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002008d  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000deb3  00000000  00000000  000200d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002273  00000000  00000000  0002df83  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d88  00000000  00000000  000301f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000a8e  00000000  00000000  00030f80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00002ef8  00000000  00000000  00031a0e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00010f5c  00000000  00000000  00034906  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009f012  00000000  00000000  00045862  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003cf4  00000000  00000000  000e4874  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  000e8568  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	20000064 	.word	0x20000064
 8000200:	00000000 	.word	0x00000000
 8000204:	080048fc 	.word	0x080048fc

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000068 	.word	0x20000068
 8000220:	080048fc 	.word	0x080048fc

08000224 <HAL_UART_RxCpltCallback>:
//        HAL_UART_Transmit(&huart2, &temp, 1, 50);
//        HAL_UART_Receive_IT(&huart2, &temp, 1);
//    }
//}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000224:	b580      	push	{r7, lr}
 8000226:	b082      	sub	sp, #8
 8000228:	af00      	add	r7, sp, #0
 800022a:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART2) {
 800022c:	687b      	ldr	r3, [r7, #4]
 800022e:	681b      	ldr	r3, [r3, #0]
 8000230:	4a1f      	ldr	r2, [pc, #124]	; (80002b0 <HAL_UART_RxCpltCallback+0x8c>)
 8000232:	4293      	cmp	r3, r2
 8000234:	d137      	bne.n	80002a6 <HAL_UART_RxCpltCallback+0x82>
    	if (temp == '!') {
 8000236:	4b1f      	ldr	r3, [pc, #124]	; (80002b4 <HAL_UART_RxCpltCallback+0x90>)
 8000238:	781b      	ldrb	r3, [r3, #0]
 800023a:	2b21      	cmp	r3, #33	; 0x21
 800023c:	d10d      	bne.n	800025a <HAL_UART_RxCpltCallback+0x36>
    		if (index_buffer > 24) {
 800023e:	4b1e      	ldr	r3, [pc, #120]	; (80002b8 <HAL_UART_RxCpltCallback+0x94>)
 8000240:	781b      	ldrb	r3, [r3, #0]
 8000242:	2b18      	cmp	r3, #24
 8000244:	d902      	bls.n	800024c <HAL_UART_RxCpltCallback+0x28>
    			index_buffer = 0;
 8000246:	4b1c      	ldr	r3, [pc, #112]	; (80002b8 <HAL_UART_RxCpltCallback+0x94>)
 8000248:	2200      	movs	r2, #0
 800024a:	701a      	strb	r2, [r3, #0]
    		}
    		current_index_buffer = index_buffer;
 800024c:	4b1a      	ldr	r3, [pc, #104]	; (80002b8 <HAL_UART_RxCpltCallback+0x94>)
 800024e:	781a      	ldrb	r2, [r3, #0]
 8000250:	4b1a      	ldr	r3, [pc, #104]	; (80002bc <HAL_UART_RxCpltCallback+0x98>)
 8000252:	701a      	strb	r2, [r3, #0]
    		cmd_flag = 1;
 8000254:	4b1a      	ldr	r3, [pc, #104]	; (80002c0 <HAL_UART_RxCpltCallback+0x9c>)
 8000256:	2201      	movs	r2, #1
 8000258:	701a      	strb	r2, [r3, #0]
    	}
        buffer[index_buffer] = temp;
 800025a:	4b17      	ldr	r3, [pc, #92]	; (80002b8 <HAL_UART_RxCpltCallback+0x94>)
 800025c:	781b      	ldrb	r3, [r3, #0]
 800025e:	461a      	mov	r2, r3
 8000260:	4b14      	ldr	r3, [pc, #80]	; (80002b4 <HAL_UART_RxCpltCallback+0x90>)
 8000262:	7819      	ldrb	r1, [r3, #0]
 8000264:	4b17      	ldr	r3, [pc, #92]	; (80002c4 <HAL_UART_RxCpltCallback+0xa0>)
 8000266:	5499      	strb	r1, [r3, r2]
    	if (temp == '#') {
 8000268:	4b12      	ldr	r3, [pc, #72]	; (80002b4 <HAL_UART_RxCpltCallback+0x90>)
 800026a:	781b      	ldrb	r3, [r3, #0]
 800026c:	2b23      	cmp	r3, #35	; 0x23
 800026e:	d105      	bne.n	800027c <HAL_UART_RxCpltCallback+0x58>
    		cmd_end_flag = 1;
 8000270:	4b15      	ldr	r3, [pc, #84]	; (80002c8 <HAL_UART_RxCpltCallback+0xa4>)
 8000272:	2201      	movs	r2, #1
 8000274:	701a      	strb	r2, [r3, #0]
    		index_buffer = 0;
 8000276:	4b10      	ldr	r3, [pc, #64]	; (80002b8 <HAL_UART_RxCpltCallback+0x94>)
 8000278:	2200      	movs	r2, #0
 800027a:	701a      	strb	r2, [r3, #0]
    	}
        index_buffer++;
 800027c:	4b0e      	ldr	r3, [pc, #56]	; (80002b8 <HAL_UART_RxCpltCallback+0x94>)
 800027e:	781b      	ldrb	r3, [r3, #0]
 8000280:	3301      	adds	r3, #1
 8000282:	b2da      	uxtb	r2, r3
 8000284:	4b0c      	ldr	r3, [pc, #48]	; (80002b8 <HAL_UART_RxCpltCallback+0x94>)
 8000286:	701a      	strb	r2, [r3, #0]
        if (index_buffer == MAX_BUFFER_SIZE) index_buffer = 0;
 8000288:	4b0b      	ldr	r3, [pc, #44]	; (80002b8 <HAL_UART_RxCpltCallback+0x94>)
 800028a:	781b      	ldrb	r3, [r3, #0]
 800028c:	2b1e      	cmp	r3, #30
 800028e:	d102      	bne.n	8000296 <HAL_UART_RxCpltCallback+0x72>
 8000290:	4b09      	ldr	r3, [pc, #36]	; (80002b8 <HAL_UART_RxCpltCallback+0x94>)
 8000292:	2200      	movs	r2, #0
 8000294:	701a      	strb	r2, [r3, #0]
        buffer_flag = 1;
 8000296:	4b0d      	ldr	r3, [pc, #52]	; (80002cc <HAL_UART_RxCpltCallback+0xa8>)
 8000298:	2201      	movs	r2, #1
 800029a:	701a      	strb	r2, [r3, #0]
        HAL_UART_Receive_IT(&huart2, &temp, 1);
 800029c:	2201      	movs	r2, #1
 800029e:	4905      	ldr	r1, [pc, #20]	; (80002b4 <HAL_UART_RxCpltCallback+0x90>)
 80002a0:	480b      	ldr	r0, [pc, #44]	; (80002d0 <HAL_UART_RxCpltCallback+0xac>)
 80002a2:	f003 f8ea 	bl	800347a <HAL_UART_Receive_IT>
    }
}
 80002a6:	bf00      	nop
 80002a8:	3708      	adds	r7, #8
 80002aa:	46bd      	mov	sp, r7
 80002ac:	bd80      	pop	{r7, pc}
 80002ae:	bf00      	nop
 80002b0:	40004400 	.word	0x40004400
 80002b4:	20000194 	.word	0x20000194
 80002b8:	200001b6 	.word	0x200001b6
 80002bc:	200001b7 	.word	0x200001b7
 80002c0:	200001b9 	.word	0x200001b9
 80002c4:	20000198 	.word	0x20000198
 80002c8:	200001ba 	.word	0x200001ba
 80002cc:	200001b8 	.word	0x200001b8
 80002d0:	200000f8 	.word	0x200000f8

080002d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002d4:	b580      	push	{r7, lr}
 80002d6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002d8:	f000 fcb2 	bl	8000c40 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002dc:	f000 f82a 	bl	8000334 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002e0:	f000 f92e 	bl	8000540 <MX_GPIO_Init>
  MX_TIM2_Init();
 80002e4:	f000 f8b6 	bl	8000454 <MX_TIM2_Init>
  MX_ADC1_Init();
 80002e8:	f000 f876 	bl	80003d8 <MX_ADC1_Init>
  MX_USART2_UART_Init();
 80002ec:	f000 f8fe 	bl	80004ec <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 80002f0:	480b      	ldr	r0, [pc, #44]	; (8000320 <main+0x4c>)
 80002f2:	f002 fc11 	bl	8002b18 <HAL_TIM_Base_Start_IT>
  HAL_UART_Receive_IT(&huart2, &temp, 1);
 80002f6:	2201      	movs	r2, #1
 80002f8:	490a      	ldr	r1, [pc, #40]	; (8000324 <main+0x50>)
 80002fa:	480b      	ldr	r0, [pc, #44]	; (8000328 <main+0x54>)
 80002fc:	f003 f8bd 	bl	800347a <HAL_UART_Receive_IT>
  HAL_ADC_Start_IT(&hadc1);
 8000300:	480a      	ldr	r0, [pc, #40]	; (800032c <main+0x58>)
 8000302:	f000 ffc9 	bl	8001298 <HAL_ADC_Start_IT>

  	  //LAB4
//	  SCH_Dispatch_Tasks();

	  //LAB5
	    if (buffer_flag == 1) {
 8000306:	4b0a      	ldr	r3, [pc, #40]	; (8000330 <main+0x5c>)
 8000308:	781b      	ldrb	r3, [r3, #0]
 800030a:	2b01      	cmp	r3, #1
 800030c:	d104      	bne.n	8000318 <main+0x44>
	        command_parser_fsm();
 800030e:	f000 fb5f 	bl	80009d0 <command_parser_fsm>
	        buffer_flag = 0;
 8000312:	4b07      	ldr	r3, [pc, #28]	; (8000330 <main+0x5c>)
 8000314:	2200      	movs	r2, #0
 8000316:	701a      	strb	r2, [r3, #0]
	    }
	    uart_communication_fsm();
 8000318:	f000 fbd4 	bl	8000ac4 <uart_communication_fsm>
	    if (buffer_flag == 1) {
 800031c:	e7f3      	b.n	8000306 <main+0x32>
 800031e:	bf00      	nop
 8000320:	200000b0 	.word	0x200000b0
 8000324:	20000194 	.word	0x20000194
 8000328:	200000f8 	.word	0x200000f8
 800032c:	20000080 	.word	0x20000080
 8000330:	200001b8 	.word	0x200001b8

08000334 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000334:	b580      	push	{r7, lr}
 8000336:	b096      	sub	sp, #88	; 0x58
 8000338:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800033a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800033e:	2228      	movs	r2, #40	; 0x28
 8000340:	2100      	movs	r1, #0
 8000342:	4618      	mov	r0, r3
 8000344:	f003 fe48 	bl	8003fd8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000348:	f107 031c 	add.w	r3, r7, #28
 800034c:	2200      	movs	r2, #0
 800034e:	601a      	str	r2, [r3, #0]
 8000350:	605a      	str	r2, [r3, #4]
 8000352:	609a      	str	r2, [r3, #8]
 8000354:	60da      	str	r2, [r3, #12]
 8000356:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000358:	1d3b      	adds	r3, r7, #4
 800035a:	2200      	movs	r2, #0
 800035c:	601a      	str	r2, [r3, #0]
 800035e:	605a      	str	r2, [r3, #4]
 8000360:	609a      	str	r2, [r3, #8]
 8000362:	60da      	str	r2, [r3, #12]
 8000364:	611a      	str	r2, [r3, #16]
 8000366:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000368:	2302      	movs	r3, #2
 800036a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800036c:	2301      	movs	r3, #1
 800036e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000370:	2310      	movs	r3, #16
 8000372:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000374:	2300      	movs	r3, #0
 8000376:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000378:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800037c:	4618      	mov	r0, r3
 800037e:	f001 fddd 	bl	8001f3c <HAL_RCC_OscConfig>
 8000382:	4603      	mov	r3, r0
 8000384:	2b00      	cmp	r3, #0
 8000386:	d001      	beq.n	800038c <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000388:	f000 f972 	bl	8000670 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800038c:	230f      	movs	r3, #15
 800038e:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000390:	2300      	movs	r3, #0
 8000392:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000394:	2300      	movs	r3, #0
 8000396:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000398:	2300      	movs	r3, #0
 800039a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800039c:	2300      	movs	r3, #0
 800039e:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80003a0:	f107 031c 	add.w	r3, r7, #28
 80003a4:	2100      	movs	r1, #0
 80003a6:	4618      	mov	r0, r3
 80003a8:	f002 f84a 	bl	8002440 <HAL_RCC_ClockConfig>
 80003ac:	4603      	mov	r3, r0
 80003ae:	2b00      	cmp	r3, #0
 80003b0:	d001      	beq.n	80003b6 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80003b2:	f000 f95d 	bl	8000670 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80003b6:	2302      	movs	r3, #2
 80003b8:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 80003ba:	2300      	movs	r3, #0
 80003bc:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80003be:	1d3b      	adds	r3, r7, #4
 80003c0:	4618      	mov	r0, r3
 80003c2:	f002 f9cb 	bl	800275c <HAL_RCCEx_PeriphCLKConfig>
 80003c6:	4603      	mov	r3, r0
 80003c8:	2b00      	cmp	r3, #0
 80003ca:	d001      	beq.n	80003d0 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80003cc:	f000 f950 	bl	8000670 <Error_Handler>
  }
}
 80003d0:	bf00      	nop
 80003d2:	3758      	adds	r7, #88	; 0x58
 80003d4:	46bd      	mov	sp, r7
 80003d6:	bd80      	pop	{r7, pc}

080003d8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80003d8:	b580      	push	{r7, lr}
 80003da:	b084      	sub	sp, #16
 80003dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80003de:	1d3b      	adds	r3, r7, #4
 80003e0:	2200      	movs	r2, #0
 80003e2:	601a      	str	r2, [r3, #0]
 80003e4:	605a      	str	r2, [r3, #4]
 80003e6:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80003e8:	4b18      	ldr	r3, [pc, #96]	; (800044c <MX_ADC1_Init+0x74>)
 80003ea:	4a19      	ldr	r2, [pc, #100]	; (8000450 <MX_ADC1_Init+0x78>)
 80003ec:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80003ee:	4b17      	ldr	r3, [pc, #92]	; (800044c <MX_ADC1_Init+0x74>)
 80003f0:	2200      	movs	r2, #0
 80003f2:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80003f4:	4b15      	ldr	r3, [pc, #84]	; (800044c <MX_ADC1_Init+0x74>)
 80003f6:	2201      	movs	r2, #1
 80003f8:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80003fa:	4b14      	ldr	r3, [pc, #80]	; (800044c <MX_ADC1_Init+0x74>)
 80003fc:	2200      	movs	r2, #0
 80003fe:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000400:	4b12      	ldr	r3, [pc, #72]	; (800044c <MX_ADC1_Init+0x74>)
 8000402:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000406:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000408:	4b10      	ldr	r3, [pc, #64]	; (800044c <MX_ADC1_Init+0x74>)
 800040a:	2200      	movs	r2, #0
 800040c:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 800040e:	4b0f      	ldr	r3, [pc, #60]	; (800044c <MX_ADC1_Init+0x74>)
 8000410:	2201      	movs	r2, #1
 8000412:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000414:	480d      	ldr	r0, [pc, #52]	; (800044c <MX_ADC1_Init+0x74>)
 8000416:	f000 fc75 	bl	8000d04 <HAL_ADC_Init>
 800041a:	4603      	mov	r3, r0
 800041c:	2b00      	cmp	r3, #0
 800041e:	d001      	beq.n	8000424 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000420:	f000 f926 	bl	8000670 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000424:	2301      	movs	r3, #1
 8000426:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000428:	2301      	movs	r3, #1
 800042a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800042c:	2300      	movs	r3, #0
 800042e:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000430:	1d3b      	adds	r3, r7, #4
 8000432:	4619      	mov	r1, r3
 8000434:	4805      	ldr	r0, [pc, #20]	; (800044c <MX_ADC1_Init+0x74>)
 8000436:	f000 fff1 	bl	800141c <HAL_ADC_ConfigChannel>
 800043a:	4603      	mov	r3, r0
 800043c:	2b00      	cmp	r3, #0
 800043e:	d001      	beq.n	8000444 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000440:	f000 f916 	bl	8000670 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000444:	bf00      	nop
 8000446:	3710      	adds	r7, #16
 8000448:	46bd      	mov	sp, r7
 800044a:	bd80      	pop	{r7, pc}
 800044c:	20000080 	.word	0x20000080
 8000450:	40012400 	.word	0x40012400

08000454 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000454:	b580      	push	{r7, lr}
 8000456:	b086      	sub	sp, #24
 8000458:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800045a:	f107 0308 	add.w	r3, r7, #8
 800045e:	2200      	movs	r2, #0
 8000460:	601a      	str	r2, [r3, #0]
 8000462:	605a      	str	r2, [r3, #4]
 8000464:	609a      	str	r2, [r3, #8]
 8000466:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000468:	463b      	mov	r3, r7
 800046a:	2200      	movs	r2, #0
 800046c:	601a      	str	r2, [r3, #0]
 800046e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000470:	4b1d      	ldr	r3, [pc, #116]	; (80004e8 <MX_TIM2_Init+0x94>)
 8000472:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000476:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 799;
 8000478:	4b1b      	ldr	r3, [pc, #108]	; (80004e8 <MX_TIM2_Init+0x94>)
 800047a:	f240 321f 	movw	r2, #799	; 0x31f
 800047e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000480:	4b19      	ldr	r3, [pc, #100]	; (80004e8 <MX_TIM2_Init+0x94>)
 8000482:	2200      	movs	r2, #0
 8000484:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8000486:	4b18      	ldr	r3, [pc, #96]	; (80004e8 <MX_TIM2_Init+0x94>)
 8000488:	2209      	movs	r2, #9
 800048a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800048c:	4b16      	ldr	r3, [pc, #88]	; (80004e8 <MX_TIM2_Init+0x94>)
 800048e:	2200      	movs	r2, #0
 8000490:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000492:	4b15      	ldr	r3, [pc, #84]	; (80004e8 <MX_TIM2_Init+0x94>)
 8000494:	2200      	movs	r2, #0
 8000496:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000498:	4813      	ldr	r0, [pc, #76]	; (80004e8 <MX_TIM2_Init+0x94>)
 800049a:	f002 faed 	bl	8002a78 <HAL_TIM_Base_Init>
 800049e:	4603      	mov	r3, r0
 80004a0:	2b00      	cmp	r3, #0
 80004a2:	d001      	beq.n	80004a8 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80004a4:	f000 f8e4 	bl	8000670 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80004a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80004ac:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80004ae:	f107 0308 	add.w	r3, r7, #8
 80004b2:	4619      	mov	r1, r3
 80004b4:	480c      	ldr	r0, [pc, #48]	; (80004e8 <MX_TIM2_Init+0x94>)
 80004b6:	f002 fc7f 	bl	8002db8 <HAL_TIM_ConfigClockSource>
 80004ba:	4603      	mov	r3, r0
 80004bc:	2b00      	cmp	r3, #0
 80004be:	d001      	beq.n	80004c4 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80004c0:	f000 f8d6 	bl	8000670 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80004c4:	2300      	movs	r3, #0
 80004c6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80004c8:	2300      	movs	r3, #0
 80004ca:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80004cc:	463b      	mov	r3, r7
 80004ce:	4619      	mov	r1, r3
 80004d0:	4805      	ldr	r0, [pc, #20]	; (80004e8 <MX_TIM2_Init+0x94>)
 80004d2:	f002 fe79 	bl	80031c8 <HAL_TIMEx_MasterConfigSynchronization>
 80004d6:	4603      	mov	r3, r0
 80004d8:	2b00      	cmp	r3, #0
 80004da:	d001      	beq.n	80004e0 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80004dc:	f000 f8c8 	bl	8000670 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80004e0:	bf00      	nop
 80004e2:	3718      	adds	r7, #24
 80004e4:	46bd      	mov	sp, r7
 80004e6:	bd80      	pop	{r7, pc}
 80004e8:	200000b0 	.word	0x200000b0

080004ec <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80004f0:	4b11      	ldr	r3, [pc, #68]	; (8000538 <MX_USART2_UART_Init+0x4c>)
 80004f2:	4a12      	ldr	r2, [pc, #72]	; (800053c <MX_USART2_UART_Init+0x50>)
 80004f4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80004f6:	4b10      	ldr	r3, [pc, #64]	; (8000538 <MX_USART2_UART_Init+0x4c>)
 80004f8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80004fc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80004fe:	4b0e      	ldr	r3, [pc, #56]	; (8000538 <MX_USART2_UART_Init+0x4c>)
 8000500:	2200      	movs	r2, #0
 8000502:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000504:	4b0c      	ldr	r3, [pc, #48]	; (8000538 <MX_USART2_UART_Init+0x4c>)
 8000506:	2200      	movs	r2, #0
 8000508:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800050a:	4b0b      	ldr	r3, [pc, #44]	; (8000538 <MX_USART2_UART_Init+0x4c>)
 800050c:	2200      	movs	r2, #0
 800050e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000510:	4b09      	ldr	r3, [pc, #36]	; (8000538 <MX_USART2_UART_Init+0x4c>)
 8000512:	220c      	movs	r2, #12
 8000514:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000516:	4b08      	ldr	r3, [pc, #32]	; (8000538 <MX_USART2_UART_Init+0x4c>)
 8000518:	2200      	movs	r2, #0
 800051a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800051c:	4b06      	ldr	r3, [pc, #24]	; (8000538 <MX_USART2_UART_Init+0x4c>)
 800051e:	2200      	movs	r2, #0
 8000520:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000522:	4805      	ldr	r0, [pc, #20]	; (8000538 <MX_USART2_UART_Init+0x4c>)
 8000524:	f002 fece 	bl	80032c4 <HAL_UART_Init>
 8000528:	4603      	mov	r3, r0
 800052a:	2b00      	cmp	r3, #0
 800052c:	d001      	beq.n	8000532 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800052e:	f000 f89f 	bl	8000670 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000532:	bf00      	nop
 8000534:	bd80      	pop	{r7, pc}
 8000536:	bf00      	nop
 8000538:	200000f8 	.word	0x200000f8
 800053c:	40004400 	.word	0x40004400

08000540 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	b088      	sub	sp, #32
 8000544:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000546:	f107 0310 	add.w	r3, r7, #16
 800054a:	2200      	movs	r2, #0
 800054c:	601a      	str	r2, [r3, #0]
 800054e:	605a      	str	r2, [r3, #4]
 8000550:	609a      	str	r2, [r3, #8]
 8000552:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000554:	4b3d      	ldr	r3, [pc, #244]	; (800064c <MX_GPIO_Init+0x10c>)
 8000556:	699b      	ldr	r3, [r3, #24]
 8000558:	4a3c      	ldr	r2, [pc, #240]	; (800064c <MX_GPIO_Init+0x10c>)
 800055a:	f043 0310 	orr.w	r3, r3, #16
 800055e:	6193      	str	r3, [r2, #24]
 8000560:	4b3a      	ldr	r3, [pc, #232]	; (800064c <MX_GPIO_Init+0x10c>)
 8000562:	699b      	ldr	r3, [r3, #24]
 8000564:	f003 0310 	and.w	r3, r3, #16
 8000568:	60fb      	str	r3, [r7, #12]
 800056a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800056c:	4b37      	ldr	r3, [pc, #220]	; (800064c <MX_GPIO_Init+0x10c>)
 800056e:	699b      	ldr	r3, [r3, #24]
 8000570:	4a36      	ldr	r2, [pc, #216]	; (800064c <MX_GPIO_Init+0x10c>)
 8000572:	f043 0304 	orr.w	r3, r3, #4
 8000576:	6193      	str	r3, [r2, #24]
 8000578:	4b34      	ldr	r3, [pc, #208]	; (800064c <MX_GPIO_Init+0x10c>)
 800057a:	699b      	ldr	r3, [r3, #24]
 800057c:	f003 0304 	and.w	r3, r3, #4
 8000580:	60bb      	str	r3, [r7, #8]
 8000582:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000584:	4b31      	ldr	r3, [pc, #196]	; (800064c <MX_GPIO_Init+0x10c>)
 8000586:	699b      	ldr	r3, [r3, #24]
 8000588:	4a30      	ldr	r2, [pc, #192]	; (800064c <MX_GPIO_Init+0x10c>)
 800058a:	f043 0308 	orr.w	r3, r3, #8
 800058e:	6193      	str	r3, [r2, #24]
 8000590:	4b2e      	ldr	r3, [pc, #184]	; (800064c <MX_GPIO_Init+0x10c>)
 8000592:	699b      	ldr	r3, [r3, #24]
 8000594:	f003 0308 	and.w	r3, r3, #8
 8000598:	607b      	str	r3, [r7, #4]
 800059a:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED1_Pin|LED2_Pin|LED3_Pin|LED4_Pin
 800059c:	2200      	movs	r2, #0
 800059e:	21bf      	movs	r1, #191	; 0xbf
 80005a0:	482b      	ldr	r0, [pc, #172]	; (8000650 <MX_GPIO_Init+0x110>)
 80005a2:	f001 fcb3 	bl	8001f0c <HAL_GPIO_WritePin>
                          |LED5_Pin|LED6_Pin|LED7_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SEG2_Pin|EN0_Pin|EN1_Pin|EN2_Pin
 80005a6:	2200      	movs	r2, #0
 80005a8:	f44f 7174 	mov.w	r1, #976	; 0x3d0
 80005ac:	4829      	ldr	r0, [pc, #164]	; (8000654 <MX_GPIO_Init+0x114>)
 80005ae:	f001 fcad 	bl	8001f0c <HAL_GPIO_WritePin>
                          |EN3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SEG0_Pin|SEG1_Pin|SEG3_Pin|SEG4_Pin
 80005b2:	2200      	movs	r2, #0
 80005b4:	21f3      	movs	r1, #243	; 0xf3
 80005b6:	4828      	ldr	r0, [pc, #160]	; (8000658 <MX_GPIO_Init+0x118>)
 80005b8:	f001 fca8 	bl	8001f0c <HAL_GPIO_WritePin>
                          |SEG5_Pin|SEG6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : LED1_Pin LED2_Pin LED3_Pin LED4_Pin
                           LED5_Pin LED6_Pin LED7_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin|LED4_Pin
 80005bc:	23bf      	movs	r3, #191	; 0xbf
 80005be:	613b      	str	r3, [r7, #16]
                          |LED5_Pin|LED6_Pin|LED7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005c0:	2301      	movs	r3, #1
 80005c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005c4:	2300      	movs	r3, #0
 80005c6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005c8:	2302      	movs	r3, #2
 80005ca:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80005cc:	f107 0310 	add.w	r3, r7, #16
 80005d0:	4619      	mov	r1, r3
 80005d2:	481f      	ldr	r0, [pc, #124]	; (8000650 <MX_GPIO_Init+0x110>)
 80005d4:	f001 fb06 	bl	8001be4 <HAL_GPIO_Init>

  /*Configure GPIO pin : WKUP_Pin */
  GPIO_InitStruct.Pin = WKUP_Pin;
 80005d8:	2301      	movs	r3, #1
 80005da:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005dc:	2300      	movs	r3, #0
 80005de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005e0:	2300      	movs	r3, #0
 80005e2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(WKUP_GPIO_Port, &GPIO_InitStruct);
 80005e4:	f107 0310 	add.w	r3, r7, #16
 80005e8:	4619      	mov	r1, r3
 80005ea:	481a      	ldr	r0, [pc, #104]	; (8000654 <MX_GPIO_Init+0x114>)
 80005ec:	f001 fafa 	bl	8001be4 <HAL_GPIO_Init>

  /*Configure GPIO pins : SEG2_Pin EN0_Pin EN1_Pin EN2_Pin
                           EN3_Pin */
  GPIO_InitStruct.Pin = SEG2_Pin|EN0_Pin|EN1_Pin|EN2_Pin
 80005f0:	f44f 7374 	mov.w	r3, #976	; 0x3d0
 80005f4:	613b      	str	r3, [r7, #16]
                          |EN3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005f6:	2301      	movs	r3, #1
 80005f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005fa:	2300      	movs	r3, #0
 80005fc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005fe:	2302      	movs	r3, #2
 8000600:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000602:	f107 0310 	add.w	r3, r7, #16
 8000606:	4619      	mov	r1, r3
 8000608:	4812      	ldr	r0, [pc, #72]	; (8000654 <MX_GPIO_Init+0x114>)
 800060a:	f001 faeb 	bl	8001be4 <HAL_GPIO_Init>

  /*Configure GPIO pins : SEG0_Pin SEG1_Pin SEG3_Pin SEG4_Pin
                           SEG5_Pin SEG6_Pin */
  GPIO_InitStruct.Pin = SEG0_Pin|SEG1_Pin|SEG3_Pin|SEG4_Pin
 800060e:	23f3      	movs	r3, #243	; 0xf3
 8000610:	613b      	str	r3, [r7, #16]
                          |SEG5_Pin|SEG6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000612:	2301      	movs	r3, #1
 8000614:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000616:	2300      	movs	r3, #0
 8000618:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800061a:	2302      	movs	r3, #2
 800061c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800061e:	f107 0310 	add.w	r3, r7, #16
 8000622:	4619      	mov	r1, r3
 8000624:	480c      	ldr	r0, [pc, #48]	; (8000658 <MX_GPIO_Init+0x118>)
 8000626:	f001 fadd 	bl	8001be4 <HAL_GPIO_Init>

  /*Configure GPIO pins : BTN3_Pin BTN1_Pin BTN2_Pin */
  GPIO_InitStruct.Pin = BTN3_Pin|BTN1_Pin|BTN2_Pin;
 800062a:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 800062e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000630:	2300      	movs	r3, #0
 8000632:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000634:	2300      	movs	r3, #0
 8000636:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000638:	f107 0310 	add.w	r3, r7, #16
 800063c:	4619      	mov	r1, r3
 800063e:	4806      	ldr	r0, [pc, #24]	; (8000658 <MX_GPIO_Init+0x118>)
 8000640:	f001 fad0 	bl	8001be4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000644:	bf00      	nop
 8000646:	3720      	adds	r7, #32
 8000648:	46bd      	mov	sp, r7
 800064a:	bd80      	pop	{r7, pc}
 800064c:	40021000 	.word	0x40021000
 8000650:	40011000 	.word	0x40011000
 8000654:	40010800 	.word	0x40010800
 8000658:	40010c00 	.word	0x40010c00

0800065c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	b082      	sub	sp, #8
 8000660:	af00      	add	r7, sp, #0
 8000662:	6078      	str	r0, [r7, #4]
//	SCH_Update();
	timerRun();
 8000664:	f000 f984 	bl	8000970 <timerRun>
//	getKeyInput();
//	autoUpdate7Seg();
}
 8000668:	bf00      	nop
 800066a:	3708      	adds	r7, #8
 800066c:	46bd      	mov	sp, r7
 800066e:	bd80      	pop	{r7, pc}

08000670 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000670:	b480      	push	{r7}
 8000672:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000674:	b672      	cpsid	i
}
 8000676:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000678:	e7fe      	b.n	8000678 <Error_Handler+0x8>
	...

0800067c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800067c:	b480      	push	{r7}
 800067e:	b085      	sub	sp, #20
 8000680:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000682:	4b15      	ldr	r3, [pc, #84]	; (80006d8 <HAL_MspInit+0x5c>)
 8000684:	699b      	ldr	r3, [r3, #24]
 8000686:	4a14      	ldr	r2, [pc, #80]	; (80006d8 <HAL_MspInit+0x5c>)
 8000688:	f043 0301 	orr.w	r3, r3, #1
 800068c:	6193      	str	r3, [r2, #24]
 800068e:	4b12      	ldr	r3, [pc, #72]	; (80006d8 <HAL_MspInit+0x5c>)
 8000690:	699b      	ldr	r3, [r3, #24]
 8000692:	f003 0301 	and.w	r3, r3, #1
 8000696:	60bb      	str	r3, [r7, #8]
 8000698:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800069a:	4b0f      	ldr	r3, [pc, #60]	; (80006d8 <HAL_MspInit+0x5c>)
 800069c:	69db      	ldr	r3, [r3, #28]
 800069e:	4a0e      	ldr	r2, [pc, #56]	; (80006d8 <HAL_MspInit+0x5c>)
 80006a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006a4:	61d3      	str	r3, [r2, #28]
 80006a6:	4b0c      	ldr	r3, [pc, #48]	; (80006d8 <HAL_MspInit+0x5c>)
 80006a8:	69db      	ldr	r3, [r3, #28]
 80006aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006ae:	607b      	str	r3, [r7, #4]
 80006b0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80006b2:	4b0a      	ldr	r3, [pc, #40]	; (80006dc <HAL_MspInit+0x60>)
 80006b4:	685b      	ldr	r3, [r3, #4]
 80006b6:	60fb      	str	r3, [r7, #12]
 80006b8:	68fb      	ldr	r3, [r7, #12]
 80006ba:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80006be:	60fb      	str	r3, [r7, #12]
 80006c0:	68fb      	ldr	r3, [r7, #12]
 80006c2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80006c6:	60fb      	str	r3, [r7, #12]
 80006c8:	4a04      	ldr	r2, [pc, #16]	; (80006dc <HAL_MspInit+0x60>)
 80006ca:	68fb      	ldr	r3, [r7, #12]
 80006cc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006ce:	bf00      	nop
 80006d0:	3714      	adds	r7, #20
 80006d2:	46bd      	mov	sp, r7
 80006d4:	bc80      	pop	{r7}
 80006d6:	4770      	bx	lr
 80006d8:	40021000 	.word	0x40021000
 80006dc:	40010000 	.word	0x40010000

080006e0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b088      	sub	sp, #32
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006e8:	f107 0310 	add.w	r3, r7, #16
 80006ec:	2200      	movs	r2, #0
 80006ee:	601a      	str	r2, [r3, #0]
 80006f0:	605a      	str	r2, [r3, #4]
 80006f2:	609a      	str	r2, [r3, #8]
 80006f4:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	681b      	ldr	r3, [r3, #0]
 80006fa:	4a14      	ldr	r2, [pc, #80]	; (800074c <HAL_ADC_MspInit+0x6c>)
 80006fc:	4293      	cmp	r3, r2
 80006fe:	d121      	bne.n	8000744 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000700:	4b13      	ldr	r3, [pc, #76]	; (8000750 <HAL_ADC_MspInit+0x70>)
 8000702:	699b      	ldr	r3, [r3, #24]
 8000704:	4a12      	ldr	r2, [pc, #72]	; (8000750 <HAL_ADC_MspInit+0x70>)
 8000706:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800070a:	6193      	str	r3, [r2, #24]
 800070c:	4b10      	ldr	r3, [pc, #64]	; (8000750 <HAL_ADC_MspInit+0x70>)
 800070e:	699b      	ldr	r3, [r3, #24]
 8000710:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000714:	60fb      	str	r3, [r7, #12]
 8000716:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000718:	4b0d      	ldr	r3, [pc, #52]	; (8000750 <HAL_ADC_MspInit+0x70>)
 800071a:	699b      	ldr	r3, [r3, #24]
 800071c:	4a0c      	ldr	r2, [pc, #48]	; (8000750 <HAL_ADC_MspInit+0x70>)
 800071e:	f043 0304 	orr.w	r3, r3, #4
 8000722:	6193      	str	r3, [r2, #24]
 8000724:	4b0a      	ldr	r3, [pc, #40]	; (8000750 <HAL_ADC_MspInit+0x70>)
 8000726:	699b      	ldr	r3, [r3, #24]
 8000728:	f003 0304 	and.w	r3, r3, #4
 800072c:	60bb      	str	r3, [r7, #8]
 800072e:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000730:	2302      	movs	r3, #2
 8000732:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000734:	2303      	movs	r3, #3
 8000736:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000738:	f107 0310 	add.w	r3, r7, #16
 800073c:	4619      	mov	r1, r3
 800073e:	4805      	ldr	r0, [pc, #20]	; (8000754 <HAL_ADC_MspInit+0x74>)
 8000740:	f001 fa50 	bl	8001be4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000744:	bf00      	nop
 8000746:	3720      	adds	r7, #32
 8000748:	46bd      	mov	sp, r7
 800074a:	bd80      	pop	{r7, pc}
 800074c:	40012400 	.word	0x40012400
 8000750:	40021000 	.word	0x40021000
 8000754:	40010800 	.word	0x40010800

08000758 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	b084      	sub	sp, #16
 800075c:	af00      	add	r7, sp, #0
 800075e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000768:	d113      	bne.n	8000792 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800076a:	4b0c      	ldr	r3, [pc, #48]	; (800079c <HAL_TIM_Base_MspInit+0x44>)
 800076c:	69db      	ldr	r3, [r3, #28]
 800076e:	4a0b      	ldr	r2, [pc, #44]	; (800079c <HAL_TIM_Base_MspInit+0x44>)
 8000770:	f043 0301 	orr.w	r3, r3, #1
 8000774:	61d3      	str	r3, [r2, #28]
 8000776:	4b09      	ldr	r3, [pc, #36]	; (800079c <HAL_TIM_Base_MspInit+0x44>)
 8000778:	69db      	ldr	r3, [r3, #28]
 800077a:	f003 0301 	and.w	r3, r3, #1
 800077e:	60fb      	str	r3, [r7, #12]
 8000780:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 2, 0);
 8000782:	2200      	movs	r2, #0
 8000784:	2102      	movs	r1, #2
 8000786:	201c      	movs	r0, #28
 8000788:	f001 f8b3 	bl	80018f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800078c:	201c      	movs	r0, #28
 800078e:	f001 f8cc 	bl	800192a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000792:	bf00      	nop
 8000794:	3710      	adds	r7, #16
 8000796:	46bd      	mov	sp, r7
 8000798:	bd80      	pop	{r7, pc}
 800079a:	bf00      	nop
 800079c:	40021000 	.word	0x40021000

080007a0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b088      	sub	sp, #32
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007a8:	f107 0310 	add.w	r3, r7, #16
 80007ac:	2200      	movs	r2, #0
 80007ae:	601a      	str	r2, [r3, #0]
 80007b0:	605a      	str	r2, [r3, #4]
 80007b2:	609a      	str	r2, [r3, #8]
 80007b4:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	681b      	ldr	r3, [r3, #0]
 80007ba:	4a1f      	ldr	r2, [pc, #124]	; (8000838 <HAL_UART_MspInit+0x98>)
 80007bc:	4293      	cmp	r3, r2
 80007be:	d137      	bne.n	8000830 <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80007c0:	4b1e      	ldr	r3, [pc, #120]	; (800083c <HAL_UART_MspInit+0x9c>)
 80007c2:	69db      	ldr	r3, [r3, #28]
 80007c4:	4a1d      	ldr	r2, [pc, #116]	; (800083c <HAL_UART_MspInit+0x9c>)
 80007c6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80007ca:	61d3      	str	r3, [r2, #28]
 80007cc:	4b1b      	ldr	r3, [pc, #108]	; (800083c <HAL_UART_MspInit+0x9c>)
 80007ce:	69db      	ldr	r3, [r3, #28]
 80007d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80007d4:	60fb      	str	r3, [r7, #12]
 80007d6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007d8:	4b18      	ldr	r3, [pc, #96]	; (800083c <HAL_UART_MspInit+0x9c>)
 80007da:	699b      	ldr	r3, [r3, #24]
 80007dc:	4a17      	ldr	r2, [pc, #92]	; (800083c <HAL_UART_MspInit+0x9c>)
 80007de:	f043 0304 	orr.w	r3, r3, #4
 80007e2:	6193      	str	r3, [r2, #24]
 80007e4:	4b15      	ldr	r3, [pc, #84]	; (800083c <HAL_UART_MspInit+0x9c>)
 80007e6:	699b      	ldr	r3, [r3, #24]
 80007e8:	f003 0304 	and.w	r3, r3, #4
 80007ec:	60bb      	str	r3, [r7, #8]
 80007ee:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80007f0:	2304      	movs	r3, #4
 80007f2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007f4:	2302      	movs	r3, #2
 80007f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80007f8:	2303      	movs	r3, #3
 80007fa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007fc:	f107 0310 	add.w	r3, r7, #16
 8000800:	4619      	mov	r1, r3
 8000802:	480f      	ldr	r0, [pc, #60]	; (8000840 <HAL_UART_MspInit+0xa0>)
 8000804:	f001 f9ee 	bl	8001be4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000808:	2308      	movs	r3, #8
 800080a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800080c:	2300      	movs	r3, #0
 800080e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000810:	2300      	movs	r3, #0
 8000812:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000814:	f107 0310 	add.w	r3, r7, #16
 8000818:	4619      	mov	r1, r3
 800081a:	4809      	ldr	r0, [pc, #36]	; (8000840 <HAL_UART_MspInit+0xa0>)
 800081c:	f001 f9e2 	bl	8001be4 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 1, 0);
 8000820:	2200      	movs	r2, #0
 8000822:	2101      	movs	r1, #1
 8000824:	2026      	movs	r0, #38	; 0x26
 8000826:	f001 f864 	bl	80018f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800082a:	2026      	movs	r0, #38	; 0x26
 800082c:	f001 f87d 	bl	800192a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000830:	bf00      	nop
 8000832:	3720      	adds	r7, #32
 8000834:	46bd      	mov	sp, r7
 8000836:	bd80      	pop	{r7, pc}
 8000838:	40004400 	.word	0x40004400
 800083c:	40021000 	.word	0x40021000
 8000840:	40010800 	.word	0x40010800

08000844 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000844:	b480      	push	{r7}
 8000846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000848:	e7fe      	b.n	8000848 <NMI_Handler+0x4>

0800084a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800084a:	b480      	push	{r7}
 800084c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800084e:	e7fe      	b.n	800084e <HardFault_Handler+0x4>

08000850 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000850:	b480      	push	{r7}
 8000852:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000854:	e7fe      	b.n	8000854 <MemManage_Handler+0x4>

08000856 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000856:	b480      	push	{r7}
 8000858:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800085a:	e7fe      	b.n	800085a <BusFault_Handler+0x4>

0800085c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800085c:	b480      	push	{r7}
 800085e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000860:	e7fe      	b.n	8000860 <UsageFault_Handler+0x4>

08000862 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000862:	b480      	push	{r7}
 8000864:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000866:	bf00      	nop
 8000868:	46bd      	mov	sp, r7
 800086a:	bc80      	pop	{r7}
 800086c:	4770      	bx	lr

0800086e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800086e:	b480      	push	{r7}
 8000870:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000872:	bf00      	nop
 8000874:	46bd      	mov	sp, r7
 8000876:	bc80      	pop	{r7}
 8000878:	4770      	bx	lr

0800087a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800087a:	b480      	push	{r7}
 800087c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800087e:	bf00      	nop
 8000880:	46bd      	mov	sp, r7
 8000882:	bc80      	pop	{r7}
 8000884:	4770      	bx	lr

08000886 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000886:	b580      	push	{r7, lr}
 8000888:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800088a:	f000 fa1f 	bl	8000ccc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800088e:	bf00      	nop
 8000890:	bd80      	pop	{r7, pc}
	...

08000894 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000898:	4802      	ldr	r0, [pc, #8]	; (80008a4 <TIM2_IRQHandler+0x10>)
 800089a:	f002 f99d 	bl	8002bd8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800089e:	bf00      	nop
 80008a0:	bd80      	pop	{r7, pc}
 80008a2:	bf00      	nop
 80008a4:	200000b0 	.word	0x200000b0

080008a8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80008ac:	4802      	ldr	r0, [pc, #8]	; (80008b8 <USART2_IRQHandler+0x10>)
 80008ae:	f002 fe09 	bl	80034c4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80008b2:	bf00      	nop
 80008b4:	bd80      	pop	{r7, pc}
 80008b6:	bf00      	nop
 80008b8:	200000f8 	.word	0x200000f8

080008bc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b086      	sub	sp, #24
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80008c4:	4a14      	ldr	r2, [pc, #80]	; (8000918 <_sbrk+0x5c>)
 80008c6:	4b15      	ldr	r3, [pc, #84]	; (800091c <_sbrk+0x60>)
 80008c8:	1ad3      	subs	r3, r2, r3
 80008ca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80008cc:	697b      	ldr	r3, [r7, #20]
 80008ce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80008d0:	4b13      	ldr	r3, [pc, #76]	; (8000920 <_sbrk+0x64>)
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d102      	bne.n	80008de <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80008d8:	4b11      	ldr	r3, [pc, #68]	; (8000920 <_sbrk+0x64>)
 80008da:	4a12      	ldr	r2, [pc, #72]	; (8000924 <_sbrk+0x68>)
 80008dc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80008de:	4b10      	ldr	r3, [pc, #64]	; (8000920 <_sbrk+0x64>)
 80008e0:	681a      	ldr	r2, [r3, #0]
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	4413      	add	r3, r2
 80008e6:	693a      	ldr	r2, [r7, #16]
 80008e8:	429a      	cmp	r2, r3
 80008ea:	d207      	bcs.n	80008fc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80008ec:	f003 fb7c 	bl	8003fe8 <__errno>
 80008f0:	4603      	mov	r3, r0
 80008f2:	220c      	movs	r2, #12
 80008f4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80008f6:	f04f 33ff 	mov.w	r3, #4294967295
 80008fa:	e009      	b.n	8000910 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80008fc:	4b08      	ldr	r3, [pc, #32]	; (8000920 <_sbrk+0x64>)
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000902:	4b07      	ldr	r3, [pc, #28]	; (8000920 <_sbrk+0x64>)
 8000904:	681a      	ldr	r2, [r3, #0]
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	4413      	add	r3, r2
 800090a:	4a05      	ldr	r2, [pc, #20]	; (8000920 <_sbrk+0x64>)
 800090c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800090e:	68fb      	ldr	r3, [r7, #12]
}
 8000910:	4618      	mov	r0, r3
 8000912:	3718      	adds	r7, #24
 8000914:	46bd      	mov	sp, r7
 8000916:	bd80      	pop	{r7, pc}
 8000918:	2000c000 	.word	0x2000c000
 800091c:	00000400 	.word	0x00000400
 8000920:	20000140 	.word	0x20000140
 8000924:	20000320 	.word	0x20000320

08000928 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000928:	b480      	push	{r7}
 800092a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800092c:	bf00      	nop
 800092e:	46bd      	mov	sp, r7
 8000930:	bc80      	pop	{r7}
 8000932:	4770      	bx	lr

08000934 <setTimer>:
 *      Author: Thảo Quảng
 */
#include "timer.h"

int TIMER_CYCLE = 1;
void setTimer(int index, int counter){
 8000934:	b480      	push	{r7}
 8000936:	b083      	sub	sp, #12
 8000938:	af00      	add	r7, sp, #0
 800093a:	6078      	str	r0, [r7, #4]
 800093c:	6039      	str	r1, [r7, #0]
	timer_flag[index] = 0;
 800093e:	4a09      	ldr	r2, [pc, #36]	; (8000964 <setTimer+0x30>)
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	2100      	movs	r1, #0
 8000944:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	timer_counter[index] = counter / TIMER_CYCLE;
 8000948:	4b07      	ldr	r3, [pc, #28]	; (8000968 <setTimer+0x34>)
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	683a      	ldr	r2, [r7, #0]
 800094e:	fb92 f2f3 	sdiv	r2, r2, r3
 8000952:	4906      	ldr	r1, [pc, #24]	; (800096c <setTimer+0x38>)
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800095a:	bf00      	nop
 800095c:	370c      	adds	r7, #12
 800095e:	46bd      	mov	sp, r7
 8000960:	bc80      	pop	{r7}
 8000962:	4770      	bx	lr
 8000964:	20000144 	.word	0x20000144
 8000968:	20000004 	.word	0x20000004
 800096c:	2000016c 	.word	0x2000016c

08000970 <timerRun>:

int timer_flag[10];
int timer_counter[10];
void timerRun(){
 8000970:	b480      	push	{r7}
 8000972:	b083      	sub	sp, #12
 8000974:	af00      	add	r7, sp, #0
	for (int i = 0; i < 10; i++) {
 8000976:	2300      	movs	r3, #0
 8000978:	607b      	str	r3, [r7, #4]
 800097a:	e01c      	b.n	80009b6 <timerRun+0x46>
		if (timer_counter[i] >= 0) {
 800097c:	4a12      	ldr	r2, [pc, #72]	; (80009c8 <timerRun+0x58>)
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000984:	2b00      	cmp	r3, #0
 8000986:	db13      	blt.n	80009b0 <timerRun+0x40>
			timer_counter[i]--;
 8000988:	4a0f      	ldr	r2, [pc, #60]	; (80009c8 <timerRun+0x58>)
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000990:	1e5a      	subs	r2, r3, #1
 8000992:	490d      	ldr	r1, [pc, #52]	; (80009c8 <timerRun+0x58>)
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			if (timer_counter[i] <= 0) {
 800099a:	4a0b      	ldr	r2, [pc, #44]	; (80009c8 <timerRun+0x58>)
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	dc04      	bgt.n	80009b0 <timerRun+0x40>
				timer_flag[i] = 1;
 80009a6:	4a09      	ldr	r2, [pc, #36]	; (80009cc <timerRun+0x5c>)
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	2101      	movs	r1, #1
 80009ac:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i = 0; i < 10; i++) {
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	3301      	adds	r3, #1
 80009b4:	607b      	str	r3, [r7, #4]
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	2b09      	cmp	r3, #9
 80009ba:	dddf      	ble.n	800097c <timerRun+0xc>
			}
		}
	}
}
 80009bc:	bf00      	nop
 80009be:	bf00      	nop
 80009c0:	370c      	adds	r7, #12
 80009c2:	46bd      	mov	sp, r7
 80009c4:	bc80      	pop	{r7}
 80009c6:	4770      	bx	lr
 80009c8:	2000016c 	.word	0x2000016c
 80009cc:	20000144 	.word	0x20000144

080009d0 <command_parser_fsm>:
uint8_t cmd_ok_flag = 0;
uint32_t adc_value = 0;
uint8_t adc_buffer[10];
uint8_t start_index = 0;

void command_parser_fsm(){
 80009d0:	b480      	push	{r7}
 80009d2:	af00      	add	r7, sp, #0
	switch (cmd_state) {
 80009d4:	4b34      	ldr	r3, [pc, #208]	; (8000aa8 <command_parser_fsm+0xd8>)
 80009d6:	781b      	ldrb	r3, [r3, #0]
 80009d8:	2b0b      	cmp	r3, #11
 80009da:	d002      	beq.n	80009e2 <command_parser_fsm+0x12>
 80009dc:	2b0c      	cmp	r3, #12
 80009de:	d00b      	beq.n	80009f8 <command_parser_fsm+0x28>
				break;
			}
			break;
		}
		default: {
			break;
 80009e0:	e05e      	b.n	8000aa0 <command_parser_fsm+0xd0>
			if (cmd_flag == 1) {
 80009e2:	4b32      	ldr	r3, [pc, #200]	; (8000aac <command_parser_fsm+0xdc>)
 80009e4:	781b      	ldrb	r3, [r3, #0]
 80009e6:	2b01      	cmp	r3, #1
 80009e8:	d157      	bne.n	8000a9a <command_parser_fsm+0xca>
				cmd_flag = 0;
 80009ea:	4b30      	ldr	r3, [pc, #192]	; (8000aac <command_parser_fsm+0xdc>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	701a      	strb	r2, [r3, #0]
				cmd_state = CMD_FIND;
 80009f0:	4b2d      	ldr	r3, [pc, #180]	; (8000aa8 <command_parser_fsm+0xd8>)
 80009f2:	220c      	movs	r2, #12
 80009f4:	701a      	strb	r2, [r3, #0]
			break;
 80009f6:	e050      	b.n	8000a9a <command_parser_fsm+0xca>
			start_index = current_index_buffer;
 80009f8:	4b2d      	ldr	r3, [pc, #180]	; (8000ab0 <command_parser_fsm+0xe0>)
 80009fa:	781a      	ldrb	r2, [r3, #0]
 80009fc:	4b2d      	ldr	r3, [pc, #180]	; (8000ab4 <command_parser_fsm+0xe4>)
 80009fe:	701a      	strb	r2, [r3, #0]
			if (buffer[start_index] == '!'
 8000a00:	4b2c      	ldr	r3, [pc, #176]	; (8000ab4 <command_parser_fsm+0xe4>)
 8000a02:	781b      	ldrb	r3, [r3, #0]
 8000a04:	461a      	mov	r2, r3
 8000a06:	4b2c      	ldr	r3, [pc, #176]	; (8000ab8 <command_parser_fsm+0xe8>)
 8000a08:	5c9b      	ldrb	r3, [r3, r2]
 8000a0a:	2b21      	cmp	r3, #33	; 0x21
 8000a0c:	d122      	bne.n	8000a54 <command_parser_fsm+0x84>
				&& buffer[start_index + 1] == 'R'
 8000a0e:	4b29      	ldr	r3, [pc, #164]	; (8000ab4 <command_parser_fsm+0xe4>)
 8000a10:	781b      	ldrb	r3, [r3, #0]
 8000a12:	3301      	adds	r3, #1
 8000a14:	4a28      	ldr	r2, [pc, #160]	; (8000ab8 <command_parser_fsm+0xe8>)
 8000a16:	5cd3      	ldrb	r3, [r2, r3]
 8000a18:	2b52      	cmp	r3, #82	; 0x52
 8000a1a:	d11b      	bne.n	8000a54 <command_parser_fsm+0x84>
				&& buffer[start_index + 2] == 'T'
 8000a1c:	4b25      	ldr	r3, [pc, #148]	; (8000ab4 <command_parser_fsm+0xe4>)
 8000a1e:	781b      	ldrb	r3, [r3, #0]
 8000a20:	3302      	adds	r3, #2
 8000a22:	4a25      	ldr	r2, [pc, #148]	; (8000ab8 <command_parser_fsm+0xe8>)
 8000a24:	5cd3      	ldrb	r3, [r2, r3]
 8000a26:	2b54      	cmp	r3, #84	; 0x54
 8000a28:	d114      	bne.n	8000a54 <command_parser_fsm+0x84>
				&& buffer[start_index + 3] == 'S'
 8000a2a:	4b22      	ldr	r3, [pc, #136]	; (8000ab4 <command_parser_fsm+0xe4>)
 8000a2c:	781b      	ldrb	r3, [r3, #0]
 8000a2e:	3303      	adds	r3, #3
 8000a30:	4a21      	ldr	r2, [pc, #132]	; (8000ab8 <command_parser_fsm+0xe8>)
 8000a32:	5cd3      	ldrb	r3, [r2, r3]
 8000a34:	2b53      	cmp	r3, #83	; 0x53
 8000a36:	d10d      	bne.n	8000a54 <command_parser_fsm+0x84>
				&& buffer[start_index + 4] == '#') {
 8000a38:	4b1e      	ldr	r3, [pc, #120]	; (8000ab4 <command_parser_fsm+0xe4>)
 8000a3a:	781b      	ldrb	r3, [r3, #0]
 8000a3c:	3304      	adds	r3, #4
 8000a3e:	4a1e      	ldr	r2, [pc, #120]	; (8000ab8 <command_parser_fsm+0xe8>)
 8000a40:	5cd3      	ldrb	r3, [r2, r3]
 8000a42:	2b23      	cmp	r3, #35	; 0x23
 8000a44:	d106      	bne.n	8000a54 <command_parser_fsm+0x84>
				cmd_rts_flag = 1;
 8000a46:	4b1d      	ldr	r3, [pc, #116]	; (8000abc <command_parser_fsm+0xec>)
 8000a48:	2201      	movs	r2, #1
 8000a4a:	701a      	strb	r2, [r3, #0]
				cmd_state = CMD_INIT;
 8000a4c:	4b16      	ldr	r3, [pc, #88]	; (8000aa8 <command_parser_fsm+0xd8>)
 8000a4e:	220b      	movs	r2, #11
 8000a50:	701a      	strb	r2, [r3, #0]
				break;
 8000a52:	e025      	b.n	8000aa0 <command_parser_fsm+0xd0>
			if (buffer[start_index] == '!'
 8000a54:	4b17      	ldr	r3, [pc, #92]	; (8000ab4 <command_parser_fsm+0xe4>)
 8000a56:	781b      	ldrb	r3, [r3, #0]
 8000a58:	461a      	mov	r2, r3
 8000a5a:	4b17      	ldr	r3, [pc, #92]	; (8000ab8 <command_parser_fsm+0xe8>)
 8000a5c:	5c9b      	ldrb	r3, [r3, r2]
 8000a5e:	2b21      	cmp	r3, #33	; 0x21
 8000a60:	d11d      	bne.n	8000a9e <command_parser_fsm+0xce>
				&& buffer[start_index + 1] == 'O'
 8000a62:	4b14      	ldr	r3, [pc, #80]	; (8000ab4 <command_parser_fsm+0xe4>)
 8000a64:	781b      	ldrb	r3, [r3, #0]
 8000a66:	3301      	adds	r3, #1
 8000a68:	4a13      	ldr	r2, [pc, #76]	; (8000ab8 <command_parser_fsm+0xe8>)
 8000a6a:	5cd3      	ldrb	r3, [r2, r3]
 8000a6c:	2b4f      	cmp	r3, #79	; 0x4f
 8000a6e:	d116      	bne.n	8000a9e <command_parser_fsm+0xce>
				&& buffer[start_index + 2] == 'K'
 8000a70:	4b10      	ldr	r3, [pc, #64]	; (8000ab4 <command_parser_fsm+0xe4>)
 8000a72:	781b      	ldrb	r3, [r3, #0]
 8000a74:	3302      	adds	r3, #2
 8000a76:	4a10      	ldr	r2, [pc, #64]	; (8000ab8 <command_parser_fsm+0xe8>)
 8000a78:	5cd3      	ldrb	r3, [r2, r3]
 8000a7a:	2b4b      	cmp	r3, #75	; 0x4b
 8000a7c:	d10f      	bne.n	8000a9e <command_parser_fsm+0xce>
				&& buffer[start_index + 3] == '#') {
 8000a7e:	4b0d      	ldr	r3, [pc, #52]	; (8000ab4 <command_parser_fsm+0xe4>)
 8000a80:	781b      	ldrb	r3, [r3, #0]
 8000a82:	3303      	adds	r3, #3
 8000a84:	4a0c      	ldr	r2, [pc, #48]	; (8000ab8 <command_parser_fsm+0xe8>)
 8000a86:	5cd3      	ldrb	r3, [r2, r3]
 8000a88:	2b23      	cmp	r3, #35	; 0x23
 8000a8a:	d108      	bne.n	8000a9e <command_parser_fsm+0xce>
				cmd_ok_flag = 1;
 8000a8c:	4b0c      	ldr	r3, [pc, #48]	; (8000ac0 <command_parser_fsm+0xf0>)
 8000a8e:	2201      	movs	r2, #1
 8000a90:	701a      	strb	r2, [r3, #0]
				cmd_state = CMD_INIT;
 8000a92:	4b05      	ldr	r3, [pc, #20]	; (8000aa8 <command_parser_fsm+0xd8>)
 8000a94:	220b      	movs	r2, #11
 8000a96:	701a      	strb	r2, [r3, #0]
				break;
 8000a98:	e002      	b.n	8000aa0 <command_parser_fsm+0xd0>
			break;
 8000a9a:	bf00      	nop
 8000a9c:	e000      	b.n	8000aa0 <command_parser_fsm+0xd0>
			break;
 8000a9e:	bf00      	nop
		}
	}
}
 8000aa0:	bf00      	nop
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	bc80      	pop	{r7}
 8000aa6:	4770      	bx	lr
 8000aa8:	20000008 	.word	0x20000008
 8000aac:	200001b9 	.word	0x200001b9
 8000ab0:	200001b7 	.word	0x200001b7
 8000ab4:	200001ce 	.word	0x200001ce
 8000ab8:	20000198 	.word	0x20000198
 8000abc:	200001bc 	.word	0x200001bc
 8000ac0:	200001bd 	.word	0x200001bd

08000ac4 <uart_communication_fsm>:

void uart_communication_fsm(){
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	af00      	add	r7, sp, #0
	switch (uart_state) {
 8000ac8:	4b40      	ldr	r3, [pc, #256]	; (8000bcc <uart_communication_fsm+0x108>)
 8000aca:	781b      	ldrb	r3, [r3, #0]
 8000acc:	2b03      	cmp	r3, #3
 8000ace:	d875      	bhi.n	8000bbc <uart_communication_fsm+0xf8>
 8000ad0:	a201      	add	r2, pc, #4	; (adr r2, 8000ad8 <uart_communication_fsm+0x14>)
 8000ad2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ad6:	bf00      	nop
 8000ad8:	08000ae9 	.word	0x08000ae9
 8000adc:	08000b09 	.word	0x08000b09
 8000ae0:	08000b45 	.word	0x08000b45
 8000ae4:	08000b97 	.word	0x08000b97
		case IDLE: {
			if (cmd_end_flag == 1) {
 8000ae8:	4b39      	ldr	r3, [pc, #228]	; (8000bd0 <uart_communication_fsm+0x10c>)
 8000aea:	781b      	ldrb	r3, [r3, #0]
 8000aec:	2b01      	cmp	r3, #1
 8000aee:	d105      	bne.n	8000afc <uart_communication_fsm+0x38>
				cmd_end_flag = 0;
 8000af0:	4b37      	ldr	r3, [pc, #220]	; (8000bd0 <uart_communication_fsm+0x10c>)
 8000af2:	2200      	movs	r2, #0
 8000af4:	701a      	strb	r2, [r3, #0]
				uart_state = CMDCHECK;
 8000af6:	4b35      	ldr	r3, [pc, #212]	; (8000bcc <uart_communication_fsm+0x108>)
 8000af8:	2201      	movs	r2, #1
 8000afa:	701a      	strb	r2, [r3, #0]
			}
			setTimer(1, 1000);
 8000afc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000b00:	2001      	movs	r0, #1
 8000b02:	f7ff ff17 	bl	8000934 <setTimer>
			break;
 8000b06:	e05e      	b.n	8000bc6 <uart_communication_fsm+0x102>
		}
		case CMDCHECK: {
			if (cmd_rts_flag == 1) {
 8000b08:	4b32      	ldr	r3, [pc, #200]	; (8000bd4 <uart_communication_fsm+0x110>)
 8000b0a:	781b      	ldrb	r3, [r3, #0]
 8000b0c:	2b01      	cmp	r3, #1
 8000b0e:	d106      	bne.n	8000b1e <uart_communication_fsm+0x5a>
				uart_state = SEND;
 8000b10:	4b2e      	ldr	r3, [pc, #184]	; (8000bcc <uart_communication_fsm+0x108>)
 8000b12:	2202      	movs	r2, #2
 8000b14:	701a      	strb	r2, [r3, #0]
				cmd_rts_flag = 0;
 8000b16:	4b2f      	ldr	r3, [pc, #188]	; (8000bd4 <uart_communication_fsm+0x110>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	701a      	strb	r2, [r3, #0]
				break;
 8000b1c:	e053      	b.n	8000bc6 <uart_communication_fsm+0x102>
			}
			if (cmd_ok_flag == 1){
 8000b1e:	4b2e      	ldr	r3, [pc, #184]	; (8000bd8 <uart_communication_fsm+0x114>)
 8000b20:	781b      	ldrb	r3, [r3, #0]
 8000b22:	2b01      	cmp	r3, #1
 8000b24:	d106      	bne.n	8000b34 <uart_communication_fsm+0x70>
				uart_state = IDLE;
 8000b26:	4b29      	ldr	r3, [pc, #164]	; (8000bcc <uart_communication_fsm+0x108>)
 8000b28:	2200      	movs	r2, #0
 8000b2a:	701a      	strb	r2, [r3, #0]
				cmd_ok_flag = 0;
 8000b2c:	4b2a      	ldr	r3, [pc, #168]	; (8000bd8 <uart_communication_fsm+0x114>)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	701a      	strb	r2, [r3, #0]
				break;
 8000b32:	e048      	b.n	8000bc6 <uart_communication_fsm+0x102>
			}
			if (timer_flag[1] == 1) {
 8000b34:	4b29      	ldr	r3, [pc, #164]	; (8000bdc <uart_communication_fsm+0x118>)
 8000b36:	685b      	ldr	r3, [r3, #4]
 8000b38:	2b01      	cmp	r3, #1
 8000b3a:	d141      	bne.n	8000bc0 <uart_communication_fsm+0xfc>
				uart_state = IDLE;
 8000b3c:	4b23      	ldr	r3, [pc, #140]	; (8000bcc <uart_communication_fsm+0x108>)
 8000b3e:	2200      	movs	r2, #0
 8000b40:	701a      	strb	r2, [r3, #0]
			}
			break;
 8000b42:	e03d      	b.n	8000bc0 <uart_communication_fsm+0xfc>
		}
		case SEND: {
			HAL_ADC_Start(&hadc1);
 8000b44:	4826      	ldr	r0, [pc, #152]	; (8000be0 <uart_communication_fsm+0x11c>)
 8000b46:	f000 f9c7 	bl	8000ed8 <HAL_ADC_Start>
			if (HAL_ADC_PollForConversion(&hadc1, 100) == HAL_OK) {
 8000b4a:	2164      	movs	r1, #100	; 0x64
 8000b4c:	4824      	ldr	r0, [pc, #144]	; (8000be0 <uart_communication_fsm+0x11c>)
 8000b4e:	f000 fa9d 	bl	800108c <HAL_ADC_PollForConversion>
 8000b52:	4603      	mov	r3, r0
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d11a      	bne.n	8000b8e <uart_communication_fsm+0xca>
				adc_value = HAL_ADC_GetValue(&hadc1);
 8000b58:	4821      	ldr	r0, [pc, #132]	; (8000be0 <uart_communication_fsm+0x11c>)
 8000b5a:	f000 fc53 	bl	8001404 <HAL_ADC_GetValue>
 8000b5e:	4603      	mov	r3, r0
 8000b60:	4a20      	ldr	r2, [pc, #128]	; (8000be4 <uart_communication_fsm+0x120>)
 8000b62:	6013      	str	r3, [r2, #0]
				sprintf((char *)adc_buffer, "!ADC=%lu#", adc_value);
 8000b64:	4b1f      	ldr	r3, [pc, #124]	; (8000be4 <uart_communication_fsm+0x120>)
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	461a      	mov	r2, r3
 8000b6a:	491f      	ldr	r1, [pc, #124]	; (8000be8 <uart_communication_fsm+0x124>)
 8000b6c:	481f      	ldr	r0, [pc, #124]	; (8000bec <uart_communication_fsm+0x128>)
 8000b6e:	f003 fa13 	bl	8003f98 <siprintf>
				HAL_UART_Transmit(&huart2, adc_buffer, 10, 10);
 8000b72:	230a      	movs	r3, #10
 8000b74:	220a      	movs	r2, #10
 8000b76:	491d      	ldr	r1, [pc, #116]	; (8000bec <uart_communication_fsm+0x128>)
 8000b78:	481d      	ldr	r0, [pc, #116]	; (8000bf0 <uart_communication_fsm+0x12c>)
 8000b7a:	f002 fbf3 	bl	8003364 <HAL_UART_Transmit>
				setTimer(0, 5000);
 8000b7e:	f241 3188 	movw	r1, #5000	; 0x1388
 8000b82:	2000      	movs	r0, #0
 8000b84:	f7ff fed6 	bl	8000934 <setTimer>
	        	uart_state = WAIT;
 8000b88:	4b10      	ldr	r3, [pc, #64]	; (8000bcc <uart_communication_fsm+0x108>)
 8000b8a:	2203      	movs	r2, #3
 8000b8c:	701a      	strb	r2, [r3, #0]
			}
			HAL_ADC_Stop(&hadc1);
 8000b8e:	4814      	ldr	r0, [pc, #80]	; (8000be0 <uart_communication_fsm+0x11c>)
 8000b90:	f000 fa50 	bl	8001034 <HAL_ADC_Stop>
			break;
 8000b94:	e017      	b.n	8000bc6 <uart_communication_fsm+0x102>
		}
		case WAIT: {
			if(timer_flag[0] == 1) {
 8000b96:	4b11      	ldr	r3, [pc, #68]	; (8000bdc <uart_communication_fsm+0x118>)
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	2b01      	cmp	r3, #1
 8000b9c:	d103      	bne.n	8000ba6 <uart_communication_fsm+0xe2>
				uart_state = IDLE;
 8000b9e:	4b0b      	ldr	r3, [pc, #44]	; (8000bcc <uart_communication_fsm+0x108>)
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	701a      	strb	r2, [r3, #0]
				break;
 8000ba4:	e00f      	b.n	8000bc6 <uart_communication_fsm+0x102>
			}
			if (cmd_ok_flag == 1) {
 8000ba6:	4b0c      	ldr	r3, [pc, #48]	; (8000bd8 <uart_communication_fsm+0x114>)
 8000ba8:	781b      	ldrb	r3, [r3, #0]
 8000baa:	2b01      	cmp	r3, #1
 8000bac:	d10a      	bne.n	8000bc4 <uart_communication_fsm+0x100>
				cmd_ok_flag = 0;
 8000bae:	4b0a      	ldr	r3, [pc, #40]	; (8000bd8 <uart_communication_fsm+0x114>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	701a      	strb	r2, [r3, #0]
				uart_state = IDLE;
 8000bb4:	4b05      	ldr	r3, [pc, #20]	; (8000bcc <uart_communication_fsm+0x108>)
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	701a      	strb	r2, [r3, #0]
				break;
 8000bba:	e004      	b.n	8000bc6 <uart_communication_fsm+0x102>
			}
			break;
		}
		default: {
			break;
 8000bbc:	bf00      	nop
 8000bbe:	e002      	b.n	8000bc6 <uart_communication_fsm+0x102>
			break;
 8000bc0:	bf00      	nop
 8000bc2:	e000      	b.n	8000bc6 <uart_communication_fsm+0x102>
			break;
 8000bc4:	bf00      	nop
		}
	}
}
 8000bc6:	bf00      	nop
 8000bc8:	bd80      	pop	{r7, pc}
 8000bca:	bf00      	nop
 8000bcc:	200001bb 	.word	0x200001bb
 8000bd0:	200001ba 	.word	0x200001ba
 8000bd4:	200001bc 	.word	0x200001bc
 8000bd8:	200001bd 	.word	0x200001bd
 8000bdc:	20000144 	.word	0x20000144
 8000be0:	20000080 	.word	0x20000080
 8000be4:	200001c0 	.word	0x200001c0
 8000be8:	08004914 	.word	0x08004914
 8000bec:	200001c4 	.word	0x200001c4
 8000bf0:	200000f8 	.word	0x200000f8

08000bf4 <Reset_Handler>:
 8000bf4:	f7ff fe98 	bl	8000928 <SystemInit>
 8000bf8:	480b      	ldr	r0, [pc, #44]	; (8000c28 <LoopFillZerobss+0xe>)
 8000bfa:	490c      	ldr	r1, [pc, #48]	; (8000c2c <LoopFillZerobss+0x12>)
 8000bfc:	4a0c      	ldr	r2, [pc, #48]	; (8000c30 <LoopFillZerobss+0x16>)
 8000bfe:	2300      	movs	r3, #0
 8000c00:	e002      	b.n	8000c08 <LoopCopyDataInit>

08000c02 <CopyDataInit>:
 8000c02:	58d4      	ldr	r4, [r2, r3]
 8000c04:	50c4      	str	r4, [r0, r3]
 8000c06:	3304      	adds	r3, #4

08000c08 <LoopCopyDataInit>:
 8000c08:	18c4      	adds	r4, r0, r3
 8000c0a:	428c      	cmp	r4, r1
 8000c0c:	d3f9      	bcc.n	8000c02 <CopyDataInit>
 8000c0e:	4a09      	ldr	r2, [pc, #36]	; (8000c34 <LoopFillZerobss+0x1a>)
 8000c10:	4c09      	ldr	r4, [pc, #36]	; (8000c38 <LoopFillZerobss+0x1e>)
 8000c12:	2300      	movs	r3, #0
 8000c14:	e001      	b.n	8000c1a <LoopFillZerobss>

08000c16 <FillZerobss>:
 8000c16:	6013      	str	r3, [r2, #0]
 8000c18:	3204      	adds	r2, #4

08000c1a <LoopFillZerobss>:
 8000c1a:	42a2      	cmp	r2, r4
 8000c1c:	d3fb      	bcc.n	8000c16 <FillZerobss>
 8000c1e:	f003 f9e9 	bl	8003ff4 <__libc_init_array>
 8000c22:	f7ff fb57 	bl	80002d4 <main>
 8000c26:	4770      	bx	lr
 8000c28:	20000000 	.word	0x20000000
 8000c2c:	20000064 	.word	0x20000064
 8000c30:	0800499c 	.word	0x0800499c
 8000c34:	20000064 	.word	0x20000064
 8000c38:	2000031c 	.word	0x2000031c

08000c3c <ADC1_2_IRQHandler>:
 8000c3c:	e7fe      	b.n	8000c3c <ADC1_2_IRQHandler>
	...

08000c40 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c44:	4b08      	ldr	r3, [pc, #32]	; (8000c68 <HAL_Init+0x28>)
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	4a07      	ldr	r2, [pc, #28]	; (8000c68 <HAL_Init+0x28>)
 8000c4a:	f043 0310 	orr.w	r3, r3, #16
 8000c4e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c50:	2003      	movs	r0, #3
 8000c52:	f000 fe43 	bl	80018dc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c56:	200f      	movs	r0, #15
 8000c58:	f000 f808 	bl	8000c6c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c5c:	f7ff fd0e 	bl	800067c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c60:	2300      	movs	r3, #0
}
 8000c62:	4618      	mov	r0, r3
 8000c64:	bd80      	pop	{r7, pc}
 8000c66:	bf00      	nop
 8000c68:	40022000 	.word	0x40022000

08000c6c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b082      	sub	sp, #8
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c74:	4b12      	ldr	r3, [pc, #72]	; (8000cc0 <HAL_InitTick+0x54>)
 8000c76:	681a      	ldr	r2, [r3, #0]
 8000c78:	4b12      	ldr	r3, [pc, #72]	; (8000cc4 <HAL_InitTick+0x58>)
 8000c7a:	781b      	ldrb	r3, [r3, #0]
 8000c7c:	4619      	mov	r1, r3
 8000c7e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c82:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c86:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	f000 fe5b 	bl	8001946 <HAL_SYSTICK_Config>
 8000c90:	4603      	mov	r3, r0
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d001      	beq.n	8000c9a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c96:	2301      	movs	r3, #1
 8000c98:	e00e      	b.n	8000cb8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	2b0f      	cmp	r3, #15
 8000c9e:	d80a      	bhi.n	8000cb6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	6879      	ldr	r1, [r7, #4]
 8000ca4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ca8:	f000 fe23 	bl	80018f2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000cac:	4a06      	ldr	r2, [pc, #24]	; (8000cc8 <HAL_InitTick+0x5c>)
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	e000      	b.n	8000cb8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000cb6:	2301      	movs	r3, #1
}
 8000cb8:	4618      	mov	r0, r3
 8000cba:	3708      	adds	r7, #8
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	bd80      	pop	{r7, pc}
 8000cc0:	20000000 	.word	0x20000000
 8000cc4:	20000010 	.word	0x20000010
 8000cc8:	2000000c 	.word	0x2000000c

08000ccc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000cd0:	4b05      	ldr	r3, [pc, #20]	; (8000ce8 <HAL_IncTick+0x1c>)
 8000cd2:	781b      	ldrb	r3, [r3, #0]
 8000cd4:	461a      	mov	r2, r3
 8000cd6:	4b05      	ldr	r3, [pc, #20]	; (8000cec <HAL_IncTick+0x20>)
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	4413      	add	r3, r2
 8000cdc:	4a03      	ldr	r2, [pc, #12]	; (8000cec <HAL_IncTick+0x20>)
 8000cde:	6013      	str	r3, [r2, #0]
}
 8000ce0:	bf00      	nop
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	bc80      	pop	{r7}
 8000ce6:	4770      	bx	lr
 8000ce8:	20000010 	.word	0x20000010
 8000cec:	200001d0 	.word	0x200001d0

08000cf0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	af00      	add	r7, sp, #0
  return uwTick;
 8000cf4:	4b02      	ldr	r3, [pc, #8]	; (8000d00 <HAL_GetTick+0x10>)
 8000cf6:	681b      	ldr	r3, [r3, #0]
}
 8000cf8:	4618      	mov	r0, r3
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	bc80      	pop	{r7}
 8000cfe:	4770      	bx	lr
 8000d00:	200001d0 	.word	0x200001d0

08000d04 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b086      	sub	sp, #24
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000d10:	2300      	movs	r3, #0
 8000d12:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000d14:	2300      	movs	r3, #0
 8000d16:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d101      	bne.n	8000d26 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8000d22:	2301      	movs	r3, #1
 8000d24:	e0ce      	b.n	8000ec4 <HAL_ADC_Init+0x1c0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	689b      	ldr	r3, [r3, #8]
 8000d2a:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d109      	bne.n	8000d48 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	2200      	movs	r2, #0
 8000d38:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000d42:	6878      	ldr	r0, [r7, #4]
 8000d44:	f7ff fccc 	bl	80006e0 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000d48:	6878      	ldr	r0, [r7, #4]
 8000d4a:	f000 fcb9 	bl	80016c0 <ADC_ConversionStop_Disable>
 8000d4e:	4603      	mov	r3, r0
 8000d50:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d56:	f003 0310 	and.w	r3, r3, #16
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	f040 80a9 	bne.w	8000eb2 <HAL_ADC_Init+0x1ae>
 8000d60:	7dfb      	ldrb	r3, [r7, #23]
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	f040 80a5 	bne.w	8000eb2 <HAL_ADC_Init+0x1ae>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d6c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000d70:	f023 0302 	bic.w	r3, r3, #2
 8000d74:	f043 0202 	orr.w	r2, r3, #2
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	4951      	ldr	r1, [pc, #324]	; (8000ecc <HAL_ADC_Init+0x1c8>)
 8000d86:	428b      	cmp	r3, r1
 8000d88:	d10a      	bne.n	8000da0 <HAL_ADC_Init+0x9c>
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	69db      	ldr	r3, [r3, #28]
 8000d8e:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8000d92:	d002      	beq.n	8000d9a <HAL_ADC_Init+0x96>
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	69db      	ldr	r3, [r3, #28]
 8000d98:	e004      	b.n	8000da4 <HAL_ADC_Init+0xa0>
 8000d9a:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8000d9e:	e001      	b.n	8000da4 <HAL_ADC_Init+0xa0>
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000da4:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	7b1b      	ldrb	r3, [r3, #12]
 8000daa:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000dac:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000dae:	68ba      	ldr	r2, [r7, #8]
 8000db0:	4313      	orrs	r3, r2
 8000db2:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	689b      	ldr	r3, [r3, #8]
 8000db8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000dbc:	d003      	beq.n	8000dc6 <HAL_ADC_Init+0xc2>
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	689b      	ldr	r3, [r3, #8]
 8000dc2:	2b01      	cmp	r3, #1
 8000dc4:	d102      	bne.n	8000dcc <HAL_ADC_Init+0xc8>
 8000dc6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000dca:	e000      	b.n	8000dce <HAL_ADC_Init+0xca>
 8000dcc:	2300      	movs	r3, #0
 8000dce:	693a      	ldr	r2, [r7, #16]
 8000dd0:	4313      	orrs	r3, r2
 8000dd2:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	7d1b      	ldrb	r3, [r3, #20]
 8000dd8:	2b01      	cmp	r3, #1
 8000dda:	d119      	bne.n	8000e10 <HAL_ADC_Init+0x10c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	7b1b      	ldrb	r3, [r3, #12]
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d109      	bne.n	8000df8 <HAL_ADC_Init+0xf4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	699b      	ldr	r3, [r3, #24]
 8000de8:	3b01      	subs	r3, #1
 8000dea:	035a      	lsls	r2, r3, #13
 8000dec:	693b      	ldr	r3, [r7, #16]
 8000dee:	4313      	orrs	r3, r2
 8000df0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000df4:	613b      	str	r3, [r7, #16]
 8000df6:	e00b      	b.n	8000e10 <HAL_ADC_Init+0x10c>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000dfc:	f043 0220 	orr.w	r2, r3, #32
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e08:	f043 0201 	orr.w	r2, r3, #1
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	685b      	ldr	r3, [r3, #4]
 8000e16:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	693a      	ldr	r2, [r7, #16]
 8000e20:	430a      	orrs	r2, r1
 8000e22:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	689a      	ldr	r2, [r3, #8]
 8000e2a:	4b29      	ldr	r3, [pc, #164]	; (8000ed0 <HAL_ADC_Init+0x1cc>)
 8000e2c:	4013      	ands	r3, r2
 8000e2e:	687a      	ldr	r2, [r7, #4]
 8000e30:	6812      	ldr	r2, [r2, #0]
 8000e32:	68b9      	ldr	r1, [r7, #8]
 8000e34:	430b      	orrs	r3, r1
 8000e36:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	689b      	ldr	r3, [r3, #8]
 8000e3c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000e40:	d003      	beq.n	8000e4a <HAL_ADC_Init+0x146>
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	689b      	ldr	r3, [r3, #8]
 8000e46:	2b01      	cmp	r3, #1
 8000e48:	d104      	bne.n	8000e54 <HAL_ADC_Init+0x150>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	691b      	ldr	r3, [r3, #16]
 8000e4e:	3b01      	subs	r3, #1
 8000e50:	051b      	lsls	r3, r3, #20
 8000e52:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e5a:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	68fa      	ldr	r2, [r7, #12]
 8000e64:	430a      	orrs	r2, r1
 8000e66:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	689a      	ldr	r2, [r3, #8]
 8000e6e:	4b19      	ldr	r3, [pc, #100]	; (8000ed4 <HAL_ADC_Init+0x1d0>)
 8000e70:	4013      	ands	r3, r2
 8000e72:	68ba      	ldr	r2, [r7, #8]
 8000e74:	429a      	cmp	r2, r3
 8000e76:	d10b      	bne.n	8000e90 <HAL_ADC_Init+0x18c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e82:	f023 0303 	bic.w	r3, r3, #3
 8000e86:	f043 0201 	orr.w	r2, r3, #1
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000e8e:	e018      	b.n	8000ec2 <HAL_ADC_Init+0x1be>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e94:	f023 0312 	bic.w	r3, r3, #18
 8000e98:	f043 0210 	orr.w	r2, r3, #16
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ea4:	f043 0201 	orr.w	r2, r3, #1
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8000eac:	2301      	movs	r3, #1
 8000eae:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000eb0:	e007      	b.n	8000ec2 <HAL_ADC_Init+0x1be>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000eb6:	f043 0210 	orr.w	r2, r3, #16
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8000ebe:	2301      	movs	r3, #1
 8000ec0:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000ec2:	7dfb      	ldrb	r3, [r7, #23]
}
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	3718      	adds	r7, #24
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	bd80      	pop	{r7, pc}
 8000ecc:	40013c00 	.word	0x40013c00
 8000ed0:	ffe1f7fd 	.word	0xffe1f7fd
 8000ed4:	ff1f0efe 	.word	0xff1f0efe

08000ed8 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b084      	sub	sp, #16
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000eea:	2b01      	cmp	r3, #1
 8000eec:	d101      	bne.n	8000ef2 <HAL_ADC_Start+0x1a>
 8000eee:	2302      	movs	r3, #2
 8000ef0:	e098      	b.n	8001024 <HAL_ADC_Start+0x14c>
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	2201      	movs	r2, #1
 8000ef6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8000efa:	6878      	ldr	r0, [r7, #4]
 8000efc:	f000 fb86 	bl	800160c <ADC_Enable>
 8000f00:	4603      	mov	r3, r0
 8000f02:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8000f04:	7bfb      	ldrb	r3, [r7, #15]
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	f040 8087 	bne.w	800101a <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f10:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000f14:	f023 0301 	bic.w	r3, r3, #1
 8000f18:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	4a41      	ldr	r2, [pc, #260]	; (800102c <HAL_ADC_Start+0x154>)
 8000f26:	4293      	cmp	r3, r2
 8000f28:	d105      	bne.n	8000f36 <HAL_ADC_Start+0x5e>
 8000f2a:	4b41      	ldr	r3, [pc, #260]	; (8001030 <HAL_ADC_Start+0x158>)
 8000f2c:	685b      	ldr	r3, [r3, #4]
 8000f2e:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d115      	bne.n	8000f62 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f3a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	685b      	ldr	r3, [r3, #4]
 8000f48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d026      	beq.n	8000f9e <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f54:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000f58:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000f60:	e01d      	b.n	8000f9e <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f66:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	4a2f      	ldr	r2, [pc, #188]	; (8001030 <HAL_ADC_Start+0x158>)
 8000f74:	4293      	cmp	r3, r2
 8000f76:	d004      	beq.n	8000f82 <HAL_ADC_Start+0xaa>
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	4a2b      	ldr	r2, [pc, #172]	; (800102c <HAL_ADC_Start+0x154>)
 8000f7e:	4293      	cmp	r3, r2
 8000f80:	d10d      	bne.n	8000f9e <HAL_ADC_Start+0xc6>
 8000f82:	4b2b      	ldr	r3, [pc, #172]	; (8001030 <HAL_ADC_Start+0x158>)
 8000f84:	685b      	ldr	r3, [r3, #4]
 8000f86:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d007      	beq.n	8000f9e <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f92:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000f96:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fa2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d006      	beq.n	8000fb8 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fae:	f023 0206 	bic.w	r2, r3, #6
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	62da      	str	r2, [r3, #44]	; 0x2c
 8000fb6:	e002      	b.n	8000fbe <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	2200      	movs	r2, #0
 8000fbc:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	f06f 0202 	mvn.w	r2, #2
 8000fce:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	689b      	ldr	r3, [r3, #8]
 8000fd6:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8000fda:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8000fde:	d113      	bne.n	8001008 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000fe4:	4a11      	ldr	r2, [pc, #68]	; (800102c <HAL_ADC_Start+0x154>)
 8000fe6:	4293      	cmp	r3, r2
 8000fe8:	d105      	bne.n	8000ff6 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8000fea:	4b11      	ldr	r3, [pc, #68]	; (8001030 <HAL_ADC_Start+0x158>)
 8000fec:	685b      	ldr	r3, [r3, #4]
 8000fee:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d108      	bne.n	8001008 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	689a      	ldr	r2, [r3, #8]
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8001004:	609a      	str	r2, [r3, #8]
 8001006:	e00c      	b.n	8001022 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	689a      	ldr	r2, [r3, #8]
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8001016:	609a      	str	r2, [r3, #8]
 8001018:	e003      	b.n	8001022 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	2200      	movs	r2, #0
 800101e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8001022:	7bfb      	ldrb	r3, [r7, #15]
}
 8001024:	4618      	mov	r0, r3
 8001026:	3710      	adds	r7, #16
 8001028:	46bd      	mov	sp, r7
 800102a:	bd80      	pop	{r7, pc}
 800102c:	40012800 	.word	0x40012800
 8001030:	40012400 	.word	0x40012400

08001034 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b084      	sub	sp, #16
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800103c:	2300      	movs	r3, #0
 800103e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001046:	2b01      	cmp	r3, #1
 8001048:	d101      	bne.n	800104e <HAL_ADC_Stop+0x1a>
 800104a:	2302      	movs	r3, #2
 800104c:	e01a      	b.n	8001084 <HAL_ADC_Stop+0x50>
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	2201      	movs	r2, #1
 8001052:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001056:	6878      	ldr	r0, [r7, #4]
 8001058:	f000 fb32 	bl	80016c0 <ADC_ConversionStop_Disable>
 800105c:	4603      	mov	r3, r0
 800105e:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8001060:	7bfb      	ldrb	r3, [r7, #15]
 8001062:	2b00      	cmp	r3, #0
 8001064:	d109      	bne.n	800107a <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800106a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800106e:	f023 0301 	bic.w	r3, r3, #1
 8001072:	f043 0201 	orr.w	r2, r3, #1
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	2200      	movs	r2, #0
 800107e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001082:	7bfb      	ldrb	r3, [r7, #15]
}
 8001084:	4618      	mov	r0, r3
 8001086:	3710      	adds	r7, #16
 8001088:	46bd      	mov	sp, r7
 800108a:	bd80      	pop	{r7, pc}

0800108c <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 800108c:	b590      	push	{r4, r7, lr}
 800108e:	b087      	sub	sp, #28
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
 8001094:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001096:	2300      	movs	r3, #0
 8001098:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 800109a:	2300      	movs	r3, #0
 800109c:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 800109e:	2300      	movs	r3, #0
 80010a0:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 80010a2:	f7ff fe25 	bl	8000cf0 <HAL_GetTick>
 80010a6:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	689b      	ldr	r3, [r3, #8]
 80010ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d00b      	beq.n	80010ce <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010ba:	f043 0220 	orr.w	r2, r3, #32
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	2200      	movs	r2, #0
 80010c6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 80010ca:	2301      	movs	r3, #1
 80010cc:	e0d3      	b.n	8001276 <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	685b      	ldr	r3, [r3, #4]
 80010d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d131      	bne.n	8001140 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010e2:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d12a      	bne.n	8001140 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80010ea:	e021      	b.n	8001130 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 80010ec:	683b      	ldr	r3, [r7, #0]
 80010ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010f2:	d01d      	beq.n	8001130 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80010f4:	683b      	ldr	r3, [r7, #0]
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d007      	beq.n	800110a <HAL_ADC_PollForConversion+0x7e>
 80010fa:	f7ff fdf9 	bl	8000cf0 <HAL_GetTick>
 80010fe:	4602      	mov	r2, r0
 8001100:	697b      	ldr	r3, [r7, #20]
 8001102:	1ad3      	subs	r3, r2, r3
 8001104:	683a      	ldr	r2, [r7, #0]
 8001106:	429a      	cmp	r2, r3
 8001108:	d212      	bcs.n	8001130 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	f003 0302 	and.w	r3, r3, #2
 8001114:	2b00      	cmp	r3, #0
 8001116:	d10b      	bne.n	8001130 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800111c:	f043 0204 	orr.w	r2, r3, #4
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	629a      	str	r2, [r3, #40]	; 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	2200      	movs	r2, #0
 8001128:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
            
            return HAL_TIMEOUT;
 800112c:	2303      	movs	r3, #3
 800112e:	e0a2      	b.n	8001276 <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	f003 0302 	and.w	r3, r3, #2
 800113a:	2b00      	cmp	r3, #0
 800113c:	d0d6      	beq.n	80010ec <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800113e:	e070      	b.n	8001222 <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8001140:	4b4f      	ldr	r3, [pc, #316]	; (8001280 <HAL_ADC_PollForConversion+0x1f4>)
 8001142:	681c      	ldr	r4, [r3, #0]
 8001144:	2002      	movs	r0, #2
 8001146:	f001 fbbf 	bl	80028c8 <HAL_RCCEx_GetPeriphCLKFreq>
 800114a:	4603      	mov	r3, r0
 800114c:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	6919      	ldr	r1, [r3, #16]
 8001156:	4b4b      	ldr	r3, [pc, #300]	; (8001284 <HAL_ADC_PollForConversion+0x1f8>)
 8001158:	400b      	ands	r3, r1
 800115a:	2b00      	cmp	r3, #0
 800115c:	d118      	bne.n	8001190 <HAL_ADC_PollForConversion+0x104>
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	68d9      	ldr	r1, [r3, #12]
 8001164:	4b48      	ldr	r3, [pc, #288]	; (8001288 <HAL_ADC_PollForConversion+0x1fc>)
 8001166:	400b      	ands	r3, r1
 8001168:	2b00      	cmp	r3, #0
 800116a:	d111      	bne.n	8001190 <HAL_ADC_PollForConversion+0x104>
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	6919      	ldr	r1, [r3, #16]
 8001172:	4b46      	ldr	r3, [pc, #280]	; (800128c <HAL_ADC_PollForConversion+0x200>)
 8001174:	400b      	ands	r3, r1
 8001176:	2b00      	cmp	r3, #0
 8001178:	d108      	bne.n	800118c <HAL_ADC_PollForConversion+0x100>
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	68d9      	ldr	r1, [r3, #12]
 8001180:	4b43      	ldr	r3, [pc, #268]	; (8001290 <HAL_ADC_PollForConversion+0x204>)
 8001182:	400b      	ands	r3, r1
 8001184:	2b00      	cmp	r3, #0
 8001186:	d101      	bne.n	800118c <HAL_ADC_PollForConversion+0x100>
 8001188:	2314      	movs	r3, #20
 800118a:	e020      	b.n	80011ce <HAL_ADC_PollForConversion+0x142>
 800118c:	2329      	movs	r3, #41	; 0x29
 800118e:	e01e      	b.n	80011ce <HAL_ADC_PollForConversion+0x142>
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	6919      	ldr	r1, [r3, #16]
 8001196:	4b3d      	ldr	r3, [pc, #244]	; (800128c <HAL_ADC_PollForConversion+0x200>)
 8001198:	400b      	ands	r3, r1
 800119a:	2b00      	cmp	r3, #0
 800119c:	d106      	bne.n	80011ac <HAL_ADC_PollForConversion+0x120>
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	68d9      	ldr	r1, [r3, #12]
 80011a4:	4b3a      	ldr	r3, [pc, #232]	; (8001290 <HAL_ADC_PollForConversion+0x204>)
 80011a6:	400b      	ands	r3, r1
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d00d      	beq.n	80011c8 <HAL_ADC_PollForConversion+0x13c>
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	6919      	ldr	r1, [r3, #16]
 80011b2:	4b38      	ldr	r3, [pc, #224]	; (8001294 <HAL_ADC_PollForConversion+0x208>)
 80011b4:	400b      	ands	r3, r1
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d108      	bne.n	80011cc <HAL_ADC_PollForConversion+0x140>
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	68d9      	ldr	r1, [r3, #12]
 80011c0:	4b34      	ldr	r3, [pc, #208]	; (8001294 <HAL_ADC_PollForConversion+0x208>)
 80011c2:	400b      	ands	r3, r1
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d101      	bne.n	80011cc <HAL_ADC_PollForConversion+0x140>
 80011c8:	2354      	movs	r3, #84	; 0x54
 80011ca:	e000      	b.n	80011ce <HAL_ADC_PollForConversion+0x142>
 80011cc:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 80011ce:	fb02 f303 	mul.w	r3, r2, r3
 80011d2:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80011d4:	e021      	b.n	800121a <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 80011d6:	683b      	ldr	r3, [r7, #0]
 80011d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011dc:	d01a      	beq.n	8001214 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80011de:	683b      	ldr	r3, [r7, #0]
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d007      	beq.n	80011f4 <HAL_ADC_PollForConversion+0x168>
 80011e4:	f7ff fd84 	bl	8000cf0 <HAL_GetTick>
 80011e8:	4602      	mov	r2, r0
 80011ea:	697b      	ldr	r3, [r7, #20]
 80011ec:	1ad3      	subs	r3, r2, r3
 80011ee:	683a      	ldr	r2, [r7, #0]
 80011f0:	429a      	cmp	r2, r3
 80011f2:	d20f      	bcs.n	8001214 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	693a      	ldr	r2, [r7, #16]
 80011f8:	429a      	cmp	r2, r3
 80011fa:	d90b      	bls.n	8001214 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001200:	f043 0204 	orr.w	r2, r3, #4
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	629a      	str	r2, [r3, #40]	; 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	2200      	movs	r2, #0
 800120c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

            return HAL_TIMEOUT;
 8001210:	2303      	movs	r3, #3
 8001212:	e030      	b.n	8001276 <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	3301      	adds	r3, #1
 8001218:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 800121a:	68fb      	ldr	r3, [r7, #12]
 800121c:	693a      	ldr	r2, [r7, #16]
 800121e:	429a      	cmp	r2, r3
 8001220:	d8d9      	bhi.n	80011d6 <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	f06f 0212 	mvn.w	r2, #18
 800122a:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001230:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	689b      	ldr	r3, [r3, #8]
 800123e:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001242:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001246:	d115      	bne.n	8001274 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800124c:	2b00      	cmp	r3, #0
 800124e:	d111      	bne.n	8001274 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001254:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001260:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001264:	2b00      	cmp	r3, #0
 8001266:	d105      	bne.n	8001274 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800126c:	f043 0201 	orr.w	r2, r3, #1
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001274:	2300      	movs	r3, #0
}
 8001276:	4618      	mov	r0, r3
 8001278:	371c      	adds	r7, #28
 800127a:	46bd      	mov	sp, r7
 800127c:	bd90      	pop	{r4, r7, pc}
 800127e:	bf00      	nop
 8001280:	20000000 	.word	0x20000000
 8001284:	24924924 	.word	0x24924924
 8001288:	00924924 	.word	0x00924924
 800128c:	12492492 	.word	0x12492492
 8001290:	00492492 	.word	0x00492492
 8001294:	00249249 	.word	0x00249249

08001298 <HAL_ADC_Start_IT>:
  *         Each of these interruptions has its dedicated callback function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b084      	sub	sp, #16
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80012a0:	2300      	movs	r3, #0
 80012a2:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80012aa:	2b01      	cmp	r3, #1
 80012ac:	d101      	bne.n	80012b2 <HAL_ADC_Start_IT+0x1a>
 80012ae:	2302      	movs	r3, #2
 80012b0:	e0a0      	b.n	80013f4 <HAL_ADC_Start_IT+0x15c>
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	2201      	movs	r2, #1
 80012b6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 80012ba:	6878      	ldr	r0, [r7, #4]
 80012bc:	f000 f9a6 	bl	800160c <ADC_Enable>
 80012c0:	4603      	mov	r3, r0
 80012c2:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 80012c4:	7bfb      	ldrb	r3, [r7, #15]
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	f040 808f 	bne.w	80013ea <HAL_ADC_Start_IT+0x152>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012d0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80012d4:	f023 0301 	bic.w	r3, r3, #1
 80012d8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	4a45      	ldr	r2, [pc, #276]	; (80013fc <HAL_ADC_Start_IT+0x164>)
 80012e6:	4293      	cmp	r3, r2
 80012e8:	d105      	bne.n	80012f6 <HAL_ADC_Start_IT+0x5e>
 80012ea:	4b45      	ldr	r3, [pc, #276]	; (8001400 <HAL_ADC_Start_IT+0x168>)
 80012ec:	685b      	ldr	r3, [r3, #4]
 80012ee:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d115      	bne.n	8001322 <HAL_ADC_Start_IT+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012fa:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	685b      	ldr	r3, [r3, #4]
 8001308:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800130c:	2b00      	cmp	r3, #0
 800130e:	d026      	beq.n	800135e <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001314:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001318:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001320:	e01d      	b.n	800135e <HAL_ADC_Start_IT+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001326:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	4a33      	ldr	r2, [pc, #204]	; (8001400 <HAL_ADC_Start_IT+0x168>)
 8001334:	4293      	cmp	r3, r2
 8001336:	d004      	beq.n	8001342 <HAL_ADC_Start_IT+0xaa>
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	4a2f      	ldr	r2, [pc, #188]	; (80013fc <HAL_ADC_Start_IT+0x164>)
 800133e:	4293      	cmp	r3, r2
 8001340:	d10d      	bne.n	800135e <HAL_ADC_Start_IT+0xc6>
 8001342:	4b2f      	ldr	r3, [pc, #188]	; (8001400 <HAL_ADC_Start_IT+0x168>)
 8001344:	685b      	ldr	r3, [r3, #4]
 8001346:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800134a:	2b00      	cmp	r3, #0
 800134c:	d007      	beq.n	800135e <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001352:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001356:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001362:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001366:	2b00      	cmp	r3, #0
 8001368:	d006      	beq.n	8001378 <HAL_ADC_Start_IT+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800136e:	f023 0206 	bic.w	r2, r3, #6
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	62da      	str	r2, [r3, #44]	; 0x2c
 8001376:	e002      	b.n	800137e <HAL_ADC_Start_IT+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	2200      	movs	r2, #0
 800137c:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	2200      	movs	r2, #0
 8001382:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	f06f 0202 	mvn.w	r2, #2
 800138e:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	685a      	ldr	r2, [r3, #4]
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	f042 0220 	orr.w	r2, r2, #32
 800139e:	605a      	str	r2, [r3, #4]
    /* If external trigger has been selected, conversion will start at next   */
    /* trigger event.                                                         */
    /* Case of multimode enabled:                                             */ 
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	689b      	ldr	r3, [r3, #8]
 80013a6:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80013aa:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80013ae:	d113      	bne.n	80013d8 <HAL_ADC_Start_IT+0x140>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80013b4:	4a11      	ldr	r2, [pc, #68]	; (80013fc <HAL_ADC_Start_IT+0x164>)
 80013b6:	4293      	cmp	r3, r2
 80013b8:	d105      	bne.n	80013c6 <HAL_ADC_Start_IT+0x12e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80013ba:	4b11      	ldr	r3, [pc, #68]	; (8001400 <HAL_ADC_Start_IT+0x168>)
 80013bc:	685b      	ldr	r3, [r3, #4]
 80013be:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d108      	bne.n	80013d8 <HAL_ADC_Start_IT+0x140>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	689a      	ldr	r2, [r3, #8]
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 80013d4:	609a      	str	r2, [r3, #8]
 80013d6:	e00c      	b.n	80013f2 <HAL_ADC_Start_IT+0x15a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	689a      	ldr	r2, [r3, #8]
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80013e6:	609a      	str	r2, [r3, #8]
 80013e8:	e003      	b.n	80013f2 <HAL_ADC_Start_IT+0x15a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	2200      	movs	r2, #0
 80013ee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
  
  /* Return function status */
  return tmp_hal_status;
 80013f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80013f4:	4618      	mov	r0, r3
 80013f6:	3710      	adds	r7, #16
 80013f8:	46bd      	mov	sp, r7
 80013fa:	bd80      	pop	{r7, pc}
 80013fc:	40012800 	.word	0x40012800
 8001400:	40012400 	.word	0x40012400

08001404 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8001404:	b480      	push	{r7}
 8001406:	b083      	sub	sp, #12
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001412:	4618      	mov	r0, r3
 8001414:	370c      	adds	r7, #12
 8001416:	46bd      	mov	sp, r7
 8001418:	bc80      	pop	{r7}
 800141a:	4770      	bx	lr

0800141c <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 800141c:	b480      	push	{r7}
 800141e:	b085      	sub	sp, #20
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
 8001424:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001426:	2300      	movs	r3, #0
 8001428:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800142a:	2300      	movs	r3, #0
 800142c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001434:	2b01      	cmp	r3, #1
 8001436:	d101      	bne.n	800143c <HAL_ADC_ConfigChannel+0x20>
 8001438:	2302      	movs	r3, #2
 800143a:	e0dc      	b.n	80015f6 <HAL_ADC_ConfigChannel+0x1da>
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	2201      	movs	r2, #1
 8001440:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001444:	683b      	ldr	r3, [r7, #0]
 8001446:	685b      	ldr	r3, [r3, #4]
 8001448:	2b06      	cmp	r3, #6
 800144a:	d81c      	bhi.n	8001486 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001452:	683b      	ldr	r3, [r7, #0]
 8001454:	685a      	ldr	r2, [r3, #4]
 8001456:	4613      	mov	r3, r2
 8001458:	009b      	lsls	r3, r3, #2
 800145a:	4413      	add	r3, r2
 800145c:	3b05      	subs	r3, #5
 800145e:	221f      	movs	r2, #31
 8001460:	fa02 f303 	lsl.w	r3, r2, r3
 8001464:	43db      	mvns	r3, r3
 8001466:	4019      	ands	r1, r3
 8001468:	683b      	ldr	r3, [r7, #0]
 800146a:	6818      	ldr	r0, [r3, #0]
 800146c:	683b      	ldr	r3, [r7, #0]
 800146e:	685a      	ldr	r2, [r3, #4]
 8001470:	4613      	mov	r3, r2
 8001472:	009b      	lsls	r3, r3, #2
 8001474:	4413      	add	r3, r2
 8001476:	3b05      	subs	r3, #5
 8001478:	fa00 f203 	lsl.w	r2, r0, r3
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	430a      	orrs	r2, r1
 8001482:	635a      	str	r2, [r3, #52]	; 0x34
 8001484:	e03c      	b.n	8001500 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001486:	683b      	ldr	r3, [r7, #0]
 8001488:	685b      	ldr	r3, [r3, #4]
 800148a:	2b0c      	cmp	r3, #12
 800148c:	d81c      	bhi.n	80014c8 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001494:	683b      	ldr	r3, [r7, #0]
 8001496:	685a      	ldr	r2, [r3, #4]
 8001498:	4613      	mov	r3, r2
 800149a:	009b      	lsls	r3, r3, #2
 800149c:	4413      	add	r3, r2
 800149e:	3b23      	subs	r3, #35	; 0x23
 80014a0:	221f      	movs	r2, #31
 80014a2:	fa02 f303 	lsl.w	r3, r2, r3
 80014a6:	43db      	mvns	r3, r3
 80014a8:	4019      	ands	r1, r3
 80014aa:	683b      	ldr	r3, [r7, #0]
 80014ac:	6818      	ldr	r0, [r3, #0]
 80014ae:	683b      	ldr	r3, [r7, #0]
 80014b0:	685a      	ldr	r2, [r3, #4]
 80014b2:	4613      	mov	r3, r2
 80014b4:	009b      	lsls	r3, r3, #2
 80014b6:	4413      	add	r3, r2
 80014b8:	3b23      	subs	r3, #35	; 0x23
 80014ba:	fa00 f203 	lsl.w	r2, r0, r3
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	430a      	orrs	r2, r1
 80014c4:	631a      	str	r2, [r3, #48]	; 0x30
 80014c6:	e01b      	b.n	8001500 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80014ce:	683b      	ldr	r3, [r7, #0]
 80014d0:	685a      	ldr	r2, [r3, #4]
 80014d2:	4613      	mov	r3, r2
 80014d4:	009b      	lsls	r3, r3, #2
 80014d6:	4413      	add	r3, r2
 80014d8:	3b41      	subs	r3, #65	; 0x41
 80014da:	221f      	movs	r2, #31
 80014dc:	fa02 f303 	lsl.w	r3, r2, r3
 80014e0:	43db      	mvns	r3, r3
 80014e2:	4019      	ands	r1, r3
 80014e4:	683b      	ldr	r3, [r7, #0]
 80014e6:	6818      	ldr	r0, [r3, #0]
 80014e8:	683b      	ldr	r3, [r7, #0]
 80014ea:	685a      	ldr	r2, [r3, #4]
 80014ec:	4613      	mov	r3, r2
 80014ee:	009b      	lsls	r3, r3, #2
 80014f0:	4413      	add	r3, r2
 80014f2:	3b41      	subs	r3, #65	; 0x41
 80014f4:	fa00 f203 	lsl.w	r2, r0, r3
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	430a      	orrs	r2, r1
 80014fe:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001500:	683b      	ldr	r3, [r7, #0]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	2b09      	cmp	r3, #9
 8001506:	d91c      	bls.n	8001542 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	68d9      	ldr	r1, [r3, #12]
 800150e:	683b      	ldr	r3, [r7, #0]
 8001510:	681a      	ldr	r2, [r3, #0]
 8001512:	4613      	mov	r3, r2
 8001514:	005b      	lsls	r3, r3, #1
 8001516:	4413      	add	r3, r2
 8001518:	3b1e      	subs	r3, #30
 800151a:	2207      	movs	r2, #7
 800151c:	fa02 f303 	lsl.w	r3, r2, r3
 8001520:	43db      	mvns	r3, r3
 8001522:	4019      	ands	r1, r3
 8001524:	683b      	ldr	r3, [r7, #0]
 8001526:	6898      	ldr	r0, [r3, #8]
 8001528:	683b      	ldr	r3, [r7, #0]
 800152a:	681a      	ldr	r2, [r3, #0]
 800152c:	4613      	mov	r3, r2
 800152e:	005b      	lsls	r3, r3, #1
 8001530:	4413      	add	r3, r2
 8001532:	3b1e      	subs	r3, #30
 8001534:	fa00 f203 	lsl.w	r2, r0, r3
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	430a      	orrs	r2, r1
 800153e:	60da      	str	r2, [r3, #12]
 8001540:	e019      	b.n	8001576 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	6919      	ldr	r1, [r3, #16]
 8001548:	683b      	ldr	r3, [r7, #0]
 800154a:	681a      	ldr	r2, [r3, #0]
 800154c:	4613      	mov	r3, r2
 800154e:	005b      	lsls	r3, r3, #1
 8001550:	4413      	add	r3, r2
 8001552:	2207      	movs	r2, #7
 8001554:	fa02 f303 	lsl.w	r3, r2, r3
 8001558:	43db      	mvns	r3, r3
 800155a:	4019      	ands	r1, r3
 800155c:	683b      	ldr	r3, [r7, #0]
 800155e:	6898      	ldr	r0, [r3, #8]
 8001560:	683b      	ldr	r3, [r7, #0]
 8001562:	681a      	ldr	r2, [r3, #0]
 8001564:	4613      	mov	r3, r2
 8001566:	005b      	lsls	r3, r3, #1
 8001568:	4413      	add	r3, r2
 800156a:	fa00 f203 	lsl.w	r2, r0, r3
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	430a      	orrs	r2, r1
 8001574:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001576:	683b      	ldr	r3, [r7, #0]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	2b10      	cmp	r3, #16
 800157c:	d003      	beq.n	8001586 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800157e:	683b      	ldr	r3, [r7, #0]
 8001580:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001582:	2b11      	cmp	r3, #17
 8001584:	d132      	bne.n	80015ec <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	4a1d      	ldr	r2, [pc, #116]	; (8001600 <HAL_ADC_ConfigChannel+0x1e4>)
 800158c:	4293      	cmp	r3, r2
 800158e:	d125      	bne.n	80015dc <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	689b      	ldr	r3, [r3, #8]
 8001596:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800159a:	2b00      	cmp	r3, #0
 800159c:	d126      	bne.n	80015ec <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	689a      	ldr	r2, [r3, #8]
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80015ac:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80015ae:	683b      	ldr	r3, [r7, #0]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	2b10      	cmp	r3, #16
 80015b4:	d11a      	bne.n	80015ec <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80015b6:	4b13      	ldr	r3, [pc, #76]	; (8001604 <HAL_ADC_ConfigChannel+0x1e8>)
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	4a13      	ldr	r2, [pc, #76]	; (8001608 <HAL_ADC_ConfigChannel+0x1ec>)
 80015bc:	fba2 2303 	umull	r2, r3, r2, r3
 80015c0:	0c9a      	lsrs	r2, r3, #18
 80015c2:	4613      	mov	r3, r2
 80015c4:	009b      	lsls	r3, r3, #2
 80015c6:	4413      	add	r3, r2
 80015c8:	005b      	lsls	r3, r3, #1
 80015ca:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80015cc:	e002      	b.n	80015d4 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80015ce:	68bb      	ldr	r3, [r7, #8]
 80015d0:	3b01      	subs	r3, #1
 80015d2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80015d4:	68bb      	ldr	r3, [r7, #8]
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d1f9      	bne.n	80015ce <HAL_ADC_ConfigChannel+0x1b2>
 80015da:	e007      	b.n	80015ec <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015e0:	f043 0220 	orr.w	r2, r3, #32
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 80015e8:	2301      	movs	r3, #1
 80015ea:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	2200      	movs	r2, #0
 80015f0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80015f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80015f6:	4618      	mov	r0, r3
 80015f8:	3714      	adds	r7, #20
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bc80      	pop	{r7}
 80015fe:	4770      	bx	lr
 8001600:	40012400 	.word	0x40012400
 8001604:	20000000 	.word	0x20000000
 8001608:	431bde83 	.word	0x431bde83

0800160c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b084      	sub	sp, #16
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001614:	2300      	movs	r3, #0
 8001616:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001618:	2300      	movs	r3, #0
 800161a:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	689b      	ldr	r3, [r3, #8]
 8001622:	f003 0301 	and.w	r3, r3, #1
 8001626:	2b01      	cmp	r3, #1
 8001628:	d040      	beq.n	80016ac <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	689a      	ldr	r2, [r3, #8]
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	f042 0201 	orr.w	r2, r2, #1
 8001638:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800163a:	4b1f      	ldr	r3, [pc, #124]	; (80016b8 <ADC_Enable+0xac>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	4a1f      	ldr	r2, [pc, #124]	; (80016bc <ADC_Enable+0xb0>)
 8001640:	fba2 2303 	umull	r2, r3, r2, r3
 8001644:	0c9b      	lsrs	r3, r3, #18
 8001646:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001648:	e002      	b.n	8001650 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 800164a:	68bb      	ldr	r3, [r7, #8]
 800164c:	3b01      	subs	r3, #1
 800164e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001650:	68bb      	ldr	r3, [r7, #8]
 8001652:	2b00      	cmp	r3, #0
 8001654:	d1f9      	bne.n	800164a <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001656:	f7ff fb4b 	bl	8000cf0 <HAL_GetTick>
 800165a:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 800165c:	e01f      	b.n	800169e <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800165e:	f7ff fb47 	bl	8000cf0 <HAL_GetTick>
 8001662:	4602      	mov	r2, r0
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	1ad3      	subs	r3, r2, r3
 8001668:	2b02      	cmp	r3, #2
 800166a:	d918      	bls.n	800169e <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	689b      	ldr	r3, [r3, #8]
 8001672:	f003 0301 	and.w	r3, r3, #1
 8001676:	2b01      	cmp	r3, #1
 8001678:	d011      	beq.n	800169e <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800167e:	f043 0210 	orr.w	r2, r3, #16
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800168a:	f043 0201 	orr.w	r2, r3, #1
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	2200      	movs	r2, #0
 8001696:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 800169a:	2301      	movs	r3, #1
 800169c:	e007      	b.n	80016ae <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	689b      	ldr	r3, [r3, #8]
 80016a4:	f003 0301 	and.w	r3, r3, #1
 80016a8:	2b01      	cmp	r3, #1
 80016aa:	d1d8      	bne.n	800165e <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80016ac:	2300      	movs	r3, #0
}
 80016ae:	4618      	mov	r0, r3
 80016b0:	3710      	adds	r7, #16
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bd80      	pop	{r7, pc}
 80016b6:	bf00      	nop
 80016b8:	20000000 	.word	0x20000000
 80016bc:	431bde83 	.word	0x431bde83

080016c0 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b084      	sub	sp, #16
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80016c8:	2300      	movs	r3, #0
 80016ca:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	689b      	ldr	r3, [r3, #8]
 80016d2:	f003 0301 	and.w	r3, r3, #1
 80016d6:	2b01      	cmp	r3, #1
 80016d8:	d12e      	bne.n	8001738 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	689a      	ldr	r2, [r3, #8]
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	f022 0201 	bic.w	r2, r2, #1
 80016e8:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80016ea:	f7ff fb01 	bl	8000cf0 <HAL_GetTick>
 80016ee:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80016f0:	e01b      	b.n	800172a <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80016f2:	f7ff fafd 	bl	8000cf0 <HAL_GetTick>
 80016f6:	4602      	mov	r2, r0
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	1ad3      	subs	r3, r2, r3
 80016fc:	2b02      	cmp	r3, #2
 80016fe:	d914      	bls.n	800172a <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	689b      	ldr	r3, [r3, #8]
 8001706:	f003 0301 	and.w	r3, r3, #1
 800170a:	2b01      	cmp	r3, #1
 800170c:	d10d      	bne.n	800172a <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001712:	f043 0210 	orr.w	r2, r3, #16
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800171e:	f043 0201 	orr.w	r2, r3, #1
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8001726:	2301      	movs	r3, #1
 8001728:	e007      	b.n	800173a <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	689b      	ldr	r3, [r3, #8]
 8001730:	f003 0301 	and.w	r3, r3, #1
 8001734:	2b01      	cmp	r3, #1
 8001736:	d0dc      	beq.n	80016f2 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001738:	2300      	movs	r3, #0
}
 800173a:	4618      	mov	r0, r3
 800173c:	3710      	adds	r7, #16
 800173e:	46bd      	mov	sp, r7
 8001740:	bd80      	pop	{r7, pc}
	...

08001744 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001744:	b480      	push	{r7}
 8001746:	b085      	sub	sp, #20
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	f003 0307 	and.w	r3, r3, #7
 8001752:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001754:	4b0c      	ldr	r3, [pc, #48]	; (8001788 <__NVIC_SetPriorityGrouping+0x44>)
 8001756:	68db      	ldr	r3, [r3, #12]
 8001758:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800175a:	68ba      	ldr	r2, [r7, #8]
 800175c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001760:	4013      	ands	r3, r2
 8001762:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001768:	68bb      	ldr	r3, [r7, #8]
 800176a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800176c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001770:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001774:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001776:	4a04      	ldr	r2, [pc, #16]	; (8001788 <__NVIC_SetPriorityGrouping+0x44>)
 8001778:	68bb      	ldr	r3, [r7, #8]
 800177a:	60d3      	str	r3, [r2, #12]
}
 800177c:	bf00      	nop
 800177e:	3714      	adds	r7, #20
 8001780:	46bd      	mov	sp, r7
 8001782:	bc80      	pop	{r7}
 8001784:	4770      	bx	lr
 8001786:	bf00      	nop
 8001788:	e000ed00 	.word	0xe000ed00

0800178c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800178c:	b480      	push	{r7}
 800178e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001790:	4b04      	ldr	r3, [pc, #16]	; (80017a4 <__NVIC_GetPriorityGrouping+0x18>)
 8001792:	68db      	ldr	r3, [r3, #12]
 8001794:	0a1b      	lsrs	r3, r3, #8
 8001796:	f003 0307 	and.w	r3, r3, #7
}
 800179a:	4618      	mov	r0, r3
 800179c:	46bd      	mov	sp, r7
 800179e:	bc80      	pop	{r7}
 80017a0:	4770      	bx	lr
 80017a2:	bf00      	nop
 80017a4:	e000ed00 	.word	0xe000ed00

080017a8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017a8:	b480      	push	{r7}
 80017aa:	b083      	sub	sp, #12
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	4603      	mov	r3, r0
 80017b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	db0b      	blt.n	80017d2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80017ba:	79fb      	ldrb	r3, [r7, #7]
 80017bc:	f003 021f 	and.w	r2, r3, #31
 80017c0:	4906      	ldr	r1, [pc, #24]	; (80017dc <__NVIC_EnableIRQ+0x34>)
 80017c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017c6:	095b      	lsrs	r3, r3, #5
 80017c8:	2001      	movs	r0, #1
 80017ca:	fa00 f202 	lsl.w	r2, r0, r2
 80017ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80017d2:	bf00      	nop
 80017d4:	370c      	adds	r7, #12
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bc80      	pop	{r7}
 80017da:	4770      	bx	lr
 80017dc:	e000e100 	.word	0xe000e100

080017e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80017e0:	b480      	push	{r7}
 80017e2:	b083      	sub	sp, #12
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	4603      	mov	r3, r0
 80017e8:	6039      	str	r1, [r7, #0]
 80017ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	db0a      	blt.n	800180a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017f4:	683b      	ldr	r3, [r7, #0]
 80017f6:	b2da      	uxtb	r2, r3
 80017f8:	490c      	ldr	r1, [pc, #48]	; (800182c <__NVIC_SetPriority+0x4c>)
 80017fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017fe:	0112      	lsls	r2, r2, #4
 8001800:	b2d2      	uxtb	r2, r2
 8001802:	440b      	add	r3, r1
 8001804:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001808:	e00a      	b.n	8001820 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800180a:	683b      	ldr	r3, [r7, #0]
 800180c:	b2da      	uxtb	r2, r3
 800180e:	4908      	ldr	r1, [pc, #32]	; (8001830 <__NVIC_SetPriority+0x50>)
 8001810:	79fb      	ldrb	r3, [r7, #7]
 8001812:	f003 030f 	and.w	r3, r3, #15
 8001816:	3b04      	subs	r3, #4
 8001818:	0112      	lsls	r2, r2, #4
 800181a:	b2d2      	uxtb	r2, r2
 800181c:	440b      	add	r3, r1
 800181e:	761a      	strb	r2, [r3, #24]
}
 8001820:	bf00      	nop
 8001822:	370c      	adds	r7, #12
 8001824:	46bd      	mov	sp, r7
 8001826:	bc80      	pop	{r7}
 8001828:	4770      	bx	lr
 800182a:	bf00      	nop
 800182c:	e000e100 	.word	0xe000e100
 8001830:	e000ed00 	.word	0xe000ed00

08001834 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001834:	b480      	push	{r7}
 8001836:	b089      	sub	sp, #36	; 0x24
 8001838:	af00      	add	r7, sp, #0
 800183a:	60f8      	str	r0, [r7, #12]
 800183c:	60b9      	str	r1, [r7, #8]
 800183e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	f003 0307 	and.w	r3, r3, #7
 8001846:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001848:	69fb      	ldr	r3, [r7, #28]
 800184a:	f1c3 0307 	rsb	r3, r3, #7
 800184e:	2b04      	cmp	r3, #4
 8001850:	bf28      	it	cs
 8001852:	2304      	movcs	r3, #4
 8001854:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001856:	69fb      	ldr	r3, [r7, #28]
 8001858:	3304      	adds	r3, #4
 800185a:	2b06      	cmp	r3, #6
 800185c:	d902      	bls.n	8001864 <NVIC_EncodePriority+0x30>
 800185e:	69fb      	ldr	r3, [r7, #28]
 8001860:	3b03      	subs	r3, #3
 8001862:	e000      	b.n	8001866 <NVIC_EncodePriority+0x32>
 8001864:	2300      	movs	r3, #0
 8001866:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001868:	f04f 32ff 	mov.w	r2, #4294967295
 800186c:	69bb      	ldr	r3, [r7, #24]
 800186e:	fa02 f303 	lsl.w	r3, r2, r3
 8001872:	43da      	mvns	r2, r3
 8001874:	68bb      	ldr	r3, [r7, #8]
 8001876:	401a      	ands	r2, r3
 8001878:	697b      	ldr	r3, [r7, #20]
 800187a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800187c:	f04f 31ff 	mov.w	r1, #4294967295
 8001880:	697b      	ldr	r3, [r7, #20]
 8001882:	fa01 f303 	lsl.w	r3, r1, r3
 8001886:	43d9      	mvns	r1, r3
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800188c:	4313      	orrs	r3, r2
         );
}
 800188e:	4618      	mov	r0, r3
 8001890:	3724      	adds	r7, #36	; 0x24
 8001892:	46bd      	mov	sp, r7
 8001894:	bc80      	pop	{r7}
 8001896:	4770      	bx	lr

08001898 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b082      	sub	sp, #8
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	3b01      	subs	r3, #1
 80018a4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80018a8:	d301      	bcc.n	80018ae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80018aa:	2301      	movs	r3, #1
 80018ac:	e00f      	b.n	80018ce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018ae:	4a0a      	ldr	r2, [pc, #40]	; (80018d8 <SysTick_Config+0x40>)
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	3b01      	subs	r3, #1
 80018b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80018b6:	210f      	movs	r1, #15
 80018b8:	f04f 30ff 	mov.w	r0, #4294967295
 80018bc:	f7ff ff90 	bl	80017e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80018c0:	4b05      	ldr	r3, [pc, #20]	; (80018d8 <SysTick_Config+0x40>)
 80018c2:	2200      	movs	r2, #0
 80018c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80018c6:	4b04      	ldr	r3, [pc, #16]	; (80018d8 <SysTick_Config+0x40>)
 80018c8:	2207      	movs	r2, #7
 80018ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80018cc:	2300      	movs	r3, #0
}
 80018ce:	4618      	mov	r0, r3
 80018d0:	3708      	adds	r7, #8
 80018d2:	46bd      	mov	sp, r7
 80018d4:	bd80      	pop	{r7, pc}
 80018d6:	bf00      	nop
 80018d8:	e000e010 	.word	0xe000e010

080018dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b082      	sub	sp, #8
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80018e4:	6878      	ldr	r0, [r7, #4]
 80018e6:	f7ff ff2d 	bl	8001744 <__NVIC_SetPriorityGrouping>
}
 80018ea:	bf00      	nop
 80018ec:	3708      	adds	r7, #8
 80018ee:	46bd      	mov	sp, r7
 80018f0:	bd80      	pop	{r7, pc}

080018f2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80018f2:	b580      	push	{r7, lr}
 80018f4:	b086      	sub	sp, #24
 80018f6:	af00      	add	r7, sp, #0
 80018f8:	4603      	mov	r3, r0
 80018fa:	60b9      	str	r1, [r7, #8]
 80018fc:	607a      	str	r2, [r7, #4]
 80018fe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001900:	2300      	movs	r3, #0
 8001902:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001904:	f7ff ff42 	bl	800178c <__NVIC_GetPriorityGrouping>
 8001908:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800190a:	687a      	ldr	r2, [r7, #4]
 800190c:	68b9      	ldr	r1, [r7, #8]
 800190e:	6978      	ldr	r0, [r7, #20]
 8001910:	f7ff ff90 	bl	8001834 <NVIC_EncodePriority>
 8001914:	4602      	mov	r2, r0
 8001916:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800191a:	4611      	mov	r1, r2
 800191c:	4618      	mov	r0, r3
 800191e:	f7ff ff5f 	bl	80017e0 <__NVIC_SetPriority>
}
 8001922:	bf00      	nop
 8001924:	3718      	adds	r7, #24
 8001926:	46bd      	mov	sp, r7
 8001928:	bd80      	pop	{r7, pc}

0800192a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800192a:	b580      	push	{r7, lr}
 800192c:	b082      	sub	sp, #8
 800192e:	af00      	add	r7, sp, #0
 8001930:	4603      	mov	r3, r0
 8001932:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001934:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001938:	4618      	mov	r0, r3
 800193a:	f7ff ff35 	bl	80017a8 <__NVIC_EnableIRQ>
}
 800193e:	bf00      	nop
 8001940:	3708      	adds	r7, #8
 8001942:	46bd      	mov	sp, r7
 8001944:	bd80      	pop	{r7, pc}

08001946 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001946:	b580      	push	{r7, lr}
 8001948:	b082      	sub	sp, #8
 800194a:	af00      	add	r7, sp, #0
 800194c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800194e:	6878      	ldr	r0, [r7, #4]
 8001950:	f7ff ffa2 	bl	8001898 <SysTick_Config>
 8001954:	4603      	mov	r3, r0
}
 8001956:	4618      	mov	r0, r3
 8001958:	3708      	adds	r7, #8
 800195a:	46bd      	mov	sp, r7
 800195c:	bd80      	pop	{r7, pc}

0800195e <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800195e:	b480      	push	{r7}
 8001960:	b085      	sub	sp, #20
 8001962:	af00      	add	r7, sp, #0
 8001964:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001966:	2300      	movs	r3, #0
 8001968:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001970:	b2db      	uxtb	r3, r3
 8001972:	2b02      	cmp	r3, #2
 8001974:	d008      	beq.n	8001988 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	2204      	movs	r2, #4
 800197a:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	2200      	movs	r2, #0
 8001980:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001984:	2301      	movs	r3, #1
 8001986:	e020      	b.n	80019ca <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	681a      	ldr	r2, [r3, #0]
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	f022 020e 	bic.w	r2, r2, #14
 8001996:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	681a      	ldr	r2, [r3, #0]
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f022 0201 	bic.w	r2, r2, #1
 80019a6:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019b0:	2101      	movs	r1, #1
 80019b2:	fa01 f202 	lsl.w	r2, r1, r2
 80019b6:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	2201      	movs	r2, #1
 80019bc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	2200      	movs	r2, #0
 80019c4:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80019c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80019ca:	4618      	mov	r0, r3
 80019cc:	3714      	adds	r7, #20
 80019ce:	46bd      	mov	sp, r7
 80019d0:	bc80      	pop	{r7}
 80019d2:	4770      	bx	lr

080019d4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b084      	sub	sp, #16
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80019dc:	2300      	movs	r3, #0
 80019de:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80019e6:	b2db      	uxtb	r3, r3
 80019e8:	2b02      	cmp	r3, #2
 80019ea:	d005      	beq.n	80019f8 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	2204      	movs	r2, #4
 80019f0:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80019f2:	2301      	movs	r3, #1
 80019f4:	73fb      	strb	r3, [r7, #15]
 80019f6:	e0d6      	b.n	8001ba6 <HAL_DMA_Abort_IT+0x1d2>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	681a      	ldr	r2, [r3, #0]
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f022 020e 	bic.w	r2, r2, #14
 8001a06:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	681a      	ldr	r2, [r3, #0]
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f022 0201 	bic.w	r2, r2, #1
 8001a16:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	461a      	mov	r2, r3
 8001a1e:	4b64      	ldr	r3, [pc, #400]	; (8001bb0 <HAL_DMA_Abort_IT+0x1dc>)
 8001a20:	429a      	cmp	r2, r3
 8001a22:	d958      	bls.n	8001ad6 <HAL_DMA_Abort_IT+0x102>
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	4a62      	ldr	r2, [pc, #392]	; (8001bb4 <HAL_DMA_Abort_IT+0x1e0>)
 8001a2a:	4293      	cmp	r3, r2
 8001a2c:	d04f      	beq.n	8001ace <HAL_DMA_Abort_IT+0xfa>
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	4a61      	ldr	r2, [pc, #388]	; (8001bb8 <HAL_DMA_Abort_IT+0x1e4>)
 8001a34:	4293      	cmp	r3, r2
 8001a36:	d048      	beq.n	8001aca <HAL_DMA_Abort_IT+0xf6>
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	4a5f      	ldr	r2, [pc, #380]	; (8001bbc <HAL_DMA_Abort_IT+0x1e8>)
 8001a3e:	4293      	cmp	r3, r2
 8001a40:	d040      	beq.n	8001ac4 <HAL_DMA_Abort_IT+0xf0>
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	4a5e      	ldr	r2, [pc, #376]	; (8001bc0 <HAL_DMA_Abort_IT+0x1ec>)
 8001a48:	4293      	cmp	r3, r2
 8001a4a:	d038      	beq.n	8001abe <HAL_DMA_Abort_IT+0xea>
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	4a5c      	ldr	r2, [pc, #368]	; (8001bc4 <HAL_DMA_Abort_IT+0x1f0>)
 8001a52:	4293      	cmp	r3, r2
 8001a54:	d030      	beq.n	8001ab8 <HAL_DMA_Abort_IT+0xe4>
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	4a5b      	ldr	r2, [pc, #364]	; (8001bc8 <HAL_DMA_Abort_IT+0x1f4>)
 8001a5c:	4293      	cmp	r3, r2
 8001a5e:	d028      	beq.n	8001ab2 <HAL_DMA_Abort_IT+0xde>
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	4a52      	ldr	r2, [pc, #328]	; (8001bb0 <HAL_DMA_Abort_IT+0x1dc>)
 8001a66:	4293      	cmp	r3, r2
 8001a68:	d020      	beq.n	8001aac <HAL_DMA_Abort_IT+0xd8>
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	4a57      	ldr	r2, [pc, #348]	; (8001bcc <HAL_DMA_Abort_IT+0x1f8>)
 8001a70:	4293      	cmp	r3, r2
 8001a72:	d019      	beq.n	8001aa8 <HAL_DMA_Abort_IT+0xd4>
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	4a55      	ldr	r2, [pc, #340]	; (8001bd0 <HAL_DMA_Abort_IT+0x1fc>)
 8001a7a:	4293      	cmp	r3, r2
 8001a7c:	d012      	beq.n	8001aa4 <HAL_DMA_Abort_IT+0xd0>
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	4a54      	ldr	r2, [pc, #336]	; (8001bd4 <HAL_DMA_Abort_IT+0x200>)
 8001a84:	4293      	cmp	r3, r2
 8001a86:	d00a      	beq.n	8001a9e <HAL_DMA_Abort_IT+0xca>
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	4a52      	ldr	r2, [pc, #328]	; (8001bd8 <HAL_DMA_Abort_IT+0x204>)
 8001a8e:	4293      	cmp	r3, r2
 8001a90:	d102      	bne.n	8001a98 <HAL_DMA_Abort_IT+0xc4>
 8001a92:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a96:	e01b      	b.n	8001ad0 <HAL_DMA_Abort_IT+0xfc>
 8001a98:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001a9c:	e018      	b.n	8001ad0 <HAL_DMA_Abort_IT+0xfc>
 8001a9e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001aa2:	e015      	b.n	8001ad0 <HAL_DMA_Abort_IT+0xfc>
 8001aa4:	2310      	movs	r3, #16
 8001aa6:	e013      	b.n	8001ad0 <HAL_DMA_Abort_IT+0xfc>
 8001aa8:	2301      	movs	r3, #1
 8001aaa:	e011      	b.n	8001ad0 <HAL_DMA_Abort_IT+0xfc>
 8001aac:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001ab0:	e00e      	b.n	8001ad0 <HAL_DMA_Abort_IT+0xfc>
 8001ab2:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001ab6:	e00b      	b.n	8001ad0 <HAL_DMA_Abort_IT+0xfc>
 8001ab8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001abc:	e008      	b.n	8001ad0 <HAL_DMA_Abort_IT+0xfc>
 8001abe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ac2:	e005      	b.n	8001ad0 <HAL_DMA_Abort_IT+0xfc>
 8001ac4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001ac8:	e002      	b.n	8001ad0 <HAL_DMA_Abort_IT+0xfc>
 8001aca:	2310      	movs	r3, #16
 8001acc:	e000      	b.n	8001ad0 <HAL_DMA_Abort_IT+0xfc>
 8001ace:	2301      	movs	r3, #1
 8001ad0:	4a42      	ldr	r2, [pc, #264]	; (8001bdc <HAL_DMA_Abort_IT+0x208>)
 8001ad2:	6053      	str	r3, [r2, #4]
 8001ad4:	e057      	b.n	8001b86 <HAL_DMA_Abort_IT+0x1b2>
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	4a36      	ldr	r2, [pc, #216]	; (8001bb4 <HAL_DMA_Abort_IT+0x1e0>)
 8001adc:	4293      	cmp	r3, r2
 8001ade:	d04f      	beq.n	8001b80 <HAL_DMA_Abort_IT+0x1ac>
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	4a34      	ldr	r2, [pc, #208]	; (8001bb8 <HAL_DMA_Abort_IT+0x1e4>)
 8001ae6:	4293      	cmp	r3, r2
 8001ae8:	d048      	beq.n	8001b7c <HAL_DMA_Abort_IT+0x1a8>
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	4a33      	ldr	r2, [pc, #204]	; (8001bbc <HAL_DMA_Abort_IT+0x1e8>)
 8001af0:	4293      	cmp	r3, r2
 8001af2:	d040      	beq.n	8001b76 <HAL_DMA_Abort_IT+0x1a2>
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	4a31      	ldr	r2, [pc, #196]	; (8001bc0 <HAL_DMA_Abort_IT+0x1ec>)
 8001afa:	4293      	cmp	r3, r2
 8001afc:	d038      	beq.n	8001b70 <HAL_DMA_Abort_IT+0x19c>
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	4a30      	ldr	r2, [pc, #192]	; (8001bc4 <HAL_DMA_Abort_IT+0x1f0>)
 8001b04:	4293      	cmp	r3, r2
 8001b06:	d030      	beq.n	8001b6a <HAL_DMA_Abort_IT+0x196>
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	4a2e      	ldr	r2, [pc, #184]	; (8001bc8 <HAL_DMA_Abort_IT+0x1f4>)
 8001b0e:	4293      	cmp	r3, r2
 8001b10:	d028      	beq.n	8001b64 <HAL_DMA_Abort_IT+0x190>
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	4a26      	ldr	r2, [pc, #152]	; (8001bb0 <HAL_DMA_Abort_IT+0x1dc>)
 8001b18:	4293      	cmp	r3, r2
 8001b1a:	d020      	beq.n	8001b5e <HAL_DMA_Abort_IT+0x18a>
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	4a2a      	ldr	r2, [pc, #168]	; (8001bcc <HAL_DMA_Abort_IT+0x1f8>)
 8001b22:	4293      	cmp	r3, r2
 8001b24:	d019      	beq.n	8001b5a <HAL_DMA_Abort_IT+0x186>
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	4a29      	ldr	r2, [pc, #164]	; (8001bd0 <HAL_DMA_Abort_IT+0x1fc>)
 8001b2c:	4293      	cmp	r3, r2
 8001b2e:	d012      	beq.n	8001b56 <HAL_DMA_Abort_IT+0x182>
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	4a27      	ldr	r2, [pc, #156]	; (8001bd4 <HAL_DMA_Abort_IT+0x200>)
 8001b36:	4293      	cmp	r3, r2
 8001b38:	d00a      	beq.n	8001b50 <HAL_DMA_Abort_IT+0x17c>
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	4a26      	ldr	r2, [pc, #152]	; (8001bd8 <HAL_DMA_Abort_IT+0x204>)
 8001b40:	4293      	cmp	r3, r2
 8001b42:	d102      	bne.n	8001b4a <HAL_DMA_Abort_IT+0x176>
 8001b44:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b48:	e01b      	b.n	8001b82 <HAL_DMA_Abort_IT+0x1ae>
 8001b4a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001b4e:	e018      	b.n	8001b82 <HAL_DMA_Abort_IT+0x1ae>
 8001b50:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001b54:	e015      	b.n	8001b82 <HAL_DMA_Abort_IT+0x1ae>
 8001b56:	2310      	movs	r3, #16
 8001b58:	e013      	b.n	8001b82 <HAL_DMA_Abort_IT+0x1ae>
 8001b5a:	2301      	movs	r3, #1
 8001b5c:	e011      	b.n	8001b82 <HAL_DMA_Abort_IT+0x1ae>
 8001b5e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001b62:	e00e      	b.n	8001b82 <HAL_DMA_Abort_IT+0x1ae>
 8001b64:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001b68:	e00b      	b.n	8001b82 <HAL_DMA_Abort_IT+0x1ae>
 8001b6a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001b6e:	e008      	b.n	8001b82 <HAL_DMA_Abort_IT+0x1ae>
 8001b70:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b74:	e005      	b.n	8001b82 <HAL_DMA_Abort_IT+0x1ae>
 8001b76:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001b7a:	e002      	b.n	8001b82 <HAL_DMA_Abort_IT+0x1ae>
 8001b7c:	2310      	movs	r3, #16
 8001b7e:	e000      	b.n	8001b82 <HAL_DMA_Abort_IT+0x1ae>
 8001b80:	2301      	movs	r3, #1
 8001b82:	4a17      	ldr	r2, [pc, #92]	; (8001be0 <HAL_DMA_Abort_IT+0x20c>)
 8001b84:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	2201      	movs	r2, #1
 8001b8a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	2200      	movs	r2, #0
 8001b92:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d003      	beq.n	8001ba6 <HAL_DMA_Abort_IT+0x1d2>
    {
      hdma->XferAbortCallback(hdma);
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ba2:	6878      	ldr	r0, [r7, #4]
 8001ba4:	4798      	blx	r3
    } 
  }
  return status;
 8001ba6:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ba8:	4618      	mov	r0, r3
 8001baa:	3710      	adds	r7, #16
 8001bac:	46bd      	mov	sp, r7
 8001bae:	bd80      	pop	{r7, pc}
 8001bb0:	40020080 	.word	0x40020080
 8001bb4:	40020008 	.word	0x40020008
 8001bb8:	4002001c 	.word	0x4002001c
 8001bbc:	40020030 	.word	0x40020030
 8001bc0:	40020044 	.word	0x40020044
 8001bc4:	40020058 	.word	0x40020058
 8001bc8:	4002006c 	.word	0x4002006c
 8001bcc:	40020408 	.word	0x40020408
 8001bd0:	4002041c 	.word	0x4002041c
 8001bd4:	40020430 	.word	0x40020430
 8001bd8:	40020444 	.word	0x40020444
 8001bdc:	40020400 	.word	0x40020400
 8001be0:	40020000 	.word	0x40020000

08001be4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001be4:	b480      	push	{r7}
 8001be6:	b08b      	sub	sp, #44	; 0x2c
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
 8001bec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001bee:	2300      	movs	r3, #0
 8001bf0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001bf6:	e179      	b.n	8001eec <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001bf8:	2201      	movs	r2, #1
 8001bfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bfc:	fa02 f303 	lsl.w	r3, r2, r3
 8001c00:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c02:	683b      	ldr	r3, [r7, #0]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	69fa      	ldr	r2, [r7, #28]
 8001c08:	4013      	ands	r3, r2
 8001c0a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001c0c:	69ba      	ldr	r2, [r7, #24]
 8001c0e:	69fb      	ldr	r3, [r7, #28]
 8001c10:	429a      	cmp	r2, r3
 8001c12:	f040 8168 	bne.w	8001ee6 <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001c16:	683b      	ldr	r3, [r7, #0]
 8001c18:	685b      	ldr	r3, [r3, #4]
 8001c1a:	4a96      	ldr	r2, [pc, #600]	; (8001e74 <HAL_GPIO_Init+0x290>)
 8001c1c:	4293      	cmp	r3, r2
 8001c1e:	d05e      	beq.n	8001cde <HAL_GPIO_Init+0xfa>
 8001c20:	4a94      	ldr	r2, [pc, #592]	; (8001e74 <HAL_GPIO_Init+0x290>)
 8001c22:	4293      	cmp	r3, r2
 8001c24:	d875      	bhi.n	8001d12 <HAL_GPIO_Init+0x12e>
 8001c26:	4a94      	ldr	r2, [pc, #592]	; (8001e78 <HAL_GPIO_Init+0x294>)
 8001c28:	4293      	cmp	r3, r2
 8001c2a:	d058      	beq.n	8001cde <HAL_GPIO_Init+0xfa>
 8001c2c:	4a92      	ldr	r2, [pc, #584]	; (8001e78 <HAL_GPIO_Init+0x294>)
 8001c2e:	4293      	cmp	r3, r2
 8001c30:	d86f      	bhi.n	8001d12 <HAL_GPIO_Init+0x12e>
 8001c32:	4a92      	ldr	r2, [pc, #584]	; (8001e7c <HAL_GPIO_Init+0x298>)
 8001c34:	4293      	cmp	r3, r2
 8001c36:	d052      	beq.n	8001cde <HAL_GPIO_Init+0xfa>
 8001c38:	4a90      	ldr	r2, [pc, #576]	; (8001e7c <HAL_GPIO_Init+0x298>)
 8001c3a:	4293      	cmp	r3, r2
 8001c3c:	d869      	bhi.n	8001d12 <HAL_GPIO_Init+0x12e>
 8001c3e:	4a90      	ldr	r2, [pc, #576]	; (8001e80 <HAL_GPIO_Init+0x29c>)
 8001c40:	4293      	cmp	r3, r2
 8001c42:	d04c      	beq.n	8001cde <HAL_GPIO_Init+0xfa>
 8001c44:	4a8e      	ldr	r2, [pc, #568]	; (8001e80 <HAL_GPIO_Init+0x29c>)
 8001c46:	4293      	cmp	r3, r2
 8001c48:	d863      	bhi.n	8001d12 <HAL_GPIO_Init+0x12e>
 8001c4a:	4a8e      	ldr	r2, [pc, #568]	; (8001e84 <HAL_GPIO_Init+0x2a0>)
 8001c4c:	4293      	cmp	r3, r2
 8001c4e:	d046      	beq.n	8001cde <HAL_GPIO_Init+0xfa>
 8001c50:	4a8c      	ldr	r2, [pc, #560]	; (8001e84 <HAL_GPIO_Init+0x2a0>)
 8001c52:	4293      	cmp	r3, r2
 8001c54:	d85d      	bhi.n	8001d12 <HAL_GPIO_Init+0x12e>
 8001c56:	2b12      	cmp	r3, #18
 8001c58:	d82a      	bhi.n	8001cb0 <HAL_GPIO_Init+0xcc>
 8001c5a:	2b12      	cmp	r3, #18
 8001c5c:	d859      	bhi.n	8001d12 <HAL_GPIO_Init+0x12e>
 8001c5e:	a201      	add	r2, pc, #4	; (adr r2, 8001c64 <HAL_GPIO_Init+0x80>)
 8001c60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c64:	08001cdf 	.word	0x08001cdf
 8001c68:	08001cb9 	.word	0x08001cb9
 8001c6c:	08001ccb 	.word	0x08001ccb
 8001c70:	08001d0d 	.word	0x08001d0d
 8001c74:	08001d13 	.word	0x08001d13
 8001c78:	08001d13 	.word	0x08001d13
 8001c7c:	08001d13 	.word	0x08001d13
 8001c80:	08001d13 	.word	0x08001d13
 8001c84:	08001d13 	.word	0x08001d13
 8001c88:	08001d13 	.word	0x08001d13
 8001c8c:	08001d13 	.word	0x08001d13
 8001c90:	08001d13 	.word	0x08001d13
 8001c94:	08001d13 	.word	0x08001d13
 8001c98:	08001d13 	.word	0x08001d13
 8001c9c:	08001d13 	.word	0x08001d13
 8001ca0:	08001d13 	.word	0x08001d13
 8001ca4:	08001d13 	.word	0x08001d13
 8001ca8:	08001cc1 	.word	0x08001cc1
 8001cac:	08001cd5 	.word	0x08001cd5
 8001cb0:	4a75      	ldr	r2, [pc, #468]	; (8001e88 <HAL_GPIO_Init+0x2a4>)
 8001cb2:	4293      	cmp	r3, r2
 8001cb4:	d013      	beq.n	8001cde <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001cb6:	e02c      	b.n	8001d12 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	68db      	ldr	r3, [r3, #12]
 8001cbc:	623b      	str	r3, [r7, #32]
          break;
 8001cbe:	e029      	b.n	8001d14 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	68db      	ldr	r3, [r3, #12]
 8001cc4:	3304      	adds	r3, #4
 8001cc6:	623b      	str	r3, [r7, #32]
          break;
 8001cc8:	e024      	b.n	8001d14 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001cca:	683b      	ldr	r3, [r7, #0]
 8001ccc:	68db      	ldr	r3, [r3, #12]
 8001cce:	3308      	adds	r3, #8
 8001cd0:	623b      	str	r3, [r7, #32]
          break;
 8001cd2:	e01f      	b.n	8001d14 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001cd4:	683b      	ldr	r3, [r7, #0]
 8001cd6:	68db      	ldr	r3, [r3, #12]
 8001cd8:	330c      	adds	r3, #12
 8001cda:	623b      	str	r3, [r7, #32]
          break;
 8001cdc:	e01a      	b.n	8001d14 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001cde:	683b      	ldr	r3, [r7, #0]
 8001ce0:	689b      	ldr	r3, [r3, #8]
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d102      	bne.n	8001cec <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001ce6:	2304      	movs	r3, #4
 8001ce8:	623b      	str	r3, [r7, #32]
          break;
 8001cea:	e013      	b.n	8001d14 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001cec:	683b      	ldr	r3, [r7, #0]
 8001cee:	689b      	ldr	r3, [r3, #8]
 8001cf0:	2b01      	cmp	r3, #1
 8001cf2:	d105      	bne.n	8001d00 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001cf4:	2308      	movs	r3, #8
 8001cf6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	69fa      	ldr	r2, [r7, #28]
 8001cfc:	611a      	str	r2, [r3, #16]
          break;
 8001cfe:	e009      	b.n	8001d14 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001d00:	2308      	movs	r3, #8
 8001d02:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	69fa      	ldr	r2, [r7, #28]
 8001d08:	615a      	str	r2, [r3, #20]
          break;
 8001d0a:	e003      	b.n	8001d14 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	623b      	str	r3, [r7, #32]
          break;
 8001d10:	e000      	b.n	8001d14 <HAL_GPIO_Init+0x130>
          break;
 8001d12:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001d14:	69bb      	ldr	r3, [r7, #24]
 8001d16:	2bff      	cmp	r3, #255	; 0xff
 8001d18:	d801      	bhi.n	8001d1e <HAL_GPIO_Init+0x13a>
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	e001      	b.n	8001d22 <HAL_GPIO_Init+0x13e>
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	3304      	adds	r3, #4
 8001d22:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001d24:	69bb      	ldr	r3, [r7, #24]
 8001d26:	2bff      	cmp	r3, #255	; 0xff
 8001d28:	d802      	bhi.n	8001d30 <HAL_GPIO_Init+0x14c>
 8001d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d2c:	009b      	lsls	r3, r3, #2
 8001d2e:	e002      	b.n	8001d36 <HAL_GPIO_Init+0x152>
 8001d30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d32:	3b08      	subs	r3, #8
 8001d34:	009b      	lsls	r3, r3, #2
 8001d36:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001d38:	697b      	ldr	r3, [r7, #20]
 8001d3a:	681a      	ldr	r2, [r3, #0]
 8001d3c:	210f      	movs	r1, #15
 8001d3e:	693b      	ldr	r3, [r7, #16]
 8001d40:	fa01 f303 	lsl.w	r3, r1, r3
 8001d44:	43db      	mvns	r3, r3
 8001d46:	401a      	ands	r2, r3
 8001d48:	6a39      	ldr	r1, [r7, #32]
 8001d4a:	693b      	ldr	r3, [r7, #16]
 8001d4c:	fa01 f303 	lsl.w	r3, r1, r3
 8001d50:	431a      	orrs	r2, r3
 8001d52:	697b      	ldr	r3, [r7, #20]
 8001d54:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001d56:	683b      	ldr	r3, [r7, #0]
 8001d58:	685b      	ldr	r3, [r3, #4]
 8001d5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	f000 80c1 	beq.w	8001ee6 <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001d64:	4b49      	ldr	r3, [pc, #292]	; (8001e8c <HAL_GPIO_Init+0x2a8>)
 8001d66:	699b      	ldr	r3, [r3, #24]
 8001d68:	4a48      	ldr	r2, [pc, #288]	; (8001e8c <HAL_GPIO_Init+0x2a8>)
 8001d6a:	f043 0301 	orr.w	r3, r3, #1
 8001d6e:	6193      	str	r3, [r2, #24]
 8001d70:	4b46      	ldr	r3, [pc, #280]	; (8001e8c <HAL_GPIO_Init+0x2a8>)
 8001d72:	699b      	ldr	r3, [r3, #24]
 8001d74:	f003 0301 	and.w	r3, r3, #1
 8001d78:	60bb      	str	r3, [r7, #8]
 8001d7a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001d7c:	4a44      	ldr	r2, [pc, #272]	; (8001e90 <HAL_GPIO_Init+0x2ac>)
 8001d7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d80:	089b      	lsrs	r3, r3, #2
 8001d82:	3302      	adds	r3, #2
 8001d84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d88:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001d8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d8c:	f003 0303 	and.w	r3, r3, #3
 8001d90:	009b      	lsls	r3, r3, #2
 8001d92:	220f      	movs	r2, #15
 8001d94:	fa02 f303 	lsl.w	r3, r2, r3
 8001d98:	43db      	mvns	r3, r3
 8001d9a:	68fa      	ldr	r2, [r7, #12]
 8001d9c:	4013      	ands	r3, r2
 8001d9e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	4a3c      	ldr	r2, [pc, #240]	; (8001e94 <HAL_GPIO_Init+0x2b0>)
 8001da4:	4293      	cmp	r3, r2
 8001da6:	d01f      	beq.n	8001de8 <HAL_GPIO_Init+0x204>
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	4a3b      	ldr	r2, [pc, #236]	; (8001e98 <HAL_GPIO_Init+0x2b4>)
 8001dac:	4293      	cmp	r3, r2
 8001dae:	d019      	beq.n	8001de4 <HAL_GPIO_Init+0x200>
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	4a3a      	ldr	r2, [pc, #232]	; (8001e9c <HAL_GPIO_Init+0x2b8>)
 8001db4:	4293      	cmp	r3, r2
 8001db6:	d013      	beq.n	8001de0 <HAL_GPIO_Init+0x1fc>
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	4a39      	ldr	r2, [pc, #228]	; (8001ea0 <HAL_GPIO_Init+0x2bc>)
 8001dbc:	4293      	cmp	r3, r2
 8001dbe:	d00d      	beq.n	8001ddc <HAL_GPIO_Init+0x1f8>
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	4a38      	ldr	r2, [pc, #224]	; (8001ea4 <HAL_GPIO_Init+0x2c0>)
 8001dc4:	4293      	cmp	r3, r2
 8001dc6:	d007      	beq.n	8001dd8 <HAL_GPIO_Init+0x1f4>
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	4a37      	ldr	r2, [pc, #220]	; (8001ea8 <HAL_GPIO_Init+0x2c4>)
 8001dcc:	4293      	cmp	r3, r2
 8001dce:	d101      	bne.n	8001dd4 <HAL_GPIO_Init+0x1f0>
 8001dd0:	2305      	movs	r3, #5
 8001dd2:	e00a      	b.n	8001dea <HAL_GPIO_Init+0x206>
 8001dd4:	2306      	movs	r3, #6
 8001dd6:	e008      	b.n	8001dea <HAL_GPIO_Init+0x206>
 8001dd8:	2304      	movs	r3, #4
 8001dda:	e006      	b.n	8001dea <HAL_GPIO_Init+0x206>
 8001ddc:	2303      	movs	r3, #3
 8001dde:	e004      	b.n	8001dea <HAL_GPIO_Init+0x206>
 8001de0:	2302      	movs	r3, #2
 8001de2:	e002      	b.n	8001dea <HAL_GPIO_Init+0x206>
 8001de4:	2301      	movs	r3, #1
 8001de6:	e000      	b.n	8001dea <HAL_GPIO_Init+0x206>
 8001de8:	2300      	movs	r3, #0
 8001dea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001dec:	f002 0203 	and.w	r2, r2, #3
 8001df0:	0092      	lsls	r2, r2, #2
 8001df2:	4093      	lsls	r3, r2
 8001df4:	68fa      	ldr	r2, [r7, #12]
 8001df6:	4313      	orrs	r3, r2
 8001df8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001dfa:	4925      	ldr	r1, [pc, #148]	; (8001e90 <HAL_GPIO_Init+0x2ac>)
 8001dfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dfe:	089b      	lsrs	r3, r3, #2
 8001e00:	3302      	adds	r3, #2
 8001e02:	68fa      	ldr	r2, [r7, #12]
 8001e04:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001e08:	683b      	ldr	r3, [r7, #0]
 8001e0a:	685b      	ldr	r3, [r3, #4]
 8001e0c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d006      	beq.n	8001e22 <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001e14:	4b25      	ldr	r3, [pc, #148]	; (8001eac <HAL_GPIO_Init+0x2c8>)
 8001e16:	689a      	ldr	r2, [r3, #8]
 8001e18:	4924      	ldr	r1, [pc, #144]	; (8001eac <HAL_GPIO_Init+0x2c8>)
 8001e1a:	69bb      	ldr	r3, [r7, #24]
 8001e1c:	4313      	orrs	r3, r2
 8001e1e:	608b      	str	r3, [r1, #8]
 8001e20:	e006      	b.n	8001e30 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001e22:	4b22      	ldr	r3, [pc, #136]	; (8001eac <HAL_GPIO_Init+0x2c8>)
 8001e24:	689a      	ldr	r2, [r3, #8]
 8001e26:	69bb      	ldr	r3, [r7, #24]
 8001e28:	43db      	mvns	r3, r3
 8001e2a:	4920      	ldr	r1, [pc, #128]	; (8001eac <HAL_GPIO_Init+0x2c8>)
 8001e2c:	4013      	ands	r3, r2
 8001e2e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	685b      	ldr	r3, [r3, #4]
 8001e34:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d006      	beq.n	8001e4a <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001e3c:	4b1b      	ldr	r3, [pc, #108]	; (8001eac <HAL_GPIO_Init+0x2c8>)
 8001e3e:	68da      	ldr	r2, [r3, #12]
 8001e40:	491a      	ldr	r1, [pc, #104]	; (8001eac <HAL_GPIO_Init+0x2c8>)
 8001e42:	69bb      	ldr	r3, [r7, #24]
 8001e44:	4313      	orrs	r3, r2
 8001e46:	60cb      	str	r3, [r1, #12]
 8001e48:	e006      	b.n	8001e58 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001e4a:	4b18      	ldr	r3, [pc, #96]	; (8001eac <HAL_GPIO_Init+0x2c8>)
 8001e4c:	68da      	ldr	r2, [r3, #12]
 8001e4e:	69bb      	ldr	r3, [r7, #24]
 8001e50:	43db      	mvns	r3, r3
 8001e52:	4916      	ldr	r1, [pc, #88]	; (8001eac <HAL_GPIO_Init+0x2c8>)
 8001e54:	4013      	ands	r3, r2
 8001e56:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001e58:	683b      	ldr	r3, [r7, #0]
 8001e5a:	685b      	ldr	r3, [r3, #4]
 8001e5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d025      	beq.n	8001eb0 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001e64:	4b11      	ldr	r3, [pc, #68]	; (8001eac <HAL_GPIO_Init+0x2c8>)
 8001e66:	685a      	ldr	r2, [r3, #4]
 8001e68:	4910      	ldr	r1, [pc, #64]	; (8001eac <HAL_GPIO_Init+0x2c8>)
 8001e6a:	69bb      	ldr	r3, [r7, #24]
 8001e6c:	4313      	orrs	r3, r2
 8001e6e:	604b      	str	r3, [r1, #4]
 8001e70:	e025      	b.n	8001ebe <HAL_GPIO_Init+0x2da>
 8001e72:	bf00      	nop
 8001e74:	10320000 	.word	0x10320000
 8001e78:	10310000 	.word	0x10310000
 8001e7c:	10220000 	.word	0x10220000
 8001e80:	10210000 	.word	0x10210000
 8001e84:	10120000 	.word	0x10120000
 8001e88:	10110000 	.word	0x10110000
 8001e8c:	40021000 	.word	0x40021000
 8001e90:	40010000 	.word	0x40010000
 8001e94:	40010800 	.word	0x40010800
 8001e98:	40010c00 	.word	0x40010c00
 8001e9c:	40011000 	.word	0x40011000
 8001ea0:	40011400 	.word	0x40011400
 8001ea4:	40011800 	.word	0x40011800
 8001ea8:	40011c00 	.word	0x40011c00
 8001eac:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001eb0:	4b15      	ldr	r3, [pc, #84]	; (8001f08 <HAL_GPIO_Init+0x324>)
 8001eb2:	685a      	ldr	r2, [r3, #4]
 8001eb4:	69bb      	ldr	r3, [r7, #24]
 8001eb6:	43db      	mvns	r3, r3
 8001eb8:	4913      	ldr	r1, [pc, #76]	; (8001f08 <HAL_GPIO_Init+0x324>)
 8001eba:	4013      	ands	r3, r2
 8001ebc:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001ebe:	683b      	ldr	r3, [r7, #0]
 8001ec0:	685b      	ldr	r3, [r3, #4]
 8001ec2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d006      	beq.n	8001ed8 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001eca:	4b0f      	ldr	r3, [pc, #60]	; (8001f08 <HAL_GPIO_Init+0x324>)
 8001ecc:	681a      	ldr	r2, [r3, #0]
 8001ece:	490e      	ldr	r1, [pc, #56]	; (8001f08 <HAL_GPIO_Init+0x324>)
 8001ed0:	69bb      	ldr	r3, [r7, #24]
 8001ed2:	4313      	orrs	r3, r2
 8001ed4:	600b      	str	r3, [r1, #0]
 8001ed6:	e006      	b.n	8001ee6 <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001ed8:	4b0b      	ldr	r3, [pc, #44]	; (8001f08 <HAL_GPIO_Init+0x324>)
 8001eda:	681a      	ldr	r2, [r3, #0]
 8001edc:	69bb      	ldr	r3, [r7, #24]
 8001ede:	43db      	mvns	r3, r3
 8001ee0:	4909      	ldr	r1, [pc, #36]	; (8001f08 <HAL_GPIO_Init+0x324>)
 8001ee2:	4013      	ands	r3, r2
 8001ee4:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001ee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ee8:	3301      	adds	r3, #1
 8001eea:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	681a      	ldr	r2, [r3, #0]
 8001ef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ef2:	fa22 f303 	lsr.w	r3, r2, r3
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	f47f ae7e 	bne.w	8001bf8 <HAL_GPIO_Init+0x14>
  }
}
 8001efc:	bf00      	nop
 8001efe:	bf00      	nop
 8001f00:	372c      	adds	r7, #44	; 0x2c
 8001f02:	46bd      	mov	sp, r7
 8001f04:	bc80      	pop	{r7}
 8001f06:	4770      	bx	lr
 8001f08:	40010400 	.word	0x40010400

08001f0c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	b083      	sub	sp, #12
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
 8001f14:	460b      	mov	r3, r1
 8001f16:	807b      	strh	r3, [r7, #2]
 8001f18:	4613      	mov	r3, r2
 8001f1a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001f1c:	787b      	ldrb	r3, [r7, #1]
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d003      	beq.n	8001f2a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001f22:	887a      	ldrh	r2, [r7, #2]
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001f28:	e003      	b.n	8001f32 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001f2a:	887b      	ldrh	r3, [r7, #2]
 8001f2c:	041a      	lsls	r2, r3, #16
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	611a      	str	r2, [r3, #16]
}
 8001f32:	bf00      	nop
 8001f34:	370c      	adds	r7, #12
 8001f36:	46bd      	mov	sp, r7
 8001f38:	bc80      	pop	{r7}
 8001f3a:	4770      	bx	lr

08001f3c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b086      	sub	sp, #24
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d101      	bne.n	8001f4e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001f4a:	2301      	movs	r3, #1
 8001f4c:	e272      	b.n	8002434 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f003 0301 	and.w	r3, r3, #1
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	f000 8087 	beq.w	800206a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001f5c:	4b92      	ldr	r3, [pc, #584]	; (80021a8 <HAL_RCC_OscConfig+0x26c>)
 8001f5e:	685b      	ldr	r3, [r3, #4]
 8001f60:	f003 030c 	and.w	r3, r3, #12
 8001f64:	2b04      	cmp	r3, #4
 8001f66:	d00c      	beq.n	8001f82 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001f68:	4b8f      	ldr	r3, [pc, #572]	; (80021a8 <HAL_RCC_OscConfig+0x26c>)
 8001f6a:	685b      	ldr	r3, [r3, #4]
 8001f6c:	f003 030c 	and.w	r3, r3, #12
 8001f70:	2b08      	cmp	r3, #8
 8001f72:	d112      	bne.n	8001f9a <HAL_RCC_OscConfig+0x5e>
 8001f74:	4b8c      	ldr	r3, [pc, #560]	; (80021a8 <HAL_RCC_OscConfig+0x26c>)
 8001f76:	685b      	ldr	r3, [r3, #4]
 8001f78:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f80:	d10b      	bne.n	8001f9a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f82:	4b89      	ldr	r3, [pc, #548]	; (80021a8 <HAL_RCC_OscConfig+0x26c>)
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d06c      	beq.n	8002068 <HAL_RCC_OscConfig+0x12c>
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	685b      	ldr	r3, [r3, #4]
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d168      	bne.n	8002068 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001f96:	2301      	movs	r3, #1
 8001f98:	e24c      	b.n	8002434 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	685b      	ldr	r3, [r3, #4]
 8001f9e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001fa2:	d106      	bne.n	8001fb2 <HAL_RCC_OscConfig+0x76>
 8001fa4:	4b80      	ldr	r3, [pc, #512]	; (80021a8 <HAL_RCC_OscConfig+0x26c>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	4a7f      	ldr	r2, [pc, #508]	; (80021a8 <HAL_RCC_OscConfig+0x26c>)
 8001faa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fae:	6013      	str	r3, [r2, #0]
 8001fb0:	e02e      	b.n	8002010 <HAL_RCC_OscConfig+0xd4>
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	685b      	ldr	r3, [r3, #4]
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d10c      	bne.n	8001fd4 <HAL_RCC_OscConfig+0x98>
 8001fba:	4b7b      	ldr	r3, [pc, #492]	; (80021a8 <HAL_RCC_OscConfig+0x26c>)
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	4a7a      	ldr	r2, [pc, #488]	; (80021a8 <HAL_RCC_OscConfig+0x26c>)
 8001fc0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001fc4:	6013      	str	r3, [r2, #0]
 8001fc6:	4b78      	ldr	r3, [pc, #480]	; (80021a8 <HAL_RCC_OscConfig+0x26c>)
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	4a77      	ldr	r2, [pc, #476]	; (80021a8 <HAL_RCC_OscConfig+0x26c>)
 8001fcc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001fd0:	6013      	str	r3, [r2, #0]
 8001fd2:	e01d      	b.n	8002010 <HAL_RCC_OscConfig+0xd4>
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	685b      	ldr	r3, [r3, #4]
 8001fd8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001fdc:	d10c      	bne.n	8001ff8 <HAL_RCC_OscConfig+0xbc>
 8001fde:	4b72      	ldr	r3, [pc, #456]	; (80021a8 <HAL_RCC_OscConfig+0x26c>)
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	4a71      	ldr	r2, [pc, #452]	; (80021a8 <HAL_RCC_OscConfig+0x26c>)
 8001fe4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001fe8:	6013      	str	r3, [r2, #0]
 8001fea:	4b6f      	ldr	r3, [pc, #444]	; (80021a8 <HAL_RCC_OscConfig+0x26c>)
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	4a6e      	ldr	r2, [pc, #440]	; (80021a8 <HAL_RCC_OscConfig+0x26c>)
 8001ff0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ff4:	6013      	str	r3, [r2, #0]
 8001ff6:	e00b      	b.n	8002010 <HAL_RCC_OscConfig+0xd4>
 8001ff8:	4b6b      	ldr	r3, [pc, #428]	; (80021a8 <HAL_RCC_OscConfig+0x26c>)
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	4a6a      	ldr	r2, [pc, #424]	; (80021a8 <HAL_RCC_OscConfig+0x26c>)
 8001ffe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002002:	6013      	str	r3, [r2, #0]
 8002004:	4b68      	ldr	r3, [pc, #416]	; (80021a8 <HAL_RCC_OscConfig+0x26c>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	4a67      	ldr	r2, [pc, #412]	; (80021a8 <HAL_RCC_OscConfig+0x26c>)
 800200a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800200e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	685b      	ldr	r3, [r3, #4]
 8002014:	2b00      	cmp	r3, #0
 8002016:	d013      	beq.n	8002040 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002018:	f7fe fe6a 	bl	8000cf0 <HAL_GetTick>
 800201c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800201e:	e008      	b.n	8002032 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002020:	f7fe fe66 	bl	8000cf0 <HAL_GetTick>
 8002024:	4602      	mov	r2, r0
 8002026:	693b      	ldr	r3, [r7, #16]
 8002028:	1ad3      	subs	r3, r2, r3
 800202a:	2b64      	cmp	r3, #100	; 0x64
 800202c:	d901      	bls.n	8002032 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800202e:	2303      	movs	r3, #3
 8002030:	e200      	b.n	8002434 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002032:	4b5d      	ldr	r3, [pc, #372]	; (80021a8 <HAL_RCC_OscConfig+0x26c>)
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800203a:	2b00      	cmp	r3, #0
 800203c:	d0f0      	beq.n	8002020 <HAL_RCC_OscConfig+0xe4>
 800203e:	e014      	b.n	800206a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002040:	f7fe fe56 	bl	8000cf0 <HAL_GetTick>
 8002044:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002046:	e008      	b.n	800205a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002048:	f7fe fe52 	bl	8000cf0 <HAL_GetTick>
 800204c:	4602      	mov	r2, r0
 800204e:	693b      	ldr	r3, [r7, #16]
 8002050:	1ad3      	subs	r3, r2, r3
 8002052:	2b64      	cmp	r3, #100	; 0x64
 8002054:	d901      	bls.n	800205a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002056:	2303      	movs	r3, #3
 8002058:	e1ec      	b.n	8002434 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800205a:	4b53      	ldr	r3, [pc, #332]	; (80021a8 <HAL_RCC_OscConfig+0x26c>)
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002062:	2b00      	cmp	r3, #0
 8002064:	d1f0      	bne.n	8002048 <HAL_RCC_OscConfig+0x10c>
 8002066:	e000      	b.n	800206a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002068:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f003 0302 	and.w	r3, r3, #2
 8002072:	2b00      	cmp	r3, #0
 8002074:	d063      	beq.n	800213e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002076:	4b4c      	ldr	r3, [pc, #304]	; (80021a8 <HAL_RCC_OscConfig+0x26c>)
 8002078:	685b      	ldr	r3, [r3, #4]
 800207a:	f003 030c 	and.w	r3, r3, #12
 800207e:	2b00      	cmp	r3, #0
 8002080:	d00b      	beq.n	800209a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002082:	4b49      	ldr	r3, [pc, #292]	; (80021a8 <HAL_RCC_OscConfig+0x26c>)
 8002084:	685b      	ldr	r3, [r3, #4]
 8002086:	f003 030c 	and.w	r3, r3, #12
 800208a:	2b08      	cmp	r3, #8
 800208c:	d11c      	bne.n	80020c8 <HAL_RCC_OscConfig+0x18c>
 800208e:	4b46      	ldr	r3, [pc, #280]	; (80021a8 <HAL_RCC_OscConfig+0x26c>)
 8002090:	685b      	ldr	r3, [r3, #4]
 8002092:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002096:	2b00      	cmp	r3, #0
 8002098:	d116      	bne.n	80020c8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800209a:	4b43      	ldr	r3, [pc, #268]	; (80021a8 <HAL_RCC_OscConfig+0x26c>)
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f003 0302 	and.w	r3, r3, #2
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d005      	beq.n	80020b2 <HAL_RCC_OscConfig+0x176>
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	691b      	ldr	r3, [r3, #16]
 80020aa:	2b01      	cmp	r3, #1
 80020ac:	d001      	beq.n	80020b2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80020ae:	2301      	movs	r3, #1
 80020b0:	e1c0      	b.n	8002434 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020b2:	4b3d      	ldr	r3, [pc, #244]	; (80021a8 <HAL_RCC_OscConfig+0x26c>)
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	695b      	ldr	r3, [r3, #20]
 80020be:	00db      	lsls	r3, r3, #3
 80020c0:	4939      	ldr	r1, [pc, #228]	; (80021a8 <HAL_RCC_OscConfig+0x26c>)
 80020c2:	4313      	orrs	r3, r2
 80020c4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020c6:	e03a      	b.n	800213e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	691b      	ldr	r3, [r3, #16]
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d020      	beq.n	8002112 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80020d0:	4b36      	ldr	r3, [pc, #216]	; (80021ac <HAL_RCC_OscConfig+0x270>)
 80020d2:	2201      	movs	r2, #1
 80020d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020d6:	f7fe fe0b 	bl	8000cf0 <HAL_GetTick>
 80020da:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020dc:	e008      	b.n	80020f0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80020de:	f7fe fe07 	bl	8000cf0 <HAL_GetTick>
 80020e2:	4602      	mov	r2, r0
 80020e4:	693b      	ldr	r3, [r7, #16]
 80020e6:	1ad3      	subs	r3, r2, r3
 80020e8:	2b02      	cmp	r3, #2
 80020ea:	d901      	bls.n	80020f0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80020ec:	2303      	movs	r3, #3
 80020ee:	e1a1      	b.n	8002434 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020f0:	4b2d      	ldr	r3, [pc, #180]	; (80021a8 <HAL_RCC_OscConfig+0x26c>)
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f003 0302 	and.w	r3, r3, #2
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d0f0      	beq.n	80020de <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020fc:	4b2a      	ldr	r3, [pc, #168]	; (80021a8 <HAL_RCC_OscConfig+0x26c>)
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	695b      	ldr	r3, [r3, #20]
 8002108:	00db      	lsls	r3, r3, #3
 800210a:	4927      	ldr	r1, [pc, #156]	; (80021a8 <HAL_RCC_OscConfig+0x26c>)
 800210c:	4313      	orrs	r3, r2
 800210e:	600b      	str	r3, [r1, #0]
 8002110:	e015      	b.n	800213e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002112:	4b26      	ldr	r3, [pc, #152]	; (80021ac <HAL_RCC_OscConfig+0x270>)
 8002114:	2200      	movs	r2, #0
 8002116:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002118:	f7fe fdea 	bl	8000cf0 <HAL_GetTick>
 800211c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800211e:	e008      	b.n	8002132 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002120:	f7fe fde6 	bl	8000cf0 <HAL_GetTick>
 8002124:	4602      	mov	r2, r0
 8002126:	693b      	ldr	r3, [r7, #16]
 8002128:	1ad3      	subs	r3, r2, r3
 800212a:	2b02      	cmp	r3, #2
 800212c:	d901      	bls.n	8002132 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800212e:	2303      	movs	r3, #3
 8002130:	e180      	b.n	8002434 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002132:	4b1d      	ldr	r3, [pc, #116]	; (80021a8 <HAL_RCC_OscConfig+0x26c>)
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f003 0302 	and.w	r3, r3, #2
 800213a:	2b00      	cmp	r3, #0
 800213c:	d1f0      	bne.n	8002120 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f003 0308 	and.w	r3, r3, #8
 8002146:	2b00      	cmp	r3, #0
 8002148:	d03a      	beq.n	80021c0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	699b      	ldr	r3, [r3, #24]
 800214e:	2b00      	cmp	r3, #0
 8002150:	d019      	beq.n	8002186 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002152:	4b17      	ldr	r3, [pc, #92]	; (80021b0 <HAL_RCC_OscConfig+0x274>)
 8002154:	2201      	movs	r2, #1
 8002156:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002158:	f7fe fdca 	bl	8000cf0 <HAL_GetTick>
 800215c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800215e:	e008      	b.n	8002172 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002160:	f7fe fdc6 	bl	8000cf0 <HAL_GetTick>
 8002164:	4602      	mov	r2, r0
 8002166:	693b      	ldr	r3, [r7, #16]
 8002168:	1ad3      	subs	r3, r2, r3
 800216a:	2b02      	cmp	r3, #2
 800216c:	d901      	bls.n	8002172 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800216e:	2303      	movs	r3, #3
 8002170:	e160      	b.n	8002434 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002172:	4b0d      	ldr	r3, [pc, #52]	; (80021a8 <HAL_RCC_OscConfig+0x26c>)
 8002174:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002176:	f003 0302 	and.w	r3, r3, #2
 800217a:	2b00      	cmp	r3, #0
 800217c:	d0f0      	beq.n	8002160 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800217e:	2001      	movs	r0, #1
 8002180:	f000 face 	bl	8002720 <RCC_Delay>
 8002184:	e01c      	b.n	80021c0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002186:	4b0a      	ldr	r3, [pc, #40]	; (80021b0 <HAL_RCC_OscConfig+0x274>)
 8002188:	2200      	movs	r2, #0
 800218a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800218c:	f7fe fdb0 	bl	8000cf0 <HAL_GetTick>
 8002190:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002192:	e00f      	b.n	80021b4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002194:	f7fe fdac 	bl	8000cf0 <HAL_GetTick>
 8002198:	4602      	mov	r2, r0
 800219a:	693b      	ldr	r3, [r7, #16]
 800219c:	1ad3      	subs	r3, r2, r3
 800219e:	2b02      	cmp	r3, #2
 80021a0:	d908      	bls.n	80021b4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80021a2:	2303      	movs	r3, #3
 80021a4:	e146      	b.n	8002434 <HAL_RCC_OscConfig+0x4f8>
 80021a6:	bf00      	nop
 80021a8:	40021000 	.word	0x40021000
 80021ac:	42420000 	.word	0x42420000
 80021b0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021b4:	4b92      	ldr	r3, [pc, #584]	; (8002400 <HAL_RCC_OscConfig+0x4c4>)
 80021b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021b8:	f003 0302 	and.w	r3, r3, #2
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d1e9      	bne.n	8002194 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f003 0304 	and.w	r3, r3, #4
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	f000 80a6 	beq.w	800231a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80021ce:	2300      	movs	r3, #0
 80021d0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80021d2:	4b8b      	ldr	r3, [pc, #556]	; (8002400 <HAL_RCC_OscConfig+0x4c4>)
 80021d4:	69db      	ldr	r3, [r3, #28]
 80021d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d10d      	bne.n	80021fa <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80021de:	4b88      	ldr	r3, [pc, #544]	; (8002400 <HAL_RCC_OscConfig+0x4c4>)
 80021e0:	69db      	ldr	r3, [r3, #28]
 80021e2:	4a87      	ldr	r2, [pc, #540]	; (8002400 <HAL_RCC_OscConfig+0x4c4>)
 80021e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021e8:	61d3      	str	r3, [r2, #28]
 80021ea:	4b85      	ldr	r3, [pc, #532]	; (8002400 <HAL_RCC_OscConfig+0x4c4>)
 80021ec:	69db      	ldr	r3, [r3, #28]
 80021ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021f2:	60bb      	str	r3, [r7, #8]
 80021f4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80021f6:	2301      	movs	r3, #1
 80021f8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021fa:	4b82      	ldr	r3, [pc, #520]	; (8002404 <HAL_RCC_OscConfig+0x4c8>)
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002202:	2b00      	cmp	r3, #0
 8002204:	d118      	bne.n	8002238 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002206:	4b7f      	ldr	r3, [pc, #508]	; (8002404 <HAL_RCC_OscConfig+0x4c8>)
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	4a7e      	ldr	r2, [pc, #504]	; (8002404 <HAL_RCC_OscConfig+0x4c8>)
 800220c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002210:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002212:	f7fe fd6d 	bl	8000cf0 <HAL_GetTick>
 8002216:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002218:	e008      	b.n	800222c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800221a:	f7fe fd69 	bl	8000cf0 <HAL_GetTick>
 800221e:	4602      	mov	r2, r0
 8002220:	693b      	ldr	r3, [r7, #16]
 8002222:	1ad3      	subs	r3, r2, r3
 8002224:	2b64      	cmp	r3, #100	; 0x64
 8002226:	d901      	bls.n	800222c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002228:	2303      	movs	r3, #3
 800222a:	e103      	b.n	8002434 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800222c:	4b75      	ldr	r3, [pc, #468]	; (8002404 <HAL_RCC_OscConfig+0x4c8>)
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002234:	2b00      	cmp	r3, #0
 8002236:	d0f0      	beq.n	800221a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	68db      	ldr	r3, [r3, #12]
 800223c:	2b01      	cmp	r3, #1
 800223e:	d106      	bne.n	800224e <HAL_RCC_OscConfig+0x312>
 8002240:	4b6f      	ldr	r3, [pc, #444]	; (8002400 <HAL_RCC_OscConfig+0x4c4>)
 8002242:	6a1b      	ldr	r3, [r3, #32]
 8002244:	4a6e      	ldr	r2, [pc, #440]	; (8002400 <HAL_RCC_OscConfig+0x4c4>)
 8002246:	f043 0301 	orr.w	r3, r3, #1
 800224a:	6213      	str	r3, [r2, #32]
 800224c:	e02d      	b.n	80022aa <HAL_RCC_OscConfig+0x36e>
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	68db      	ldr	r3, [r3, #12]
 8002252:	2b00      	cmp	r3, #0
 8002254:	d10c      	bne.n	8002270 <HAL_RCC_OscConfig+0x334>
 8002256:	4b6a      	ldr	r3, [pc, #424]	; (8002400 <HAL_RCC_OscConfig+0x4c4>)
 8002258:	6a1b      	ldr	r3, [r3, #32]
 800225a:	4a69      	ldr	r2, [pc, #420]	; (8002400 <HAL_RCC_OscConfig+0x4c4>)
 800225c:	f023 0301 	bic.w	r3, r3, #1
 8002260:	6213      	str	r3, [r2, #32]
 8002262:	4b67      	ldr	r3, [pc, #412]	; (8002400 <HAL_RCC_OscConfig+0x4c4>)
 8002264:	6a1b      	ldr	r3, [r3, #32]
 8002266:	4a66      	ldr	r2, [pc, #408]	; (8002400 <HAL_RCC_OscConfig+0x4c4>)
 8002268:	f023 0304 	bic.w	r3, r3, #4
 800226c:	6213      	str	r3, [r2, #32]
 800226e:	e01c      	b.n	80022aa <HAL_RCC_OscConfig+0x36e>
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	68db      	ldr	r3, [r3, #12]
 8002274:	2b05      	cmp	r3, #5
 8002276:	d10c      	bne.n	8002292 <HAL_RCC_OscConfig+0x356>
 8002278:	4b61      	ldr	r3, [pc, #388]	; (8002400 <HAL_RCC_OscConfig+0x4c4>)
 800227a:	6a1b      	ldr	r3, [r3, #32]
 800227c:	4a60      	ldr	r2, [pc, #384]	; (8002400 <HAL_RCC_OscConfig+0x4c4>)
 800227e:	f043 0304 	orr.w	r3, r3, #4
 8002282:	6213      	str	r3, [r2, #32]
 8002284:	4b5e      	ldr	r3, [pc, #376]	; (8002400 <HAL_RCC_OscConfig+0x4c4>)
 8002286:	6a1b      	ldr	r3, [r3, #32]
 8002288:	4a5d      	ldr	r2, [pc, #372]	; (8002400 <HAL_RCC_OscConfig+0x4c4>)
 800228a:	f043 0301 	orr.w	r3, r3, #1
 800228e:	6213      	str	r3, [r2, #32]
 8002290:	e00b      	b.n	80022aa <HAL_RCC_OscConfig+0x36e>
 8002292:	4b5b      	ldr	r3, [pc, #364]	; (8002400 <HAL_RCC_OscConfig+0x4c4>)
 8002294:	6a1b      	ldr	r3, [r3, #32]
 8002296:	4a5a      	ldr	r2, [pc, #360]	; (8002400 <HAL_RCC_OscConfig+0x4c4>)
 8002298:	f023 0301 	bic.w	r3, r3, #1
 800229c:	6213      	str	r3, [r2, #32]
 800229e:	4b58      	ldr	r3, [pc, #352]	; (8002400 <HAL_RCC_OscConfig+0x4c4>)
 80022a0:	6a1b      	ldr	r3, [r3, #32]
 80022a2:	4a57      	ldr	r2, [pc, #348]	; (8002400 <HAL_RCC_OscConfig+0x4c4>)
 80022a4:	f023 0304 	bic.w	r3, r3, #4
 80022a8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	68db      	ldr	r3, [r3, #12]
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d015      	beq.n	80022de <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022b2:	f7fe fd1d 	bl	8000cf0 <HAL_GetTick>
 80022b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022b8:	e00a      	b.n	80022d0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022ba:	f7fe fd19 	bl	8000cf0 <HAL_GetTick>
 80022be:	4602      	mov	r2, r0
 80022c0:	693b      	ldr	r3, [r7, #16]
 80022c2:	1ad3      	subs	r3, r2, r3
 80022c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80022c8:	4293      	cmp	r3, r2
 80022ca:	d901      	bls.n	80022d0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80022cc:	2303      	movs	r3, #3
 80022ce:	e0b1      	b.n	8002434 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022d0:	4b4b      	ldr	r3, [pc, #300]	; (8002400 <HAL_RCC_OscConfig+0x4c4>)
 80022d2:	6a1b      	ldr	r3, [r3, #32]
 80022d4:	f003 0302 	and.w	r3, r3, #2
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d0ee      	beq.n	80022ba <HAL_RCC_OscConfig+0x37e>
 80022dc:	e014      	b.n	8002308 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022de:	f7fe fd07 	bl	8000cf0 <HAL_GetTick>
 80022e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80022e4:	e00a      	b.n	80022fc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022e6:	f7fe fd03 	bl	8000cf0 <HAL_GetTick>
 80022ea:	4602      	mov	r2, r0
 80022ec:	693b      	ldr	r3, [r7, #16]
 80022ee:	1ad3      	subs	r3, r2, r3
 80022f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80022f4:	4293      	cmp	r3, r2
 80022f6:	d901      	bls.n	80022fc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80022f8:	2303      	movs	r3, #3
 80022fa:	e09b      	b.n	8002434 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80022fc:	4b40      	ldr	r3, [pc, #256]	; (8002400 <HAL_RCC_OscConfig+0x4c4>)
 80022fe:	6a1b      	ldr	r3, [r3, #32]
 8002300:	f003 0302 	and.w	r3, r3, #2
 8002304:	2b00      	cmp	r3, #0
 8002306:	d1ee      	bne.n	80022e6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002308:	7dfb      	ldrb	r3, [r7, #23]
 800230a:	2b01      	cmp	r3, #1
 800230c:	d105      	bne.n	800231a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800230e:	4b3c      	ldr	r3, [pc, #240]	; (8002400 <HAL_RCC_OscConfig+0x4c4>)
 8002310:	69db      	ldr	r3, [r3, #28]
 8002312:	4a3b      	ldr	r2, [pc, #236]	; (8002400 <HAL_RCC_OscConfig+0x4c4>)
 8002314:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002318:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	69db      	ldr	r3, [r3, #28]
 800231e:	2b00      	cmp	r3, #0
 8002320:	f000 8087 	beq.w	8002432 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002324:	4b36      	ldr	r3, [pc, #216]	; (8002400 <HAL_RCC_OscConfig+0x4c4>)
 8002326:	685b      	ldr	r3, [r3, #4]
 8002328:	f003 030c 	and.w	r3, r3, #12
 800232c:	2b08      	cmp	r3, #8
 800232e:	d061      	beq.n	80023f4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	69db      	ldr	r3, [r3, #28]
 8002334:	2b02      	cmp	r3, #2
 8002336:	d146      	bne.n	80023c6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002338:	4b33      	ldr	r3, [pc, #204]	; (8002408 <HAL_RCC_OscConfig+0x4cc>)
 800233a:	2200      	movs	r2, #0
 800233c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800233e:	f7fe fcd7 	bl	8000cf0 <HAL_GetTick>
 8002342:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002344:	e008      	b.n	8002358 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002346:	f7fe fcd3 	bl	8000cf0 <HAL_GetTick>
 800234a:	4602      	mov	r2, r0
 800234c:	693b      	ldr	r3, [r7, #16]
 800234e:	1ad3      	subs	r3, r2, r3
 8002350:	2b02      	cmp	r3, #2
 8002352:	d901      	bls.n	8002358 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002354:	2303      	movs	r3, #3
 8002356:	e06d      	b.n	8002434 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002358:	4b29      	ldr	r3, [pc, #164]	; (8002400 <HAL_RCC_OscConfig+0x4c4>)
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002360:	2b00      	cmp	r3, #0
 8002362:	d1f0      	bne.n	8002346 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	6a1b      	ldr	r3, [r3, #32]
 8002368:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800236c:	d108      	bne.n	8002380 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800236e:	4b24      	ldr	r3, [pc, #144]	; (8002400 <HAL_RCC_OscConfig+0x4c4>)
 8002370:	685b      	ldr	r3, [r3, #4]
 8002372:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	689b      	ldr	r3, [r3, #8]
 800237a:	4921      	ldr	r1, [pc, #132]	; (8002400 <HAL_RCC_OscConfig+0x4c4>)
 800237c:	4313      	orrs	r3, r2
 800237e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002380:	4b1f      	ldr	r3, [pc, #124]	; (8002400 <HAL_RCC_OscConfig+0x4c4>)
 8002382:	685b      	ldr	r3, [r3, #4]
 8002384:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	6a19      	ldr	r1, [r3, #32]
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002390:	430b      	orrs	r3, r1
 8002392:	491b      	ldr	r1, [pc, #108]	; (8002400 <HAL_RCC_OscConfig+0x4c4>)
 8002394:	4313      	orrs	r3, r2
 8002396:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002398:	4b1b      	ldr	r3, [pc, #108]	; (8002408 <HAL_RCC_OscConfig+0x4cc>)
 800239a:	2201      	movs	r2, #1
 800239c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800239e:	f7fe fca7 	bl	8000cf0 <HAL_GetTick>
 80023a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80023a4:	e008      	b.n	80023b8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023a6:	f7fe fca3 	bl	8000cf0 <HAL_GetTick>
 80023aa:	4602      	mov	r2, r0
 80023ac:	693b      	ldr	r3, [r7, #16]
 80023ae:	1ad3      	subs	r3, r2, r3
 80023b0:	2b02      	cmp	r3, #2
 80023b2:	d901      	bls.n	80023b8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80023b4:	2303      	movs	r3, #3
 80023b6:	e03d      	b.n	8002434 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80023b8:	4b11      	ldr	r3, [pc, #68]	; (8002400 <HAL_RCC_OscConfig+0x4c4>)
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d0f0      	beq.n	80023a6 <HAL_RCC_OscConfig+0x46a>
 80023c4:	e035      	b.n	8002432 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023c6:	4b10      	ldr	r3, [pc, #64]	; (8002408 <HAL_RCC_OscConfig+0x4cc>)
 80023c8:	2200      	movs	r2, #0
 80023ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023cc:	f7fe fc90 	bl	8000cf0 <HAL_GetTick>
 80023d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80023d2:	e008      	b.n	80023e6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023d4:	f7fe fc8c 	bl	8000cf0 <HAL_GetTick>
 80023d8:	4602      	mov	r2, r0
 80023da:	693b      	ldr	r3, [r7, #16]
 80023dc:	1ad3      	subs	r3, r2, r3
 80023de:	2b02      	cmp	r3, #2
 80023e0:	d901      	bls.n	80023e6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80023e2:	2303      	movs	r3, #3
 80023e4:	e026      	b.n	8002434 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80023e6:	4b06      	ldr	r3, [pc, #24]	; (8002400 <HAL_RCC_OscConfig+0x4c4>)
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d1f0      	bne.n	80023d4 <HAL_RCC_OscConfig+0x498>
 80023f2:	e01e      	b.n	8002432 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	69db      	ldr	r3, [r3, #28]
 80023f8:	2b01      	cmp	r3, #1
 80023fa:	d107      	bne.n	800240c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80023fc:	2301      	movs	r3, #1
 80023fe:	e019      	b.n	8002434 <HAL_RCC_OscConfig+0x4f8>
 8002400:	40021000 	.word	0x40021000
 8002404:	40007000 	.word	0x40007000
 8002408:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800240c:	4b0b      	ldr	r3, [pc, #44]	; (800243c <HAL_RCC_OscConfig+0x500>)
 800240e:	685b      	ldr	r3, [r3, #4]
 8002410:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	6a1b      	ldr	r3, [r3, #32]
 800241c:	429a      	cmp	r2, r3
 800241e:	d106      	bne.n	800242e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800242a:	429a      	cmp	r2, r3
 800242c:	d001      	beq.n	8002432 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800242e:	2301      	movs	r3, #1
 8002430:	e000      	b.n	8002434 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002432:	2300      	movs	r3, #0
}
 8002434:	4618      	mov	r0, r3
 8002436:	3718      	adds	r7, #24
 8002438:	46bd      	mov	sp, r7
 800243a:	bd80      	pop	{r7, pc}
 800243c:	40021000 	.word	0x40021000

08002440 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	b084      	sub	sp, #16
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
 8002448:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	2b00      	cmp	r3, #0
 800244e:	d101      	bne.n	8002454 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002450:	2301      	movs	r3, #1
 8002452:	e0d0      	b.n	80025f6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002454:	4b6a      	ldr	r3, [pc, #424]	; (8002600 <HAL_RCC_ClockConfig+0x1c0>)
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f003 0307 	and.w	r3, r3, #7
 800245c:	683a      	ldr	r2, [r7, #0]
 800245e:	429a      	cmp	r2, r3
 8002460:	d910      	bls.n	8002484 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002462:	4b67      	ldr	r3, [pc, #412]	; (8002600 <HAL_RCC_ClockConfig+0x1c0>)
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f023 0207 	bic.w	r2, r3, #7
 800246a:	4965      	ldr	r1, [pc, #404]	; (8002600 <HAL_RCC_ClockConfig+0x1c0>)
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	4313      	orrs	r3, r2
 8002470:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002472:	4b63      	ldr	r3, [pc, #396]	; (8002600 <HAL_RCC_ClockConfig+0x1c0>)
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f003 0307 	and.w	r3, r3, #7
 800247a:	683a      	ldr	r2, [r7, #0]
 800247c:	429a      	cmp	r2, r3
 800247e:	d001      	beq.n	8002484 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002480:	2301      	movs	r3, #1
 8002482:	e0b8      	b.n	80025f6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f003 0302 	and.w	r3, r3, #2
 800248c:	2b00      	cmp	r3, #0
 800248e:	d020      	beq.n	80024d2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f003 0304 	and.w	r3, r3, #4
 8002498:	2b00      	cmp	r3, #0
 800249a:	d005      	beq.n	80024a8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800249c:	4b59      	ldr	r3, [pc, #356]	; (8002604 <HAL_RCC_ClockConfig+0x1c4>)
 800249e:	685b      	ldr	r3, [r3, #4]
 80024a0:	4a58      	ldr	r2, [pc, #352]	; (8002604 <HAL_RCC_ClockConfig+0x1c4>)
 80024a2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80024a6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f003 0308 	and.w	r3, r3, #8
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d005      	beq.n	80024c0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80024b4:	4b53      	ldr	r3, [pc, #332]	; (8002604 <HAL_RCC_ClockConfig+0x1c4>)
 80024b6:	685b      	ldr	r3, [r3, #4]
 80024b8:	4a52      	ldr	r2, [pc, #328]	; (8002604 <HAL_RCC_ClockConfig+0x1c4>)
 80024ba:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80024be:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80024c0:	4b50      	ldr	r3, [pc, #320]	; (8002604 <HAL_RCC_ClockConfig+0x1c4>)
 80024c2:	685b      	ldr	r3, [r3, #4]
 80024c4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	689b      	ldr	r3, [r3, #8]
 80024cc:	494d      	ldr	r1, [pc, #308]	; (8002604 <HAL_RCC_ClockConfig+0x1c4>)
 80024ce:	4313      	orrs	r3, r2
 80024d0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f003 0301 	and.w	r3, r3, #1
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d040      	beq.n	8002560 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	685b      	ldr	r3, [r3, #4]
 80024e2:	2b01      	cmp	r3, #1
 80024e4:	d107      	bne.n	80024f6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024e6:	4b47      	ldr	r3, [pc, #284]	; (8002604 <HAL_RCC_ClockConfig+0x1c4>)
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d115      	bne.n	800251e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024f2:	2301      	movs	r3, #1
 80024f4:	e07f      	b.n	80025f6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	685b      	ldr	r3, [r3, #4]
 80024fa:	2b02      	cmp	r3, #2
 80024fc:	d107      	bne.n	800250e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024fe:	4b41      	ldr	r3, [pc, #260]	; (8002604 <HAL_RCC_ClockConfig+0x1c4>)
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002506:	2b00      	cmp	r3, #0
 8002508:	d109      	bne.n	800251e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800250a:	2301      	movs	r3, #1
 800250c:	e073      	b.n	80025f6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800250e:	4b3d      	ldr	r3, [pc, #244]	; (8002604 <HAL_RCC_ClockConfig+0x1c4>)
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f003 0302 	and.w	r3, r3, #2
 8002516:	2b00      	cmp	r3, #0
 8002518:	d101      	bne.n	800251e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800251a:	2301      	movs	r3, #1
 800251c:	e06b      	b.n	80025f6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800251e:	4b39      	ldr	r3, [pc, #228]	; (8002604 <HAL_RCC_ClockConfig+0x1c4>)
 8002520:	685b      	ldr	r3, [r3, #4]
 8002522:	f023 0203 	bic.w	r2, r3, #3
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	685b      	ldr	r3, [r3, #4]
 800252a:	4936      	ldr	r1, [pc, #216]	; (8002604 <HAL_RCC_ClockConfig+0x1c4>)
 800252c:	4313      	orrs	r3, r2
 800252e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002530:	f7fe fbde 	bl	8000cf0 <HAL_GetTick>
 8002534:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002536:	e00a      	b.n	800254e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002538:	f7fe fbda 	bl	8000cf0 <HAL_GetTick>
 800253c:	4602      	mov	r2, r0
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	1ad3      	subs	r3, r2, r3
 8002542:	f241 3288 	movw	r2, #5000	; 0x1388
 8002546:	4293      	cmp	r3, r2
 8002548:	d901      	bls.n	800254e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800254a:	2303      	movs	r3, #3
 800254c:	e053      	b.n	80025f6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800254e:	4b2d      	ldr	r3, [pc, #180]	; (8002604 <HAL_RCC_ClockConfig+0x1c4>)
 8002550:	685b      	ldr	r3, [r3, #4]
 8002552:	f003 020c 	and.w	r2, r3, #12
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	685b      	ldr	r3, [r3, #4]
 800255a:	009b      	lsls	r3, r3, #2
 800255c:	429a      	cmp	r2, r3
 800255e:	d1eb      	bne.n	8002538 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002560:	4b27      	ldr	r3, [pc, #156]	; (8002600 <HAL_RCC_ClockConfig+0x1c0>)
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f003 0307 	and.w	r3, r3, #7
 8002568:	683a      	ldr	r2, [r7, #0]
 800256a:	429a      	cmp	r2, r3
 800256c:	d210      	bcs.n	8002590 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800256e:	4b24      	ldr	r3, [pc, #144]	; (8002600 <HAL_RCC_ClockConfig+0x1c0>)
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f023 0207 	bic.w	r2, r3, #7
 8002576:	4922      	ldr	r1, [pc, #136]	; (8002600 <HAL_RCC_ClockConfig+0x1c0>)
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	4313      	orrs	r3, r2
 800257c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800257e:	4b20      	ldr	r3, [pc, #128]	; (8002600 <HAL_RCC_ClockConfig+0x1c0>)
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f003 0307 	and.w	r3, r3, #7
 8002586:	683a      	ldr	r2, [r7, #0]
 8002588:	429a      	cmp	r2, r3
 800258a:	d001      	beq.n	8002590 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800258c:	2301      	movs	r3, #1
 800258e:	e032      	b.n	80025f6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f003 0304 	and.w	r3, r3, #4
 8002598:	2b00      	cmp	r3, #0
 800259a:	d008      	beq.n	80025ae <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800259c:	4b19      	ldr	r3, [pc, #100]	; (8002604 <HAL_RCC_ClockConfig+0x1c4>)
 800259e:	685b      	ldr	r3, [r3, #4]
 80025a0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	68db      	ldr	r3, [r3, #12]
 80025a8:	4916      	ldr	r1, [pc, #88]	; (8002604 <HAL_RCC_ClockConfig+0x1c4>)
 80025aa:	4313      	orrs	r3, r2
 80025ac:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f003 0308 	and.w	r3, r3, #8
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d009      	beq.n	80025ce <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80025ba:	4b12      	ldr	r3, [pc, #72]	; (8002604 <HAL_RCC_ClockConfig+0x1c4>)
 80025bc:	685b      	ldr	r3, [r3, #4]
 80025be:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	691b      	ldr	r3, [r3, #16]
 80025c6:	00db      	lsls	r3, r3, #3
 80025c8:	490e      	ldr	r1, [pc, #56]	; (8002604 <HAL_RCC_ClockConfig+0x1c4>)
 80025ca:	4313      	orrs	r3, r2
 80025cc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80025ce:	f000 f821 	bl	8002614 <HAL_RCC_GetSysClockFreq>
 80025d2:	4602      	mov	r2, r0
 80025d4:	4b0b      	ldr	r3, [pc, #44]	; (8002604 <HAL_RCC_ClockConfig+0x1c4>)
 80025d6:	685b      	ldr	r3, [r3, #4]
 80025d8:	091b      	lsrs	r3, r3, #4
 80025da:	f003 030f 	and.w	r3, r3, #15
 80025de:	490a      	ldr	r1, [pc, #40]	; (8002608 <HAL_RCC_ClockConfig+0x1c8>)
 80025e0:	5ccb      	ldrb	r3, [r1, r3]
 80025e2:	fa22 f303 	lsr.w	r3, r2, r3
 80025e6:	4a09      	ldr	r2, [pc, #36]	; (800260c <HAL_RCC_ClockConfig+0x1cc>)
 80025e8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80025ea:	4b09      	ldr	r3, [pc, #36]	; (8002610 <HAL_RCC_ClockConfig+0x1d0>)
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	4618      	mov	r0, r3
 80025f0:	f7fe fb3c 	bl	8000c6c <HAL_InitTick>

  return HAL_OK;
 80025f4:	2300      	movs	r3, #0
}
 80025f6:	4618      	mov	r0, r3
 80025f8:	3710      	adds	r7, #16
 80025fa:	46bd      	mov	sp, r7
 80025fc:	bd80      	pop	{r7, pc}
 80025fe:	bf00      	nop
 8002600:	40022000 	.word	0x40022000
 8002604:	40021000 	.word	0x40021000
 8002608:	08004920 	.word	0x08004920
 800260c:	20000000 	.word	0x20000000
 8002610:	2000000c 	.word	0x2000000c

08002614 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002614:	b480      	push	{r7}
 8002616:	b087      	sub	sp, #28
 8002618:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800261a:	2300      	movs	r3, #0
 800261c:	60fb      	str	r3, [r7, #12]
 800261e:	2300      	movs	r3, #0
 8002620:	60bb      	str	r3, [r7, #8]
 8002622:	2300      	movs	r3, #0
 8002624:	617b      	str	r3, [r7, #20]
 8002626:	2300      	movs	r3, #0
 8002628:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800262a:	2300      	movs	r3, #0
 800262c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800262e:	4b1e      	ldr	r3, [pc, #120]	; (80026a8 <HAL_RCC_GetSysClockFreq+0x94>)
 8002630:	685b      	ldr	r3, [r3, #4]
 8002632:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	f003 030c 	and.w	r3, r3, #12
 800263a:	2b04      	cmp	r3, #4
 800263c:	d002      	beq.n	8002644 <HAL_RCC_GetSysClockFreq+0x30>
 800263e:	2b08      	cmp	r3, #8
 8002640:	d003      	beq.n	800264a <HAL_RCC_GetSysClockFreq+0x36>
 8002642:	e027      	b.n	8002694 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002644:	4b19      	ldr	r3, [pc, #100]	; (80026ac <HAL_RCC_GetSysClockFreq+0x98>)
 8002646:	613b      	str	r3, [r7, #16]
      break;
 8002648:	e027      	b.n	800269a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	0c9b      	lsrs	r3, r3, #18
 800264e:	f003 030f 	and.w	r3, r3, #15
 8002652:	4a17      	ldr	r2, [pc, #92]	; (80026b0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002654:	5cd3      	ldrb	r3, [r2, r3]
 8002656:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800265e:	2b00      	cmp	r3, #0
 8002660:	d010      	beq.n	8002684 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002662:	4b11      	ldr	r3, [pc, #68]	; (80026a8 <HAL_RCC_GetSysClockFreq+0x94>)
 8002664:	685b      	ldr	r3, [r3, #4]
 8002666:	0c5b      	lsrs	r3, r3, #17
 8002668:	f003 0301 	and.w	r3, r3, #1
 800266c:	4a11      	ldr	r2, [pc, #68]	; (80026b4 <HAL_RCC_GetSysClockFreq+0xa0>)
 800266e:	5cd3      	ldrb	r3, [r2, r3]
 8002670:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	4a0d      	ldr	r2, [pc, #52]	; (80026ac <HAL_RCC_GetSysClockFreq+0x98>)
 8002676:	fb03 f202 	mul.w	r2, r3, r2
 800267a:	68bb      	ldr	r3, [r7, #8]
 800267c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002680:	617b      	str	r3, [r7, #20]
 8002682:	e004      	b.n	800268e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	4a0c      	ldr	r2, [pc, #48]	; (80026b8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002688:	fb02 f303 	mul.w	r3, r2, r3
 800268c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800268e:	697b      	ldr	r3, [r7, #20]
 8002690:	613b      	str	r3, [r7, #16]
      break;
 8002692:	e002      	b.n	800269a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002694:	4b05      	ldr	r3, [pc, #20]	; (80026ac <HAL_RCC_GetSysClockFreq+0x98>)
 8002696:	613b      	str	r3, [r7, #16]
      break;
 8002698:	bf00      	nop
    }
  }
  return sysclockfreq;
 800269a:	693b      	ldr	r3, [r7, #16]
}
 800269c:	4618      	mov	r0, r3
 800269e:	371c      	adds	r7, #28
 80026a0:	46bd      	mov	sp, r7
 80026a2:	bc80      	pop	{r7}
 80026a4:	4770      	bx	lr
 80026a6:	bf00      	nop
 80026a8:	40021000 	.word	0x40021000
 80026ac:	007a1200 	.word	0x007a1200
 80026b0:	08004938 	.word	0x08004938
 80026b4:	08004948 	.word	0x08004948
 80026b8:	003d0900 	.word	0x003d0900

080026bc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80026bc:	b480      	push	{r7}
 80026be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80026c0:	4b02      	ldr	r3, [pc, #8]	; (80026cc <HAL_RCC_GetHCLKFreq+0x10>)
 80026c2:	681b      	ldr	r3, [r3, #0]
}
 80026c4:	4618      	mov	r0, r3
 80026c6:	46bd      	mov	sp, r7
 80026c8:	bc80      	pop	{r7}
 80026ca:	4770      	bx	lr
 80026cc:	20000000 	.word	0x20000000

080026d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80026d4:	f7ff fff2 	bl	80026bc <HAL_RCC_GetHCLKFreq>
 80026d8:	4602      	mov	r2, r0
 80026da:	4b05      	ldr	r3, [pc, #20]	; (80026f0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80026dc:	685b      	ldr	r3, [r3, #4]
 80026de:	0a1b      	lsrs	r3, r3, #8
 80026e0:	f003 0307 	and.w	r3, r3, #7
 80026e4:	4903      	ldr	r1, [pc, #12]	; (80026f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80026e6:	5ccb      	ldrb	r3, [r1, r3]
 80026e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80026ec:	4618      	mov	r0, r3
 80026ee:	bd80      	pop	{r7, pc}
 80026f0:	40021000 	.word	0x40021000
 80026f4:	08004930 	.word	0x08004930

080026f8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80026fc:	f7ff ffde 	bl	80026bc <HAL_RCC_GetHCLKFreq>
 8002700:	4602      	mov	r2, r0
 8002702:	4b05      	ldr	r3, [pc, #20]	; (8002718 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002704:	685b      	ldr	r3, [r3, #4]
 8002706:	0adb      	lsrs	r3, r3, #11
 8002708:	f003 0307 	and.w	r3, r3, #7
 800270c:	4903      	ldr	r1, [pc, #12]	; (800271c <HAL_RCC_GetPCLK2Freq+0x24>)
 800270e:	5ccb      	ldrb	r3, [r1, r3]
 8002710:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002714:	4618      	mov	r0, r3
 8002716:	bd80      	pop	{r7, pc}
 8002718:	40021000 	.word	0x40021000
 800271c:	08004930 	.word	0x08004930

08002720 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002720:	b480      	push	{r7}
 8002722:	b085      	sub	sp, #20
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002728:	4b0a      	ldr	r3, [pc, #40]	; (8002754 <RCC_Delay+0x34>)
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	4a0a      	ldr	r2, [pc, #40]	; (8002758 <RCC_Delay+0x38>)
 800272e:	fba2 2303 	umull	r2, r3, r2, r3
 8002732:	0a5b      	lsrs	r3, r3, #9
 8002734:	687a      	ldr	r2, [r7, #4]
 8002736:	fb02 f303 	mul.w	r3, r2, r3
 800273a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800273c:	bf00      	nop
  }
  while (Delay --);
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	1e5a      	subs	r2, r3, #1
 8002742:	60fa      	str	r2, [r7, #12]
 8002744:	2b00      	cmp	r3, #0
 8002746:	d1f9      	bne.n	800273c <RCC_Delay+0x1c>
}
 8002748:	bf00      	nop
 800274a:	bf00      	nop
 800274c:	3714      	adds	r7, #20
 800274e:	46bd      	mov	sp, r7
 8002750:	bc80      	pop	{r7}
 8002752:	4770      	bx	lr
 8002754:	20000000 	.word	0x20000000
 8002758:	10624dd3 	.word	0x10624dd3

0800275c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800275c:	b580      	push	{r7, lr}
 800275e:	b086      	sub	sp, #24
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002764:	2300      	movs	r3, #0
 8002766:	613b      	str	r3, [r7, #16]
 8002768:	2300      	movs	r3, #0
 800276a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f003 0301 	and.w	r3, r3, #1
 8002774:	2b00      	cmp	r3, #0
 8002776:	d07d      	beq.n	8002874 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8002778:	2300      	movs	r3, #0
 800277a:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800277c:	4b4f      	ldr	r3, [pc, #316]	; (80028bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800277e:	69db      	ldr	r3, [r3, #28]
 8002780:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002784:	2b00      	cmp	r3, #0
 8002786:	d10d      	bne.n	80027a4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002788:	4b4c      	ldr	r3, [pc, #304]	; (80028bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800278a:	69db      	ldr	r3, [r3, #28]
 800278c:	4a4b      	ldr	r2, [pc, #300]	; (80028bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800278e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002792:	61d3      	str	r3, [r2, #28]
 8002794:	4b49      	ldr	r3, [pc, #292]	; (80028bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002796:	69db      	ldr	r3, [r3, #28]
 8002798:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800279c:	60bb      	str	r3, [r7, #8]
 800279e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80027a0:	2301      	movs	r3, #1
 80027a2:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027a4:	4b46      	ldr	r3, [pc, #280]	; (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d118      	bne.n	80027e2 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80027b0:	4b43      	ldr	r3, [pc, #268]	; (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	4a42      	ldr	r2, [pc, #264]	; (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80027b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027ba:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80027bc:	f7fe fa98 	bl	8000cf0 <HAL_GetTick>
 80027c0:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027c2:	e008      	b.n	80027d6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027c4:	f7fe fa94 	bl	8000cf0 <HAL_GetTick>
 80027c8:	4602      	mov	r2, r0
 80027ca:	693b      	ldr	r3, [r7, #16]
 80027cc:	1ad3      	subs	r3, r2, r3
 80027ce:	2b64      	cmp	r3, #100	; 0x64
 80027d0:	d901      	bls.n	80027d6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80027d2:	2303      	movs	r3, #3
 80027d4:	e06d      	b.n	80028b2 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027d6:	4b3a      	ldr	r3, [pc, #232]	; (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d0f0      	beq.n	80027c4 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80027e2:	4b36      	ldr	r3, [pc, #216]	; (80028bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80027e4:	6a1b      	ldr	r3, [r3, #32]
 80027e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80027ea:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d02e      	beq.n	8002850 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	685b      	ldr	r3, [r3, #4]
 80027f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80027fa:	68fa      	ldr	r2, [r7, #12]
 80027fc:	429a      	cmp	r2, r3
 80027fe:	d027      	beq.n	8002850 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002800:	4b2e      	ldr	r3, [pc, #184]	; (80028bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002802:	6a1b      	ldr	r3, [r3, #32]
 8002804:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002808:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800280a:	4b2e      	ldr	r3, [pc, #184]	; (80028c4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800280c:	2201      	movs	r2, #1
 800280e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002810:	4b2c      	ldr	r3, [pc, #176]	; (80028c4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002812:	2200      	movs	r2, #0
 8002814:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002816:	4a29      	ldr	r2, [pc, #164]	; (80028bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	f003 0301 	and.w	r3, r3, #1
 8002822:	2b00      	cmp	r3, #0
 8002824:	d014      	beq.n	8002850 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002826:	f7fe fa63 	bl	8000cf0 <HAL_GetTick>
 800282a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800282c:	e00a      	b.n	8002844 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800282e:	f7fe fa5f 	bl	8000cf0 <HAL_GetTick>
 8002832:	4602      	mov	r2, r0
 8002834:	693b      	ldr	r3, [r7, #16]
 8002836:	1ad3      	subs	r3, r2, r3
 8002838:	f241 3288 	movw	r2, #5000	; 0x1388
 800283c:	4293      	cmp	r3, r2
 800283e:	d901      	bls.n	8002844 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002840:	2303      	movs	r3, #3
 8002842:	e036      	b.n	80028b2 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002844:	4b1d      	ldr	r3, [pc, #116]	; (80028bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002846:	6a1b      	ldr	r3, [r3, #32]
 8002848:	f003 0302 	and.w	r3, r3, #2
 800284c:	2b00      	cmp	r3, #0
 800284e:	d0ee      	beq.n	800282e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002850:	4b1a      	ldr	r3, [pc, #104]	; (80028bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002852:	6a1b      	ldr	r3, [r3, #32]
 8002854:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	685b      	ldr	r3, [r3, #4]
 800285c:	4917      	ldr	r1, [pc, #92]	; (80028bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800285e:	4313      	orrs	r3, r2
 8002860:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002862:	7dfb      	ldrb	r3, [r7, #23]
 8002864:	2b01      	cmp	r3, #1
 8002866:	d105      	bne.n	8002874 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002868:	4b14      	ldr	r3, [pc, #80]	; (80028bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800286a:	69db      	ldr	r3, [r3, #28]
 800286c:	4a13      	ldr	r2, [pc, #76]	; (80028bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800286e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002872:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f003 0302 	and.w	r3, r3, #2
 800287c:	2b00      	cmp	r3, #0
 800287e:	d008      	beq.n	8002892 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002880:	4b0e      	ldr	r3, [pc, #56]	; (80028bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002882:	685b      	ldr	r3, [r3, #4]
 8002884:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	689b      	ldr	r3, [r3, #8]
 800288c:	490b      	ldr	r1, [pc, #44]	; (80028bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800288e:	4313      	orrs	r3, r2
 8002890:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f003 0310 	and.w	r3, r3, #16
 800289a:	2b00      	cmp	r3, #0
 800289c:	d008      	beq.n	80028b0 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800289e:	4b07      	ldr	r3, [pc, #28]	; (80028bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80028a0:	685b      	ldr	r3, [r3, #4]
 80028a2:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	695b      	ldr	r3, [r3, #20]
 80028aa:	4904      	ldr	r1, [pc, #16]	; (80028bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80028ac:	4313      	orrs	r3, r2
 80028ae:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80028b0:	2300      	movs	r3, #0
}
 80028b2:	4618      	mov	r0, r3
 80028b4:	3718      	adds	r7, #24
 80028b6:	46bd      	mov	sp, r7
 80028b8:	bd80      	pop	{r7, pc}
 80028ba:	bf00      	nop
 80028bc:	40021000 	.word	0x40021000
 80028c0:	40007000 	.word	0x40007000
 80028c4:	42420440 	.word	0x42420440

080028c8 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80028c8:	b580      	push	{r7, lr}
 80028ca:	b088      	sub	sp, #32
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 80028d0:	2300      	movs	r3, #0
 80028d2:	617b      	str	r3, [r7, #20]
 80028d4:	2300      	movs	r3, #0
 80028d6:	61fb      	str	r3, [r7, #28]
 80028d8:	2300      	movs	r3, #0
 80028da:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 80028dc:	2300      	movs	r3, #0
 80028de:	60fb      	str	r3, [r7, #12]
 80028e0:	2300      	movs	r3, #0
 80028e2:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	3b01      	subs	r3, #1
 80028e8:	2b0f      	cmp	r3, #15
 80028ea:	f200 80af 	bhi.w	8002a4c <HAL_RCCEx_GetPeriphCLKFreq+0x184>
 80028ee:	a201      	add	r2, pc, #4	; (adr r2, 80028f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2c>)
 80028f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028f4:	080029cb 	.word	0x080029cb
 80028f8:	08002a31 	.word	0x08002a31
 80028fc:	08002a4d 	.word	0x08002a4d
 8002900:	080029bb 	.word	0x080029bb
 8002904:	08002a4d 	.word	0x08002a4d
 8002908:	08002a4d 	.word	0x08002a4d
 800290c:	08002a4d 	.word	0x08002a4d
 8002910:	080029c3 	.word	0x080029c3
 8002914:	08002a4d 	.word	0x08002a4d
 8002918:	08002a4d 	.word	0x08002a4d
 800291c:	08002a4d 	.word	0x08002a4d
 8002920:	08002a4d 	.word	0x08002a4d
 8002924:	08002a4d 	.word	0x08002a4d
 8002928:	08002a4d 	.word	0x08002a4d
 800292c:	08002a4d 	.word	0x08002a4d
 8002930:	08002935 	.word	0x08002935
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
    case RCC_PERIPHCLK_USB:
    {
      /* Get RCC configuration ------------------------------------------------------*/
      temp_reg = RCC->CFGR;
 8002934:	4b4a      	ldr	r3, [pc, #296]	; (8002a60 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 8002936:	685b      	ldr	r3, [r3, #4]
 8002938:	60fb      	str	r3, [r7, #12]

      /* Check if PLL is enabled */
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 800293a:	4b49      	ldr	r3, [pc, #292]	; (8002a60 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002942:	2b00      	cmp	r3, #0
 8002944:	f000 8084 	beq.w	8002a50 <HAL_RCCEx_GetPeriphCLKFreq+0x188>
      {
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	0c9b      	lsrs	r3, r3, #18
 800294c:	f003 030f 	and.w	r3, r3, #15
 8002950:	4a44      	ldr	r2, [pc, #272]	; (8002a64 <HAL_RCCEx_GetPeriphCLKFreq+0x19c>)
 8002952:	5cd3      	ldrb	r3, [r2, r3]
 8002954:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800295c:	2b00      	cmp	r3, #0
 800295e:	d015      	beq.n	800298c <HAL_RCCEx_GetPeriphCLKFreq+0xc4>
        {
#if defined(STM32F105xC) || defined(STM32F107xC) || defined(STM32F100xB)\
 || defined(STM32F100xE)
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002960:	4b3f      	ldr	r3, [pc, #252]	; (8002a60 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 8002962:	685b      	ldr	r3, [r3, #4]
 8002964:	0c5b      	lsrs	r3, r3, #17
 8002966:	f003 0301 	and.w	r3, r3, #1
 800296a:	4a3f      	ldr	r2, [pc, #252]	; (8002a68 <HAL_RCCEx_GetPeriphCLKFreq+0x1a0>)
 800296c:	5cd3      	ldrb	r3, [r2, r3]
 800296e:	617b      	str	r3, [r7, #20]
          if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
          {
            pllclk = pllclk / 2;
          }
#else
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002976:	2b00      	cmp	r3, #0
 8002978:	d00d      	beq.n	8002996 <HAL_RCCEx_GetPeriphCLKFreq+0xce>
          {
            /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 800297a:	4a3c      	ldr	r2, [pc, #240]	; (8002a6c <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>)
 800297c:	697b      	ldr	r3, [r7, #20]
 800297e:	fbb2 f2f3 	udiv	r2, r2, r3
 8002982:	693b      	ldr	r3, [r7, #16]
 8002984:	fb02 f303 	mul.w	r3, r2, r3
 8002988:	61fb      	str	r3, [r7, #28]
 800298a:	e004      	b.n	8002996 <HAL_RCCEx_GetPeriphCLKFreq+0xce>
#endif /* STM32F105xC || STM32F107xC */
        }
        else
        {
          /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800298c:	693b      	ldr	r3, [r7, #16]
 800298e:	4a38      	ldr	r2, [pc, #224]	; (8002a70 <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>)
 8002990:	fb02 f303 	mul.w	r3, r2, r3
 8002994:	61fb      	str	r3, [r7, #28]
          /* Prescaler of 3 selected for USB */
          frequency = (2 * pllclk) / 3;
        }
#else
        /* USBCLK = PLLCLK / USB prescaler */
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8002996:	4b32      	ldr	r3, [pc, #200]	; (8002a60 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 8002998:	685b      	ldr	r3, [r3, #4]
 800299a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800299e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80029a2:	d102      	bne.n	80029aa <HAL_RCCEx_GetPeriphCLKFreq+0xe2>
        {
          /* No prescaler selected for USB */
          frequency = pllclk;
 80029a4:	69fb      	ldr	r3, [r7, #28]
 80029a6:	61bb      	str	r3, [r7, #24]
          /* Prescaler of 1.5 selected for USB */
          frequency = (pllclk * 2) / 3;
        }
#endif
      }
      break;
 80029a8:	e052      	b.n	8002a50 <HAL_RCCEx_GetPeriphCLKFreq+0x188>
          frequency = (pllclk * 2) / 3;
 80029aa:	69fb      	ldr	r3, [r7, #28]
 80029ac:	005b      	lsls	r3, r3, #1
 80029ae:	4a31      	ldr	r2, [pc, #196]	; (8002a74 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>)
 80029b0:	fba2 2303 	umull	r2, r3, r2, r3
 80029b4:	085b      	lsrs	r3, r3, #1
 80029b6:	61bb      	str	r3, [r7, #24]
      break;
 80029b8:	e04a      	b.n	8002a50 <HAL_RCCEx_GetPeriphCLKFreq+0x188>
#if defined(STM32F103xE) || defined(STM32F103xG) || defined(STM32F105xC) || defined(STM32F107xC)
    case RCC_PERIPHCLK_I2S2:
    {
#if defined(STM32F103xE) || defined(STM32F103xG)
      /* SYSCLK used as source clock for I2S2 */
      frequency = HAL_RCC_GetSysClockFreq();
 80029ba:	f7ff fe2b 	bl	8002614 <HAL_RCC_GetSysClockFreq>
 80029be:	61b8      	str	r0, [r7, #24]
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
        }
      }
#endif /* STM32F103xE || STM32F103xG */
      break;
 80029c0:	e049      	b.n	8002a56 <HAL_RCCEx_GetPeriphCLKFreq+0x18e>
    }
    case RCC_PERIPHCLK_I2S3:
    {
#if defined(STM32F103xE) || defined(STM32F103xG)
      /* SYSCLK used as source clock for I2S3 */
      frequency = HAL_RCC_GetSysClockFreq();
 80029c2:	f7ff fe27 	bl	8002614 <HAL_RCC_GetSysClockFreq>
 80029c6:	61b8      	str	r0, [r7, #24]
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
        }
      }
#endif /* STM32F103xE || STM32F103xG */
      break;
 80029c8:	e045      	b.n	8002a56 <HAL_RCCEx_GetPeriphCLKFreq+0x18e>
    }
#endif /* STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */
    case RCC_PERIPHCLK_RTC:
    {
      /* Get RCC BDCR configuration ------------------------------------------------------*/
      temp_reg = RCC->BDCR;
 80029ca:	4b25      	ldr	r3, [pc, #148]	; (8002a60 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 80029cc:	6a1b      	ldr	r3, [r3, #32]
 80029ce:	60fb      	str	r3, [r7, #12]

      /* Check if LSE is ready if RTC clock selection is LSE */
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80029d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80029da:	d108      	bne.n	80029ee <HAL_RCCEx_GetPeriphCLKFreq+0x126>
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	f003 0302 	and.w	r3, r3, #2
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d003      	beq.n	80029ee <HAL_RCCEx_GetPeriphCLKFreq+0x126>
      {
        frequency = LSE_VALUE;
 80029e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80029ea:	61bb      	str	r3, [r7, #24]
 80029ec:	e01f      	b.n	8002a2e <HAL_RCCEx_GetPeriphCLKFreq+0x166>
      }
      /* Check if LSI is ready if RTC clock selection is LSI */
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80029f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80029f8:	d109      	bne.n	8002a0e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 80029fa:	4b19      	ldr	r3, [pc, #100]	; (8002a60 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 80029fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029fe:	f003 0302 	and.w	r3, r3, #2
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d003      	beq.n	8002a0e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      {
        frequency = LSI_VALUE;
 8002a06:	f649 4340 	movw	r3, #40000	; 0x9c40
 8002a0a:	61bb      	str	r3, [r7, #24]
 8002a0c:	e00f      	b.n	8002a2e <HAL_RCCEx_GetPeriphCLKFreq+0x166>
      }
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a14:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002a18:	d11c      	bne.n	8002a54 <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
 8002a1a:	4b11      	ldr	r3, [pc, #68]	; (8002a60 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d016      	beq.n	8002a54 <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
      {
        frequency = HSE_VALUE / 128U;
 8002a26:	f24f 4324 	movw	r3, #62500	; 0xf424
 8002a2a:	61bb      	str	r3, [r7, #24]
      /* Clock not enabled for RTC*/
      else
      {
        /* nothing to do: frequency already initialized to 0U */
      }
      break;
 8002a2c:	e012      	b.n	8002a54 <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
 8002a2e:	e011      	b.n	8002a54 <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
    }
    case RCC_PERIPHCLK_ADC:
    {
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8002a30:	f7ff fe62 	bl	80026f8 <HAL_RCC_GetPCLK2Freq>
 8002a34:	4602      	mov	r2, r0
 8002a36:	4b0a      	ldr	r3, [pc, #40]	; (8002a60 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 8002a38:	685b      	ldr	r3, [r3, #4]
 8002a3a:	0b9b      	lsrs	r3, r3, #14
 8002a3c:	f003 0303 	and.w	r3, r3, #3
 8002a40:	3301      	adds	r3, #1
 8002a42:	005b      	lsls	r3, r3, #1
 8002a44:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a48:	61bb      	str	r3, [r7, #24]
      break;
 8002a4a:	e004      	b.n	8002a56 <HAL_RCCEx_GetPeriphCLKFreq+0x18e>
    }
    default:
    {
      break;
 8002a4c:	bf00      	nop
 8002a4e:	e002      	b.n	8002a56 <HAL_RCCEx_GetPeriphCLKFreq+0x18e>
      break;
 8002a50:	bf00      	nop
 8002a52:	e000      	b.n	8002a56 <HAL_RCCEx_GetPeriphCLKFreq+0x18e>
      break;
 8002a54:	bf00      	nop
    }
  }
  return (frequency);
 8002a56:	69bb      	ldr	r3, [r7, #24]
}
 8002a58:	4618      	mov	r0, r3
 8002a5a:	3720      	adds	r7, #32
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	bd80      	pop	{r7, pc}
 8002a60:	40021000 	.word	0x40021000
 8002a64:	0800494c 	.word	0x0800494c
 8002a68:	0800495c 	.word	0x0800495c
 8002a6c:	007a1200 	.word	0x007a1200
 8002a70:	003d0900 	.word	0x003d0900
 8002a74:	aaaaaaab 	.word	0xaaaaaaab

08002a78 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	b082      	sub	sp, #8
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d101      	bne.n	8002a8a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002a86:	2301      	movs	r3, #1
 8002a88:	e041      	b.n	8002b0e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a90:	b2db      	uxtb	r3, r3
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d106      	bne.n	8002aa4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	2200      	movs	r2, #0
 8002a9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002a9e:	6878      	ldr	r0, [r7, #4]
 8002aa0:	f7fd fe5a 	bl	8000758 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	2202      	movs	r2, #2
 8002aa8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681a      	ldr	r2, [r3, #0]
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	3304      	adds	r3, #4
 8002ab4:	4619      	mov	r1, r3
 8002ab6:	4610      	mov	r0, r2
 8002ab8:	f000 fa6a 	bl	8002f90 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	2201      	movs	r2, #1
 8002ac0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	2201      	movs	r2, #1
 8002ac8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	2201      	movs	r2, #1
 8002ad0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	2201      	movs	r2, #1
 8002ad8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	2201      	movs	r2, #1
 8002ae0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	2201      	movs	r2, #1
 8002ae8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	2201      	movs	r2, #1
 8002af0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	2201      	movs	r2, #1
 8002af8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	2201      	movs	r2, #1
 8002b00:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	2201      	movs	r2, #1
 8002b08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002b0c:	2300      	movs	r3, #0
}
 8002b0e:	4618      	mov	r0, r3
 8002b10:	3708      	adds	r7, #8
 8002b12:	46bd      	mov	sp, r7
 8002b14:	bd80      	pop	{r7, pc}
	...

08002b18 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002b18:	b480      	push	{r7}
 8002b1a:	b085      	sub	sp, #20
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b26:	b2db      	uxtb	r3, r3
 8002b28:	2b01      	cmp	r3, #1
 8002b2a:	d001      	beq.n	8002b30 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002b2c:	2301      	movs	r3, #1
 8002b2e:	e044      	b.n	8002bba <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	2202      	movs	r2, #2
 8002b34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	68da      	ldr	r2, [r3, #12]
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f042 0201 	orr.w	r2, r2, #1
 8002b46:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	4a1d      	ldr	r2, [pc, #116]	; (8002bc4 <HAL_TIM_Base_Start_IT+0xac>)
 8002b4e:	4293      	cmp	r3, r2
 8002b50:	d018      	beq.n	8002b84 <HAL_TIM_Base_Start_IT+0x6c>
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	4a1c      	ldr	r2, [pc, #112]	; (8002bc8 <HAL_TIM_Base_Start_IT+0xb0>)
 8002b58:	4293      	cmp	r3, r2
 8002b5a:	d013      	beq.n	8002b84 <HAL_TIM_Base_Start_IT+0x6c>
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b64:	d00e      	beq.n	8002b84 <HAL_TIM_Base_Start_IT+0x6c>
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	4a18      	ldr	r2, [pc, #96]	; (8002bcc <HAL_TIM_Base_Start_IT+0xb4>)
 8002b6c:	4293      	cmp	r3, r2
 8002b6e:	d009      	beq.n	8002b84 <HAL_TIM_Base_Start_IT+0x6c>
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	4a16      	ldr	r2, [pc, #88]	; (8002bd0 <HAL_TIM_Base_Start_IT+0xb8>)
 8002b76:	4293      	cmp	r3, r2
 8002b78:	d004      	beq.n	8002b84 <HAL_TIM_Base_Start_IT+0x6c>
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	4a15      	ldr	r2, [pc, #84]	; (8002bd4 <HAL_TIM_Base_Start_IT+0xbc>)
 8002b80:	4293      	cmp	r3, r2
 8002b82:	d111      	bne.n	8002ba8 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	689b      	ldr	r3, [r3, #8]
 8002b8a:	f003 0307 	and.w	r3, r3, #7
 8002b8e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	2b06      	cmp	r3, #6
 8002b94:	d010      	beq.n	8002bb8 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	681a      	ldr	r2, [r3, #0]
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f042 0201 	orr.w	r2, r2, #1
 8002ba4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ba6:	e007      	b.n	8002bb8 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	681a      	ldr	r2, [r3, #0]
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f042 0201 	orr.w	r2, r2, #1
 8002bb6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002bb8:	2300      	movs	r3, #0
}
 8002bba:	4618      	mov	r0, r3
 8002bbc:	3714      	adds	r7, #20
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	bc80      	pop	{r7}
 8002bc2:	4770      	bx	lr
 8002bc4:	40012c00 	.word	0x40012c00
 8002bc8:	40013400 	.word	0x40013400
 8002bcc:	40000400 	.word	0x40000400
 8002bd0:	40000800 	.word	0x40000800
 8002bd4:	40000c00 	.word	0x40000c00

08002bd8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	b084      	sub	sp, #16
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	68db      	ldr	r3, [r3, #12]
 8002be6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	691b      	ldr	r3, [r3, #16]
 8002bee:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002bf0:	68bb      	ldr	r3, [r7, #8]
 8002bf2:	f003 0302 	and.w	r3, r3, #2
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d020      	beq.n	8002c3c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	f003 0302 	and.w	r3, r3, #2
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d01b      	beq.n	8002c3c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f06f 0202 	mvn.w	r2, #2
 8002c0c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	2201      	movs	r2, #1
 8002c12:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	699b      	ldr	r3, [r3, #24]
 8002c1a:	f003 0303 	and.w	r3, r3, #3
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d003      	beq.n	8002c2a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002c22:	6878      	ldr	r0, [r7, #4]
 8002c24:	f000 f998 	bl	8002f58 <HAL_TIM_IC_CaptureCallback>
 8002c28:	e005      	b.n	8002c36 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c2a:	6878      	ldr	r0, [r7, #4]
 8002c2c:	f000 f98b 	bl	8002f46 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c30:	6878      	ldr	r0, [r7, #4]
 8002c32:	f000 f99a 	bl	8002f6a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	2200      	movs	r2, #0
 8002c3a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002c3c:	68bb      	ldr	r3, [r7, #8]
 8002c3e:	f003 0304 	and.w	r3, r3, #4
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d020      	beq.n	8002c88 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	f003 0304 	and.w	r3, r3, #4
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d01b      	beq.n	8002c88 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f06f 0204 	mvn.w	r2, #4
 8002c58:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	2202      	movs	r2, #2
 8002c5e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	699b      	ldr	r3, [r3, #24]
 8002c66:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d003      	beq.n	8002c76 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c6e:	6878      	ldr	r0, [r7, #4]
 8002c70:	f000 f972 	bl	8002f58 <HAL_TIM_IC_CaptureCallback>
 8002c74:	e005      	b.n	8002c82 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c76:	6878      	ldr	r0, [r7, #4]
 8002c78:	f000 f965 	bl	8002f46 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c7c:	6878      	ldr	r0, [r7, #4]
 8002c7e:	f000 f974 	bl	8002f6a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	2200      	movs	r2, #0
 8002c86:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002c88:	68bb      	ldr	r3, [r7, #8]
 8002c8a:	f003 0308 	and.w	r3, r3, #8
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d020      	beq.n	8002cd4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	f003 0308 	and.w	r3, r3, #8
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d01b      	beq.n	8002cd4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f06f 0208 	mvn.w	r2, #8
 8002ca4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	2204      	movs	r2, #4
 8002caa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	69db      	ldr	r3, [r3, #28]
 8002cb2:	f003 0303 	and.w	r3, r3, #3
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d003      	beq.n	8002cc2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002cba:	6878      	ldr	r0, [r7, #4]
 8002cbc:	f000 f94c 	bl	8002f58 <HAL_TIM_IC_CaptureCallback>
 8002cc0:	e005      	b.n	8002cce <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002cc2:	6878      	ldr	r0, [r7, #4]
 8002cc4:	f000 f93f 	bl	8002f46 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002cc8:	6878      	ldr	r0, [r7, #4]
 8002cca:	f000 f94e 	bl	8002f6a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002cd4:	68bb      	ldr	r3, [r7, #8]
 8002cd6:	f003 0310 	and.w	r3, r3, #16
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d020      	beq.n	8002d20 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	f003 0310 	and.w	r3, r3, #16
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d01b      	beq.n	8002d20 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f06f 0210 	mvn.w	r2, #16
 8002cf0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	2208      	movs	r2, #8
 8002cf6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	69db      	ldr	r3, [r3, #28]
 8002cfe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d003      	beq.n	8002d0e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d06:	6878      	ldr	r0, [r7, #4]
 8002d08:	f000 f926 	bl	8002f58 <HAL_TIM_IC_CaptureCallback>
 8002d0c:	e005      	b.n	8002d1a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d0e:	6878      	ldr	r0, [r7, #4]
 8002d10:	f000 f919 	bl	8002f46 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d14:	6878      	ldr	r0, [r7, #4]
 8002d16:	f000 f928 	bl	8002f6a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002d20:	68bb      	ldr	r3, [r7, #8]
 8002d22:	f003 0301 	and.w	r3, r3, #1
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d00c      	beq.n	8002d44 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	f003 0301 	and.w	r3, r3, #1
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d007      	beq.n	8002d44 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f06f 0201 	mvn.w	r2, #1
 8002d3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002d3e:	6878      	ldr	r0, [r7, #4]
 8002d40:	f7fd fc8c 	bl	800065c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002d44:	68bb      	ldr	r3, [r7, #8]
 8002d46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d00c      	beq.n	8002d68 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d007      	beq.n	8002d68 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002d60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002d62:	6878      	ldr	r0, [r7, #4]
 8002d64:	f000 faa5 	bl	80032b2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002d68:	68bb      	ldr	r3, [r7, #8]
 8002d6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d00c      	beq.n	8002d8c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d007      	beq.n	8002d8c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002d84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002d86:	6878      	ldr	r0, [r7, #4]
 8002d88:	f000 f8f8 	bl	8002f7c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002d8c:	68bb      	ldr	r3, [r7, #8]
 8002d8e:	f003 0320 	and.w	r3, r3, #32
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d00c      	beq.n	8002db0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	f003 0320 	and.w	r3, r3, #32
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d007      	beq.n	8002db0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f06f 0220 	mvn.w	r2, #32
 8002da8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002daa:	6878      	ldr	r0, [r7, #4]
 8002dac:	f000 fa78 	bl	80032a0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002db0:	bf00      	nop
 8002db2:	3710      	adds	r7, #16
 8002db4:	46bd      	mov	sp, r7
 8002db6:	bd80      	pop	{r7, pc}

08002db8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002db8:	b580      	push	{r7, lr}
 8002dba:	b084      	sub	sp, #16
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]
 8002dc0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002dcc:	2b01      	cmp	r3, #1
 8002dce:	d101      	bne.n	8002dd4 <HAL_TIM_ConfigClockSource+0x1c>
 8002dd0:	2302      	movs	r3, #2
 8002dd2:	e0b4      	b.n	8002f3e <HAL_TIM_ConfigClockSource+0x186>
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	2201      	movs	r2, #1
 8002dd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	2202      	movs	r2, #2
 8002de0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	689b      	ldr	r3, [r3, #8]
 8002dea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002dec:	68bb      	ldr	r3, [r7, #8]
 8002dee:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002df2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002df4:	68bb      	ldr	r3, [r7, #8]
 8002df6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002dfa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	68ba      	ldr	r2, [r7, #8]
 8002e02:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002e04:	683b      	ldr	r3, [r7, #0]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002e0c:	d03e      	beq.n	8002e8c <HAL_TIM_ConfigClockSource+0xd4>
 8002e0e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002e12:	f200 8087 	bhi.w	8002f24 <HAL_TIM_ConfigClockSource+0x16c>
 8002e16:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e1a:	f000 8086 	beq.w	8002f2a <HAL_TIM_ConfigClockSource+0x172>
 8002e1e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e22:	d87f      	bhi.n	8002f24 <HAL_TIM_ConfigClockSource+0x16c>
 8002e24:	2b70      	cmp	r3, #112	; 0x70
 8002e26:	d01a      	beq.n	8002e5e <HAL_TIM_ConfigClockSource+0xa6>
 8002e28:	2b70      	cmp	r3, #112	; 0x70
 8002e2a:	d87b      	bhi.n	8002f24 <HAL_TIM_ConfigClockSource+0x16c>
 8002e2c:	2b60      	cmp	r3, #96	; 0x60
 8002e2e:	d050      	beq.n	8002ed2 <HAL_TIM_ConfigClockSource+0x11a>
 8002e30:	2b60      	cmp	r3, #96	; 0x60
 8002e32:	d877      	bhi.n	8002f24 <HAL_TIM_ConfigClockSource+0x16c>
 8002e34:	2b50      	cmp	r3, #80	; 0x50
 8002e36:	d03c      	beq.n	8002eb2 <HAL_TIM_ConfigClockSource+0xfa>
 8002e38:	2b50      	cmp	r3, #80	; 0x50
 8002e3a:	d873      	bhi.n	8002f24 <HAL_TIM_ConfigClockSource+0x16c>
 8002e3c:	2b40      	cmp	r3, #64	; 0x40
 8002e3e:	d058      	beq.n	8002ef2 <HAL_TIM_ConfigClockSource+0x13a>
 8002e40:	2b40      	cmp	r3, #64	; 0x40
 8002e42:	d86f      	bhi.n	8002f24 <HAL_TIM_ConfigClockSource+0x16c>
 8002e44:	2b30      	cmp	r3, #48	; 0x30
 8002e46:	d064      	beq.n	8002f12 <HAL_TIM_ConfigClockSource+0x15a>
 8002e48:	2b30      	cmp	r3, #48	; 0x30
 8002e4a:	d86b      	bhi.n	8002f24 <HAL_TIM_ConfigClockSource+0x16c>
 8002e4c:	2b20      	cmp	r3, #32
 8002e4e:	d060      	beq.n	8002f12 <HAL_TIM_ConfigClockSource+0x15a>
 8002e50:	2b20      	cmp	r3, #32
 8002e52:	d867      	bhi.n	8002f24 <HAL_TIM_ConfigClockSource+0x16c>
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d05c      	beq.n	8002f12 <HAL_TIM_ConfigClockSource+0x15a>
 8002e58:	2b10      	cmp	r3, #16
 8002e5a:	d05a      	beq.n	8002f12 <HAL_TIM_ConfigClockSource+0x15a>
 8002e5c:	e062      	b.n	8002f24 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002e62:	683b      	ldr	r3, [r7, #0]
 8002e64:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002e66:	683b      	ldr	r3, [r7, #0]
 8002e68:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002e6a:	683b      	ldr	r3, [r7, #0]
 8002e6c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002e6e:	f000 f98c 	bl	800318a <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	689b      	ldr	r3, [r3, #8]
 8002e78:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002e7a:	68bb      	ldr	r3, [r7, #8]
 8002e7c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002e80:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	68ba      	ldr	r2, [r7, #8]
 8002e88:	609a      	str	r2, [r3, #8]
      break;
 8002e8a:	e04f      	b.n	8002f2c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002e94:	683b      	ldr	r3, [r7, #0]
 8002e96:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002e98:	683b      	ldr	r3, [r7, #0]
 8002e9a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002e9c:	f000 f975 	bl	800318a <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	689a      	ldr	r2, [r3, #8]
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002eae:	609a      	str	r2, [r3, #8]
      break;
 8002eb0:	e03c      	b.n	8002f2c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002eb6:	683b      	ldr	r3, [r7, #0]
 8002eb8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002eba:	683b      	ldr	r3, [r7, #0]
 8002ebc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002ebe:	461a      	mov	r2, r3
 8002ec0:	f000 f8ec 	bl	800309c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	2150      	movs	r1, #80	; 0x50
 8002eca:	4618      	mov	r0, r3
 8002ecc:	f000 f943 	bl	8003156 <TIM_ITRx_SetConfig>
      break;
 8002ed0:	e02c      	b.n	8002f2c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002ed6:	683b      	ldr	r3, [r7, #0]
 8002ed8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002eda:	683b      	ldr	r3, [r7, #0]
 8002edc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002ede:	461a      	mov	r2, r3
 8002ee0:	f000 f90a 	bl	80030f8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	2160      	movs	r1, #96	; 0x60
 8002eea:	4618      	mov	r0, r3
 8002eec:	f000 f933 	bl	8003156 <TIM_ITRx_SetConfig>
      break;
 8002ef0:	e01c      	b.n	8002f2c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002ef6:	683b      	ldr	r3, [r7, #0]
 8002ef8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002efa:	683b      	ldr	r3, [r7, #0]
 8002efc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002efe:	461a      	mov	r2, r3
 8002f00:	f000 f8cc 	bl	800309c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	2140      	movs	r1, #64	; 0x40
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	f000 f923 	bl	8003156 <TIM_ITRx_SetConfig>
      break;
 8002f10:	e00c      	b.n	8002f2c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681a      	ldr	r2, [r3, #0]
 8002f16:	683b      	ldr	r3, [r7, #0]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	4619      	mov	r1, r3
 8002f1c:	4610      	mov	r0, r2
 8002f1e:	f000 f91a 	bl	8003156 <TIM_ITRx_SetConfig>
      break;
 8002f22:	e003      	b.n	8002f2c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002f24:	2301      	movs	r3, #1
 8002f26:	73fb      	strb	r3, [r7, #15]
      break;
 8002f28:	e000      	b.n	8002f2c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002f2a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	2201      	movs	r2, #1
 8002f30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	2200      	movs	r2, #0
 8002f38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002f3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f3e:	4618      	mov	r0, r3
 8002f40:	3710      	adds	r7, #16
 8002f42:	46bd      	mov	sp, r7
 8002f44:	bd80      	pop	{r7, pc}

08002f46 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002f46:	b480      	push	{r7}
 8002f48:	b083      	sub	sp, #12
 8002f4a:	af00      	add	r7, sp, #0
 8002f4c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002f4e:	bf00      	nop
 8002f50:	370c      	adds	r7, #12
 8002f52:	46bd      	mov	sp, r7
 8002f54:	bc80      	pop	{r7}
 8002f56:	4770      	bx	lr

08002f58 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002f58:	b480      	push	{r7}
 8002f5a:	b083      	sub	sp, #12
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002f60:	bf00      	nop
 8002f62:	370c      	adds	r7, #12
 8002f64:	46bd      	mov	sp, r7
 8002f66:	bc80      	pop	{r7}
 8002f68:	4770      	bx	lr

08002f6a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002f6a:	b480      	push	{r7}
 8002f6c:	b083      	sub	sp, #12
 8002f6e:	af00      	add	r7, sp, #0
 8002f70:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002f72:	bf00      	nop
 8002f74:	370c      	adds	r7, #12
 8002f76:	46bd      	mov	sp, r7
 8002f78:	bc80      	pop	{r7}
 8002f7a:	4770      	bx	lr

08002f7c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002f7c:	b480      	push	{r7}
 8002f7e:	b083      	sub	sp, #12
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002f84:	bf00      	nop
 8002f86:	370c      	adds	r7, #12
 8002f88:	46bd      	mov	sp, r7
 8002f8a:	bc80      	pop	{r7}
 8002f8c:	4770      	bx	lr
	...

08002f90 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002f90:	b480      	push	{r7}
 8002f92:	b085      	sub	sp, #20
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]
 8002f98:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	4a39      	ldr	r2, [pc, #228]	; (8003088 <TIM_Base_SetConfig+0xf8>)
 8002fa4:	4293      	cmp	r3, r2
 8002fa6:	d013      	beq.n	8002fd0 <TIM_Base_SetConfig+0x40>
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	4a38      	ldr	r2, [pc, #224]	; (800308c <TIM_Base_SetConfig+0xfc>)
 8002fac:	4293      	cmp	r3, r2
 8002fae:	d00f      	beq.n	8002fd0 <TIM_Base_SetConfig+0x40>
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002fb6:	d00b      	beq.n	8002fd0 <TIM_Base_SetConfig+0x40>
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	4a35      	ldr	r2, [pc, #212]	; (8003090 <TIM_Base_SetConfig+0x100>)
 8002fbc:	4293      	cmp	r3, r2
 8002fbe:	d007      	beq.n	8002fd0 <TIM_Base_SetConfig+0x40>
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	4a34      	ldr	r2, [pc, #208]	; (8003094 <TIM_Base_SetConfig+0x104>)
 8002fc4:	4293      	cmp	r3, r2
 8002fc6:	d003      	beq.n	8002fd0 <TIM_Base_SetConfig+0x40>
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	4a33      	ldr	r2, [pc, #204]	; (8003098 <TIM_Base_SetConfig+0x108>)
 8002fcc:	4293      	cmp	r3, r2
 8002fce:	d108      	bne.n	8002fe2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002fd6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002fd8:	683b      	ldr	r3, [r7, #0]
 8002fda:	685b      	ldr	r3, [r3, #4]
 8002fdc:	68fa      	ldr	r2, [r7, #12]
 8002fde:	4313      	orrs	r3, r2
 8002fe0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	4a28      	ldr	r2, [pc, #160]	; (8003088 <TIM_Base_SetConfig+0xf8>)
 8002fe6:	4293      	cmp	r3, r2
 8002fe8:	d013      	beq.n	8003012 <TIM_Base_SetConfig+0x82>
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	4a27      	ldr	r2, [pc, #156]	; (800308c <TIM_Base_SetConfig+0xfc>)
 8002fee:	4293      	cmp	r3, r2
 8002ff0:	d00f      	beq.n	8003012 <TIM_Base_SetConfig+0x82>
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ff8:	d00b      	beq.n	8003012 <TIM_Base_SetConfig+0x82>
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	4a24      	ldr	r2, [pc, #144]	; (8003090 <TIM_Base_SetConfig+0x100>)
 8002ffe:	4293      	cmp	r3, r2
 8003000:	d007      	beq.n	8003012 <TIM_Base_SetConfig+0x82>
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	4a23      	ldr	r2, [pc, #140]	; (8003094 <TIM_Base_SetConfig+0x104>)
 8003006:	4293      	cmp	r3, r2
 8003008:	d003      	beq.n	8003012 <TIM_Base_SetConfig+0x82>
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	4a22      	ldr	r2, [pc, #136]	; (8003098 <TIM_Base_SetConfig+0x108>)
 800300e:	4293      	cmp	r3, r2
 8003010:	d108      	bne.n	8003024 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003018:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800301a:	683b      	ldr	r3, [r7, #0]
 800301c:	68db      	ldr	r3, [r3, #12]
 800301e:	68fa      	ldr	r2, [r7, #12]
 8003020:	4313      	orrs	r3, r2
 8003022:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800302a:	683b      	ldr	r3, [r7, #0]
 800302c:	695b      	ldr	r3, [r3, #20]
 800302e:	4313      	orrs	r3, r2
 8003030:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	68fa      	ldr	r2, [r7, #12]
 8003036:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003038:	683b      	ldr	r3, [r7, #0]
 800303a:	689a      	ldr	r2, [r3, #8]
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003040:	683b      	ldr	r3, [r7, #0]
 8003042:	681a      	ldr	r2, [r3, #0]
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	4a0f      	ldr	r2, [pc, #60]	; (8003088 <TIM_Base_SetConfig+0xf8>)
 800304c:	4293      	cmp	r3, r2
 800304e:	d003      	beq.n	8003058 <TIM_Base_SetConfig+0xc8>
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	4a0e      	ldr	r2, [pc, #56]	; (800308c <TIM_Base_SetConfig+0xfc>)
 8003054:	4293      	cmp	r3, r2
 8003056:	d103      	bne.n	8003060 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003058:	683b      	ldr	r3, [r7, #0]
 800305a:	691a      	ldr	r2, [r3, #16]
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	2201      	movs	r2, #1
 8003064:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	691b      	ldr	r3, [r3, #16]
 800306a:	f003 0301 	and.w	r3, r3, #1
 800306e:	2b00      	cmp	r3, #0
 8003070:	d005      	beq.n	800307e <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	691b      	ldr	r3, [r3, #16]
 8003076:	f023 0201 	bic.w	r2, r3, #1
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	611a      	str	r2, [r3, #16]
  }
}
 800307e:	bf00      	nop
 8003080:	3714      	adds	r7, #20
 8003082:	46bd      	mov	sp, r7
 8003084:	bc80      	pop	{r7}
 8003086:	4770      	bx	lr
 8003088:	40012c00 	.word	0x40012c00
 800308c:	40013400 	.word	0x40013400
 8003090:	40000400 	.word	0x40000400
 8003094:	40000800 	.word	0x40000800
 8003098:	40000c00 	.word	0x40000c00

0800309c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800309c:	b480      	push	{r7}
 800309e:	b087      	sub	sp, #28
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	60f8      	str	r0, [r7, #12]
 80030a4:	60b9      	str	r1, [r7, #8]
 80030a6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	6a1b      	ldr	r3, [r3, #32]
 80030ac:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	6a1b      	ldr	r3, [r3, #32]
 80030b2:	f023 0201 	bic.w	r2, r3, #1
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	699b      	ldr	r3, [r3, #24]
 80030be:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80030c0:	693b      	ldr	r3, [r7, #16]
 80030c2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80030c6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	011b      	lsls	r3, r3, #4
 80030cc:	693a      	ldr	r2, [r7, #16]
 80030ce:	4313      	orrs	r3, r2
 80030d0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80030d2:	697b      	ldr	r3, [r7, #20]
 80030d4:	f023 030a 	bic.w	r3, r3, #10
 80030d8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80030da:	697a      	ldr	r2, [r7, #20]
 80030dc:	68bb      	ldr	r3, [r7, #8]
 80030de:	4313      	orrs	r3, r2
 80030e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	693a      	ldr	r2, [r7, #16]
 80030e6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	697a      	ldr	r2, [r7, #20]
 80030ec:	621a      	str	r2, [r3, #32]
}
 80030ee:	bf00      	nop
 80030f0:	371c      	adds	r7, #28
 80030f2:	46bd      	mov	sp, r7
 80030f4:	bc80      	pop	{r7}
 80030f6:	4770      	bx	lr

080030f8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80030f8:	b480      	push	{r7}
 80030fa:	b087      	sub	sp, #28
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	60f8      	str	r0, [r7, #12]
 8003100:	60b9      	str	r1, [r7, #8]
 8003102:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	6a1b      	ldr	r3, [r3, #32]
 8003108:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	6a1b      	ldr	r3, [r3, #32]
 800310e:	f023 0210 	bic.w	r2, r3, #16
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	699b      	ldr	r3, [r3, #24]
 800311a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800311c:	693b      	ldr	r3, [r7, #16]
 800311e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003122:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	031b      	lsls	r3, r3, #12
 8003128:	693a      	ldr	r2, [r7, #16]
 800312a:	4313      	orrs	r3, r2
 800312c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800312e:	697b      	ldr	r3, [r7, #20]
 8003130:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003134:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003136:	68bb      	ldr	r3, [r7, #8]
 8003138:	011b      	lsls	r3, r3, #4
 800313a:	697a      	ldr	r2, [r7, #20]
 800313c:	4313      	orrs	r3, r2
 800313e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	693a      	ldr	r2, [r7, #16]
 8003144:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	697a      	ldr	r2, [r7, #20]
 800314a:	621a      	str	r2, [r3, #32]
}
 800314c:	bf00      	nop
 800314e:	371c      	adds	r7, #28
 8003150:	46bd      	mov	sp, r7
 8003152:	bc80      	pop	{r7}
 8003154:	4770      	bx	lr

08003156 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003156:	b480      	push	{r7}
 8003158:	b085      	sub	sp, #20
 800315a:	af00      	add	r7, sp, #0
 800315c:	6078      	str	r0, [r7, #4]
 800315e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	689b      	ldr	r3, [r3, #8]
 8003164:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800316c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800316e:	683a      	ldr	r2, [r7, #0]
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	4313      	orrs	r3, r2
 8003174:	f043 0307 	orr.w	r3, r3, #7
 8003178:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	68fa      	ldr	r2, [r7, #12]
 800317e:	609a      	str	r2, [r3, #8]
}
 8003180:	bf00      	nop
 8003182:	3714      	adds	r7, #20
 8003184:	46bd      	mov	sp, r7
 8003186:	bc80      	pop	{r7}
 8003188:	4770      	bx	lr

0800318a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800318a:	b480      	push	{r7}
 800318c:	b087      	sub	sp, #28
 800318e:	af00      	add	r7, sp, #0
 8003190:	60f8      	str	r0, [r7, #12]
 8003192:	60b9      	str	r1, [r7, #8]
 8003194:	607a      	str	r2, [r7, #4]
 8003196:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	689b      	ldr	r3, [r3, #8]
 800319c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800319e:	697b      	ldr	r3, [r7, #20]
 80031a0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80031a4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80031a6:	683b      	ldr	r3, [r7, #0]
 80031a8:	021a      	lsls	r2, r3, #8
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	431a      	orrs	r2, r3
 80031ae:	68bb      	ldr	r3, [r7, #8]
 80031b0:	4313      	orrs	r3, r2
 80031b2:	697a      	ldr	r2, [r7, #20]
 80031b4:	4313      	orrs	r3, r2
 80031b6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	697a      	ldr	r2, [r7, #20]
 80031bc:	609a      	str	r2, [r3, #8]
}
 80031be:	bf00      	nop
 80031c0:	371c      	adds	r7, #28
 80031c2:	46bd      	mov	sp, r7
 80031c4:	bc80      	pop	{r7}
 80031c6:	4770      	bx	lr

080031c8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80031c8:	b480      	push	{r7}
 80031ca:	b085      	sub	sp, #20
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]
 80031d0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80031d8:	2b01      	cmp	r3, #1
 80031da:	d101      	bne.n	80031e0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80031dc:	2302      	movs	r3, #2
 80031de:	e050      	b.n	8003282 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	2201      	movs	r2, #1
 80031e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	2202      	movs	r2, #2
 80031ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	685b      	ldr	r3, [r3, #4]
 80031f6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	689b      	ldr	r3, [r3, #8]
 80031fe:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003206:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003208:	683b      	ldr	r3, [r7, #0]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	68fa      	ldr	r2, [r7, #12]
 800320e:	4313      	orrs	r3, r2
 8003210:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	68fa      	ldr	r2, [r7, #12]
 8003218:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	4a1b      	ldr	r2, [pc, #108]	; (800328c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8003220:	4293      	cmp	r3, r2
 8003222:	d018      	beq.n	8003256 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	4a19      	ldr	r2, [pc, #100]	; (8003290 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800322a:	4293      	cmp	r3, r2
 800322c:	d013      	beq.n	8003256 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003236:	d00e      	beq.n	8003256 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	4a15      	ldr	r2, [pc, #84]	; (8003294 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800323e:	4293      	cmp	r3, r2
 8003240:	d009      	beq.n	8003256 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	4a14      	ldr	r2, [pc, #80]	; (8003298 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003248:	4293      	cmp	r3, r2
 800324a:	d004      	beq.n	8003256 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	4a12      	ldr	r2, [pc, #72]	; (800329c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003252:	4293      	cmp	r3, r2
 8003254:	d10c      	bne.n	8003270 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003256:	68bb      	ldr	r3, [r7, #8]
 8003258:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800325c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800325e:	683b      	ldr	r3, [r7, #0]
 8003260:	685b      	ldr	r3, [r3, #4]
 8003262:	68ba      	ldr	r2, [r7, #8]
 8003264:	4313      	orrs	r3, r2
 8003266:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	68ba      	ldr	r2, [r7, #8]
 800326e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	2201      	movs	r2, #1
 8003274:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	2200      	movs	r2, #0
 800327c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003280:	2300      	movs	r3, #0
}
 8003282:	4618      	mov	r0, r3
 8003284:	3714      	adds	r7, #20
 8003286:	46bd      	mov	sp, r7
 8003288:	bc80      	pop	{r7}
 800328a:	4770      	bx	lr
 800328c:	40012c00 	.word	0x40012c00
 8003290:	40013400 	.word	0x40013400
 8003294:	40000400 	.word	0x40000400
 8003298:	40000800 	.word	0x40000800
 800329c:	40000c00 	.word	0x40000c00

080032a0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80032a0:	b480      	push	{r7}
 80032a2:	b083      	sub	sp, #12
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80032a8:	bf00      	nop
 80032aa:	370c      	adds	r7, #12
 80032ac:	46bd      	mov	sp, r7
 80032ae:	bc80      	pop	{r7}
 80032b0:	4770      	bx	lr

080032b2 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80032b2:	b480      	push	{r7}
 80032b4:	b083      	sub	sp, #12
 80032b6:	af00      	add	r7, sp, #0
 80032b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80032ba:	bf00      	nop
 80032bc:	370c      	adds	r7, #12
 80032be:	46bd      	mov	sp, r7
 80032c0:	bc80      	pop	{r7}
 80032c2:	4770      	bx	lr

080032c4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80032c4:	b580      	push	{r7, lr}
 80032c6:	b082      	sub	sp, #8
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d101      	bne.n	80032d6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80032d2:	2301      	movs	r3, #1
 80032d4:	e042      	b.n	800335c <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80032dc:	b2db      	uxtb	r3, r3
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d106      	bne.n	80032f0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	2200      	movs	r2, #0
 80032e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80032ea:	6878      	ldr	r0, [r7, #4]
 80032ec:	f7fd fa58 	bl	80007a0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	2224      	movs	r2, #36	; 0x24
 80032f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	68da      	ldr	r2, [r3, #12]
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003306:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003308:	6878      	ldr	r0, [r7, #4]
 800330a:	f000 fdb7 	bl	8003e7c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	691a      	ldr	r2, [r3, #16]
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800331c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	695a      	ldr	r2, [r3, #20]
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800332c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	68da      	ldr	r2, [r3, #12]
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800333c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	2200      	movs	r2, #0
 8003342:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	2220      	movs	r2, #32
 8003348:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2220      	movs	r2, #32
 8003350:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	2200      	movs	r2, #0
 8003358:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800335a:	2300      	movs	r3, #0
}
 800335c:	4618      	mov	r0, r3
 800335e:	3708      	adds	r7, #8
 8003360:	46bd      	mov	sp, r7
 8003362:	bd80      	pop	{r7, pc}

08003364 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003364:	b580      	push	{r7, lr}
 8003366:	b08a      	sub	sp, #40	; 0x28
 8003368:	af02      	add	r7, sp, #8
 800336a:	60f8      	str	r0, [r7, #12]
 800336c:	60b9      	str	r1, [r7, #8]
 800336e:	603b      	str	r3, [r7, #0]
 8003370:	4613      	mov	r3, r2
 8003372:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003374:	2300      	movs	r3, #0
 8003376:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800337e:	b2db      	uxtb	r3, r3
 8003380:	2b20      	cmp	r3, #32
 8003382:	d175      	bne.n	8003470 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003384:	68bb      	ldr	r3, [r7, #8]
 8003386:	2b00      	cmp	r3, #0
 8003388:	d002      	beq.n	8003390 <HAL_UART_Transmit+0x2c>
 800338a:	88fb      	ldrh	r3, [r7, #6]
 800338c:	2b00      	cmp	r3, #0
 800338e:	d101      	bne.n	8003394 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003390:	2301      	movs	r3, #1
 8003392:	e06e      	b.n	8003472 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	2200      	movs	r2, #0
 8003398:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	2221      	movs	r2, #33	; 0x21
 800339e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80033a2:	f7fd fca5 	bl	8000cf0 <HAL_GetTick>
 80033a6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	88fa      	ldrh	r2, [r7, #6]
 80033ac:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	88fa      	ldrh	r2, [r7, #6]
 80033b2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	689b      	ldr	r3, [r3, #8]
 80033b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80033bc:	d108      	bne.n	80033d0 <HAL_UART_Transmit+0x6c>
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	691b      	ldr	r3, [r3, #16]
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d104      	bne.n	80033d0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80033c6:	2300      	movs	r3, #0
 80033c8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80033ca:	68bb      	ldr	r3, [r7, #8]
 80033cc:	61bb      	str	r3, [r7, #24]
 80033ce:	e003      	b.n	80033d8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80033d0:	68bb      	ldr	r3, [r7, #8]
 80033d2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80033d4:	2300      	movs	r3, #0
 80033d6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80033d8:	e02e      	b.n	8003438 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80033da:	683b      	ldr	r3, [r7, #0]
 80033dc:	9300      	str	r3, [sp, #0]
 80033de:	697b      	ldr	r3, [r7, #20]
 80033e0:	2200      	movs	r2, #0
 80033e2:	2180      	movs	r1, #128	; 0x80
 80033e4:	68f8      	ldr	r0, [r7, #12]
 80033e6:	f000 fb1c 	bl	8003a22 <UART_WaitOnFlagUntilTimeout>
 80033ea:	4603      	mov	r3, r0
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d005      	beq.n	80033fc <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	2220      	movs	r2, #32
 80033f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 80033f8:	2303      	movs	r3, #3
 80033fa:	e03a      	b.n	8003472 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80033fc:	69fb      	ldr	r3, [r7, #28]
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d10b      	bne.n	800341a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003402:	69bb      	ldr	r3, [r7, #24]
 8003404:	881b      	ldrh	r3, [r3, #0]
 8003406:	461a      	mov	r2, r3
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003410:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003412:	69bb      	ldr	r3, [r7, #24]
 8003414:	3302      	adds	r3, #2
 8003416:	61bb      	str	r3, [r7, #24]
 8003418:	e007      	b.n	800342a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800341a:	69fb      	ldr	r3, [r7, #28]
 800341c:	781a      	ldrb	r2, [r3, #0]
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003424:	69fb      	ldr	r3, [r7, #28]
 8003426:	3301      	adds	r3, #1
 8003428:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800342e:	b29b      	uxth	r3, r3
 8003430:	3b01      	subs	r3, #1
 8003432:	b29a      	uxth	r2, r3
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800343c:	b29b      	uxth	r3, r3
 800343e:	2b00      	cmp	r3, #0
 8003440:	d1cb      	bne.n	80033da <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003442:	683b      	ldr	r3, [r7, #0]
 8003444:	9300      	str	r3, [sp, #0]
 8003446:	697b      	ldr	r3, [r7, #20]
 8003448:	2200      	movs	r2, #0
 800344a:	2140      	movs	r1, #64	; 0x40
 800344c:	68f8      	ldr	r0, [r7, #12]
 800344e:	f000 fae8 	bl	8003a22 <UART_WaitOnFlagUntilTimeout>
 8003452:	4603      	mov	r3, r0
 8003454:	2b00      	cmp	r3, #0
 8003456:	d005      	beq.n	8003464 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	2220      	movs	r2, #32
 800345c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 8003460:	2303      	movs	r3, #3
 8003462:	e006      	b.n	8003472 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	2220      	movs	r2, #32
 8003468:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 800346c:	2300      	movs	r3, #0
 800346e:	e000      	b.n	8003472 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003470:	2302      	movs	r3, #2
  }
}
 8003472:	4618      	mov	r0, r3
 8003474:	3720      	adds	r7, #32
 8003476:	46bd      	mov	sp, r7
 8003478:	bd80      	pop	{r7, pc}

0800347a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800347a:	b580      	push	{r7, lr}
 800347c:	b084      	sub	sp, #16
 800347e:	af00      	add	r7, sp, #0
 8003480:	60f8      	str	r0, [r7, #12]
 8003482:	60b9      	str	r1, [r7, #8]
 8003484:	4613      	mov	r3, r2
 8003486:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800348e:	b2db      	uxtb	r3, r3
 8003490:	2b20      	cmp	r3, #32
 8003492:	d112      	bne.n	80034ba <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8003494:	68bb      	ldr	r3, [r7, #8]
 8003496:	2b00      	cmp	r3, #0
 8003498:	d002      	beq.n	80034a0 <HAL_UART_Receive_IT+0x26>
 800349a:	88fb      	ldrh	r3, [r7, #6]
 800349c:	2b00      	cmp	r3, #0
 800349e:	d101      	bne.n	80034a4 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80034a0:	2301      	movs	r3, #1
 80034a2:	e00b      	b.n	80034bc <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	2200      	movs	r2, #0
 80034a8:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80034aa:	88fb      	ldrh	r3, [r7, #6]
 80034ac:	461a      	mov	r2, r3
 80034ae:	68b9      	ldr	r1, [r7, #8]
 80034b0:	68f8      	ldr	r0, [r7, #12]
 80034b2:	f000 fb0f 	bl	8003ad4 <UART_Start_Receive_IT>
 80034b6:	4603      	mov	r3, r0
 80034b8:	e000      	b.n	80034bc <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 80034ba:	2302      	movs	r3, #2
  }
}
 80034bc:	4618      	mov	r0, r3
 80034be:	3710      	adds	r7, #16
 80034c0:	46bd      	mov	sp, r7
 80034c2:	bd80      	pop	{r7, pc}

080034c4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80034c4:	b580      	push	{r7, lr}
 80034c6:	b0ba      	sub	sp, #232	; 0xe8
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	68db      	ldr	r3, [r3, #12]
 80034dc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	695b      	ldr	r3, [r3, #20]
 80034e6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80034ea:	2300      	movs	r3, #0
 80034ec:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80034f0:	2300      	movs	r3, #0
 80034f2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80034f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80034fa:	f003 030f 	and.w	r3, r3, #15
 80034fe:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8003502:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003506:	2b00      	cmp	r3, #0
 8003508:	d10f      	bne.n	800352a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800350a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800350e:	f003 0320 	and.w	r3, r3, #32
 8003512:	2b00      	cmp	r3, #0
 8003514:	d009      	beq.n	800352a <HAL_UART_IRQHandler+0x66>
 8003516:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800351a:	f003 0320 	and.w	r3, r3, #32
 800351e:	2b00      	cmp	r3, #0
 8003520:	d003      	beq.n	800352a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003522:	6878      	ldr	r0, [r7, #4]
 8003524:	f000 fbec 	bl	8003d00 <UART_Receive_IT>
      return;
 8003528:	e25b      	b.n	80039e2 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800352a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800352e:	2b00      	cmp	r3, #0
 8003530:	f000 80de 	beq.w	80036f0 <HAL_UART_IRQHandler+0x22c>
 8003534:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003538:	f003 0301 	and.w	r3, r3, #1
 800353c:	2b00      	cmp	r3, #0
 800353e:	d106      	bne.n	800354e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003540:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003544:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003548:	2b00      	cmp	r3, #0
 800354a:	f000 80d1 	beq.w	80036f0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800354e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003552:	f003 0301 	and.w	r3, r3, #1
 8003556:	2b00      	cmp	r3, #0
 8003558:	d00b      	beq.n	8003572 <HAL_UART_IRQHandler+0xae>
 800355a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800355e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003562:	2b00      	cmp	r3, #0
 8003564:	d005      	beq.n	8003572 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800356a:	f043 0201 	orr.w	r2, r3, #1
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003572:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003576:	f003 0304 	and.w	r3, r3, #4
 800357a:	2b00      	cmp	r3, #0
 800357c:	d00b      	beq.n	8003596 <HAL_UART_IRQHandler+0xd2>
 800357e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003582:	f003 0301 	and.w	r3, r3, #1
 8003586:	2b00      	cmp	r3, #0
 8003588:	d005      	beq.n	8003596 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800358e:	f043 0202 	orr.w	r2, r3, #2
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003596:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800359a:	f003 0302 	and.w	r3, r3, #2
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d00b      	beq.n	80035ba <HAL_UART_IRQHandler+0xf6>
 80035a2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80035a6:	f003 0301 	and.w	r3, r3, #1
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d005      	beq.n	80035ba <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035b2:	f043 0204 	orr.w	r2, r3, #4
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80035ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80035be:	f003 0308 	and.w	r3, r3, #8
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d011      	beq.n	80035ea <HAL_UART_IRQHandler+0x126>
 80035c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80035ca:	f003 0320 	and.w	r3, r3, #32
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d105      	bne.n	80035de <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80035d2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80035d6:	f003 0301 	and.w	r3, r3, #1
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d005      	beq.n	80035ea <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035e2:	f043 0208 	orr.w	r2, r3, #8
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	f000 81f2 	beq.w	80039d8 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80035f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80035f8:	f003 0320 	and.w	r3, r3, #32
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d008      	beq.n	8003612 <HAL_UART_IRQHandler+0x14e>
 8003600:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003604:	f003 0320 	and.w	r3, r3, #32
 8003608:	2b00      	cmp	r3, #0
 800360a:	d002      	beq.n	8003612 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800360c:	6878      	ldr	r0, [r7, #4]
 800360e:	f000 fb77 	bl	8003d00 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	695b      	ldr	r3, [r3, #20]
 8003618:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800361c:	2b00      	cmp	r3, #0
 800361e:	bf14      	ite	ne
 8003620:	2301      	movne	r3, #1
 8003622:	2300      	moveq	r3, #0
 8003624:	b2db      	uxtb	r3, r3
 8003626:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800362e:	f003 0308 	and.w	r3, r3, #8
 8003632:	2b00      	cmp	r3, #0
 8003634:	d103      	bne.n	800363e <HAL_UART_IRQHandler+0x17a>
 8003636:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800363a:	2b00      	cmp	r3, #0
 800363c:	d04f      	beq.n	80036de <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800363e:	6878      	ldr	r0, [r7, #4]
 8003640:	f000 fa81 	bl	8003b46 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	695b      	ldr	r3, [r3, #20]
 800364a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800364e:	2b00      	cmp	r3, #0
 8003650:	d041      	beq.n	80036d6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	3314      	adds	r3, #20
 8003658:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800365c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003660:	e853 3f00 	ldrex	r3, [r3]
 8003664:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003668:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800366c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003670:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	3314      	adds	r3, #20
 800367a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800367e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003682:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003686:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800368a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800368e:	e841 2300 	strex	r3, r2, [r1]
 8003692:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003696:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800369a:	2b00      	cmp	r3, #0
 800369c:	d1d9      	bne.n	8003652 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d013      	beq.n	80036ce <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036aa:	4a7e      	ldr	r2, [pc, #504]	; (80038a4 <HAL_UART_IRQHandler+0x3e0>)
 80036ac:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036b2:	4618      	mov	r0, r3
 80036b4:	f7fe f98e 	bl	80019d4 <HAL_DMA_Abort_IT>
 80036b8:	4603      	mov	r3, r0
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d016      	beq.n	80036ec <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036c4:	687a      	ldr	r2, [r7, #4]
 80036c6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80036c8:	4610      	mov	r0, r2
 80036ca:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80036cc:	e00e      	b.n	80036ec <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80036ce:	6878      	ldr	r0, [r7, #4]
 80036d0:	f000 f993 	bl	80039fa <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80036d4:	e00a      	b.n	80036ec <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80036d6:	6878      	ldr	r0, [r7, #4]
 80036d8:	f000 f98f 	bl	80039fa <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80036dc:	e006      	b.n	80036ec <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80036de:	6878      	ldr	r0, [r7, #4]
 80036e0:	f000 f98b 	bl	80039fa <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2200      	movs	r2, #0
 80036e8:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 80036ea:	e175      	b.n	80039d8 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80036ec:	bf00      	nop
    return;
 80036ee:	e173      	b.n	80039d8 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036f4:	2b01      	cmp	r3, #1
 80036f6:	f040 814f 	bne.w	8003998 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80036fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80036fe:	f003 0310 	and.w	r3, r3, #16
 8003702:	2b00      	cmp	r3, #0
 8003704:	f000 8148 	beq.w	8003998 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003708:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800370c:	f003 0310 	and.w	r3, r3, #16
 8003710:	2b00      	cmp	r3, #0
 8003712:	f000 8141 	beq.w	8003998 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003716:	2300      	movs	r3, #0
 8003718:	60bb      	str	r3, [r7, #8]
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	60bb      	str	r3, [r7, #8]
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	685b      	ldr	r3, [r3, #4]
 8003728:	60bb      	str	r3, [r7, #8]
 800372a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	695b      	ldr	r3, [r3, #20]
 8003732:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003736:	2b00      	cmp	r3, #0
 8003738:	f000 80b6 	beq.w	80038a8 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	685b      	ldr	r3, [r3, #4]
 8003744:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003748:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800374c:	2b00      	cmp	r3, #0
 800374e:	f000 8145 	beq.w	80039dc <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003756:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800375a:	429a      	cmp	r2, r3
 800375c:	f080 813e 	bcs.w	80039dc <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003766:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800376c:	699b      	ldr	r3, [r3, #24]
 800376e:	2b20      	cmp	r3, #32
 8003770:	f000 8088 	beq.w	8003884 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	330c      	adds	r3, #12
 800377a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800377e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003782:	e853 3f00 	ldrex	r3, [r3]
 8003786:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800378a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800378e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003792:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	330c      	adds	r3, #12
 800379c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80037a0:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80037a4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037a8:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80037ac:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80037b0:	e841 2300 	strex	r3, r2, [r1]
 80037b4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80037b8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d1d9      	bne.n	8003774 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	3314      	adds	r3, #20
 80037c6:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037c8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80037ca:	e853 3f00 	ldrex	r3, [r3]
 80037ce:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80037d0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80037d2:	f023 0301 	bic.w	r3, r3, #1
 80037d6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	3314      	adds	r3, #20
 80037e0:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80037e4:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80037e8:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037ea:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80037ec:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80037f0:	e841 2300 	strex	r3, r2, [r1]
 80037f4:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80037f6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d1e1      	bne.n	80037c0 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	3314      	adds	r3, #20
 8003802:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003804:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003806:	e853 3f00 	ldrex	r3, [r3]
 800380a:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800380c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800380e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003812:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	3314      	adds	r3, #20
 800381c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003820:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003822:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003824:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003826:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003828:	e841 2300 	strex	r3, r2, [r1]
 800382c:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800382e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003830:	2b00      	cmp	r3, #0
 8003832:	d1e3      	bne.n	80037fc <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	2220      	movs	r2, #32
 8003838:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	2200      	movs	r2, #0
 8003840:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	330c      	adds	r3, #12
 8003848:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800384a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800384c:	e853 3f00 	ldrex	r3, [r3]
 8003850:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003852:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003854:	f023 0310 	bic.w	r3, r3, #16
 8003858:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	330c      	adds	r3, #12
 8003862:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003866:	65ba      	str	r2, [r7, #88]	; 0x58
 8003868:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800386a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800386c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800386e:	e841 2300 	strex	r3, r2, [r1]
 8003872:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003874:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003876:	2b00      	cmp	r3, #0
 8003878:	d1e3      	bne.n	8003842 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800387e:	4618      	mov	r0, r3
 8003880:	f7fe f86d 	bl	800195e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2202      	movs	r2, #2
 8003888:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003892:	b29b      	uxth	r3, r3
 8003894:	1ad3      	subs	r3, r2, r3
 8003896:	b29b      	uxth	r3, r3
 8003898:	4619      	mov	r1, r3
 800389a:	6878      	ldr	r0, [r7, #4]
 800389c:	f000 f8b6 	bl	8003a0c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80038a0:	e09c      	b.n	80039dc <HAL_UART_IRQHandler+0x518>
 80038a2:	bf00      	nop
 80038a4:	08003c0b 	.word	0x08003c0b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80038b0:	b29b      	uxth	r3, r3
 80038b2:	1ad3      	subs	r3, r2, r3
 80038b4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80038bc:	b29b      	uxth	r3, r3
 80038be:	2b00      	cmp	r3, #0
 80038c0:	f000 808e 	beq.w	80039e0 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80038c4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	f000 8089 	beq.w	80039e0 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	330c      	adds	r3, #12
 80038d4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038d8:	e853 3f00 	ldrex	r3, [r3]
 80038dc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80038de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038e0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80038e4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	330c      	adds	r3, #12
 80038ee:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80038f2:	647a      	str	r2, [r7, #68]	; 0x44
 80038f4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038f6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80038f8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80038fa:	e841 2300 	strex	r3, r2, [r1]
 80038fe:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003900:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003902:	2b00      	cmp	r3, #0
 8003904:	d1e3      	bne.n	80038ce <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	3314      	adds	r3, #20
 800390c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800390e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003910:	e853 3f00 	ldrex	r3, [r3]
 8003914:	623b      	str	r3, [r7, #32]
   return(result);
 8003916:	6a3b      	ldr	r3, [r7, #32]
 8003918:	f023 0301 	bic.w	r3, r3, #1
 800391c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	3314      	adds	r3, #20
 8003926:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800392a:	633a      	str	r2, [r7, #48]	; 0x30
 800392c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800392e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003930:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003932:	e841 2300 	strex	r3, r2, [r1]
 8003936:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003938:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800393a:	2b00      	cmp	r3, #0
 800393c:	d1e3      	bne.n	8003906 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	2220      	movs	r2, #32
 8003942:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	2200      	movs	r2, #0
 800394a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	330c      	adds	r3, #12
 8003952:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003954:	693b      	ldr	r3, [r7, #16]
 8003956:	e853 3f00 	ldrex	r3, [r3]
 800395a:	60fb      	str	r3, [r7, #12]
   return(result);
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	f023 0310 	bic.w	r3, r3, #16
 8003962:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	330c      	adds	r3, #12
 800396c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003970:	61fa      	str	r2, [r7, #28]
 8003972:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003974:	69b9      	ldr	r1, [r7, #24]
 8003976:	69fa      	ldr	r2, [r7, #28]
 8003978:	e841 2300 	strex	r3, r2, [r1]
 800397c:	617b      	str	r3, [r7, #20]
   return(result);
 800397e:	697b      	ldr	r3, [r7, #20]
 8003980:	2b00      	cmp	r3, #0
 8003982:	d1e3      	bne.n	800394c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	2202      	movs	r2, #2
 8003988:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800398a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800398e:	4619      	mov	r1, r3
 8003990:	6878      	ldr	r0, [r7, #4]
 8003992:	f000 f83b 	bl	8003a0c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003996:	e023      	b.n	80039e0 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003998:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800399c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d009      	beq.n	80039b8 <HAL_UART_IRQHandler+0x4f4>
 80039a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80039a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d003      	beq.n	80039b8 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80039b0:	6878      	ldr	r0, [r7, #4]
 80039b2:	f000 f93e 	bl	8003c32 <UART_Transmit_IT>
    return;
 80039b6:	e014      	b.n	80039e2 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80039b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80039bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d00e      	beq.n	80039e2 <HAL_UART_IRQHandler+0x51e>
 80039c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80039c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d008      	beq.n	80039e2 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80039d0:	6878      	ldr	r0, [r7, #4]
 80039d2:	f000 f97d 	bl	8003cd0 <UART_EndTransmit_IT>
    return;
 80039d6:	e004      	b.n	80039e2 <HAL_UART_IRQHandler+0x51e>
    return;
 80039d8:	bf00      	nop
 80039da:	e002      	b.n	80039e2 <HAL_UART_IRQHandler+0x51e>
      return;
 80039dc:	bf00      	nop
 80039de:	e000      	b.n	80039e2 <HAL_UART_IRQHandler+0x51e>
      return;
 80039e0:	bf00      	nop
  }
}
 80039e2:	37e8      	adds	r7, #232	; 0xe8
 80039e4:	46bd      	mov	sp, r7
 80039e6:	bd80      	pop	{r7, pc}

080039e8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80039e8:	b480      	push	{r7}
 80039ea:	b083      	sub	sp, #12
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80039f0:	bf00      	nop
 80039f2:	370c      	adds	r7, #12
 80039f4:	46bd      	mov	sp, r7
 80039f6:	bc80      	pop	{r7}
 80039f8:	4770      	bx	lr

080039fa <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80039fa:	b480      	push	{r7}
 80039fc:	b083      	sub	sp, #12
 80039fe:	af00      	add	r7, sp, #0
 8003a00:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003a02:	bf00      	nop
 8003a04:	370c      	adds	r7, #12
 8003a06:	46bd      	mov	sp, r7
 8003a08:	bc80      	pop	{r7}
 8003a0a:	4770      	bx	lr

08003a0c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003a0c:	b480      	push	{r7}
 8003a0e:	b083      	sub	sp, #12
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	6078      	str	r0, [r7, #4]
 8003a14:	460b      	mov	r3, r1
 8003a16:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003a18:	bf00      	nop
 8003a1a:	370c      	adds	r7, #12
 8003a1c:	46bd      	mov	sp, r7
 8003a1e:	bc80      	pop	{r7}
 8003a20:	4770      	bx	lr

08003a22 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003a22:	b580      	push	{r7, lr}
 8003a24:	b086      	sub	sp, #24
 8003a26:	af00      	add	r7, sp, #0
 8003a28:	60f8      	str	r0, [r7, #12]
 8003a2a:	60b9      	str	r1, [r7, #8]
 8003a2c:	603b      	str	r3, [r7, #0]
 8003a2e:	4613      	mov	r3, r2
 8003a30:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003a32:	e03b      	b.n	8003aac <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a34:	6a3b      	ldr	r3, [r7, #32]
 8003a36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a3a:	d037      	beq.n	8003aac <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a3c:	f7fd f958 	bl	8000cf0 <HAL_GetTick>
 8003a40:	4602      	mov	r2, r0
 8003a42:	683b      	ldr	r3, [r7, #0]
 8003a44:	1ad3      	subs	r3, r2, r3
 8003a46:	6a3a      	ldr	r2, [r7, #32]
 8003a48:	429a      	cmp	r2, r3
 8003a4a:	d302      	bcc.n	8003a52 <UART_WaitOnFlagUntilTimeout+0x30>
 8003a4c:	6a3b      	ldr	r3, [r7, #32]
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d101      	bne.n	8003a56 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003a52:	2303      	movs	r3, #3
 8003a54:	e03a      	b.n	8003acc <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	68db      	ldr	r3, [r3, #12]
 8003a5c:	f003 0304 	and.w	r3, r3, #4
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d023      	beq.n	8003aac <UART_WaitOnFlagUntilTimeout+0x8a>
 8003a64:	68bb      	ldr	r3, [r7, #8]
 8003a66:	2b80      	cmp	r3, #128	; 0x80
 8003a68:	d020      	beq.n	8003aac <UART_WaitOnFlagUntilTimeout+0x8a>
 8003a6a:	68bb      	ldr	r3, [r7, #8]
 8003a6c:	2b40      	cmp	r3, #64	; 0x40
 8003a6e:	d01d      	beq.n	8003aac <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f003 0308 	and.w	r3, r3, #8
 8003a7a:	2b08      	cmp	r3, #8
 8003a7c:	d116      	bne.n	8003aac <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003a7e:	2300      	movs	r3, #0
 8003a80:	617b      	str	r3, [r7, #20]
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	617b      	str	r3, [r7, #20]
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	685b      	ldr	r3, [r3, #4]
 8003a90:	617b      	str	r3, [r7, #20]
 8003a92:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003a94:	68f8      	ldr	r0, [r7, #12]
 8003a96:	f000 f856 	bl	8003b46 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	2208      	movs	r2, #8
 8003a9e:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	2200      	movs	r2, #0
 8003aa4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8003aa8:	2301      	movs	r3, #1
 8003aaa:	e00f      	b.n	8003acc <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	681a      	ldr	r2, [r3, #0]
 8003ab2:	68bb      	ldr	r3, [r7, #8]
 8003ab4:	4013      	ands	r3, r2
 8003ab6:	68ba      	ldr	r2, [r7, #8]
 8003ab8:	429a      	cmp	r2, r3
 8003aba:	bf0c      	ite	eq
 8003abc:	2301      	moveq	r3, #1
 8003abe:	2300      	movne	r3, #0
 8003ac0:	b2db      	uxtb	r3, r3
 8003ac2:	461a      	mov	r2, r3
 8003ac4:	79fb      	ldrb	r3, [r7, #7]
 8003ac6:	429a      	cmp	r2, r3
 8003ac8:	d0b4      	beq.n	8003a34 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003aca:	2300      	movs	r3, #0
}
 8003acc:	4618      	mov	r0, r3
 8003ace:	3718      	adds	r7, #24
 8003ad0:	46bd      	mov	sp, r7
 8003ad2:	bd80      	pop	{r7, pc}

08003ad4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003ad4:	b480      	push	{r7}
 8003ad6:	b085      	sub	sp, #20
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	60f8      	str	r0, [r7, #12]
 8003adc:	60b9      	str	r1, [r7, #8]
 8003ade:	4613      	mov	r3, r2
 8003ae0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	68ba      	ldr	r2, [r7, #8]
 8003ae6:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	88fa      	ldrh	r2, [r7, #6]
 8003aec:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	88fa      	ldrh	r2, [r7, #6]
 8003af2:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	2200      	movs	r2, #0
 8003af8:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	2222      	movs	r2, #34	; 0x22
 8003afe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	691b      	ldr	r3, [r3, #16]
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d007      	beq.n	8003b1a <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	68da      	ldr	r2, [r3, #12]
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003b18:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	695a      	ldr	r2, [r3, #20]
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f042 0201 	orr.w	r2, r2, #1
 8003b28:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	68da      	ldr	r2, [r3, #12]
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f042 0220 	orr.w	r2, r2, #32
 8003b38:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003b3a:	2300      	movs	r3, #0
}
 8003b3c:	4618      	mov	r0, r3
 8003b3e:	3714      	adds	r7, #20
 8003b40:	46bd      	mov	sp, r7
 8003b42:	bc80      	pop	{r7}
 8003b44:	4770      	bx	lr

08003b46 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003b46:	b480      	push	{r7}
 8003b48:	b095      	sub	sp, #84	; 0x54
 8003b4a:	af00      	add	r7, sp, #0
 8003b4c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	330c      	adds	r3, #12
 8003b54:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b58:	e853 3f00 	ldrex	r3, [r3]
 8003b5c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003b5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b60:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003b64:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	330c      	adds	r3, #12
 8003b6c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003b6e:	643a      	str	r2, [r7, #64]	; 0x40
 8003b70:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b72:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003b74:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003b76:	e841 2300 	strex	r3, r2, [r1]
 8003b7a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003b7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d1e5      	bne.n	8003b4e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	3314      	adds	r3, #20
 8003b88:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b8a:	6a3b      	ldr	r3, [r7, #32]
 8003b8c:	e853 3f00 	ldrex	r3, [r3]
 8003b90:	61fb      	str	r3, [r7, #28]
   return(result);
 8003b92:	69fb      	ldr	r3, [r7, #28]
 8003b94:	f023 0301 	bic.w	r3, r3, #1
 8003b98:	64bb      	str	r3, [r7, #72]	; 0x48
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	3314      	adds	r3, #20
 8003ba0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003ba2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003ba4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ba6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003ba8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003baa:	e841 2300 	strex	r3, r2, [r1]
 8003bae:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003bb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d1e5      	bne.n	8003b82 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bba:	2b01      	cmp	r3, #1
 8003bbc:	d119      	bne.n	8003bf2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	330c      	adds	r3, #12
 8003bc4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	e853 3f00 	ldrex	r3, [r3]
 8003bcc:	60bb      	str	r3, [r7, #8]
   return(result);
 8003bce:	68bb      	ldr	r3, [r7, #8]
 8003bd0:	f023 0310 	bic.w	r3, r3, #16
 8003bd4:	647b      	str	r3, [r7, #68]	; 0x44
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	330c      	adds	r3, #12
 8003bdc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003bde:	61ba      	str	r2, [r7, #24]
 8003be0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003be2:	6979      	ldr	r1, [r7, #20]
 8003be4:	69ba      	ldr	r2, [r7, #24]
 8003be6:	e841 2300 	strex	r3, r2, [r1]
 8003bea:	613b      	str	r3, [r7, #16]
   return(result);
 8003bec:	693b      	ldr	r3, [r7, #16]
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d1e5      	bne.n	8003bbe <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	2220      	movs	r2, #32
 8003bf6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	2200      	movs	r2, #0
 8003bfe:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003c00:	bf00      	nop
 8003c02:	3754      	adds	r7, #84	; 0x54
 8003c04:	46bd      	mov	sp, r7
 8003c06:	bc80      	pop	{r7}
 8003c08:	4770      	bx	lr

08003c0a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003c0a:	b580      	push	{r7, lr}
 8003c0c:	b084      	sub	sp, #16
 8003c0e:	af00      	add	r7, sp, #0
 8003c10:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c16:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	2200      	movs	r2, #0
 8003c22:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003c24:	68f8      	ldr	r0, [r7, #12]
 8003c26:	f7ff fee8 	bl	80039fa <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003c2a:	bf00      	nop
 8003c2c:	3710      	adds	r7, #16
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	bd80      	pop	{r7, pc}

08003c32 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003c32:	b480      	push	{r7}
 8003c34:	b085      	sub	sp, #20
 8003c36:	af00      	add	r7, sp, #0
 8003c38:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003c40:	b2db      	uxtb	r3, r3
 8003c42:	2b21      	cmp	r3, #33	; 0x21
 8003c44:	d13e      	bne.n	8003cc4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	689b      	ldr	r3, [r3, #8]
 8003c4a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c4e:	d114      	bne.n	8003c7a <UART_Transmit_IT+0x48>
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	691b      	ldr	r3, [r3, #16]
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d110      	bne.n	8003c7a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	6a1b      	ldr	r3, [r3, #32]
 8003c5c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	881b      	ldrh	r3, [r3, #0]
 8003c62:	461a      	mov	r2, r3
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003c6c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	6a1b      	ldr	r3, [r3, #32]
 8003c72:	1c9a      	adds	r2, r3, #2
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	621a      	str	r2, [r3, #32]
 8003c78:	e008      	b.n	8003c8c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	6a1b      	ldr	r3, [r3, #32]
 8003c7e:	1c59      	adds	r1, r3, #1
 8003c80:	687a      	ldr	r2, [r7, #4]
 8003c82:	6211      	str	r1, [r2, #32]
 8003c84:	781a      	ldrb	r2, [r3, #0]
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003c90:	b29b      	uxth	r3, r3
 8003c92:	3b01      	subs	r3, #1
 8003c94:	b29b      	uxth	r3, r3
 8003c96:	687a      	ldr	r2, [r7, #4]
 8003c98:	4619      	mov	r1, r3
 8003c9a:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d10f      	bne.n	8003cc0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	68da      	ldr	r2, [r3, #12]
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003cae:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	68da      	ldr	r2, [r3, #12]
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003cbe:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003cc0:	2300      	movs	r3, #0
 8003cc2:	e000      	b.n	8003cc6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003cc4:	2302      	movs	r3, #2
  }
}
 8003cc6:	4618      	mov	r0, r3
 8003cc8:	3714      	adds	r7, #20
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	bc80      	pop	{r7}
 8003cce:	4770      	bx	lr

08003cd0 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	b082      	sub	sp, #8
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	68da      	ldr	r2, [r3, #12]
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003ce6:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	2220      	movs	r2, #32
 8003cec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003cf0:	6878      	ldr	r0, [r7, #4]
 8003cf2:	f7ff fe79 	bl	80039e8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003cf6:	2300      	movs	r3, #0
}
 8003cf8:	4618      	mov	r0, r3
 8003cfa:	3708      	adds	r7, #8
 8003cfc:	46bd      	mov	sp, r7
 8003cfe:	bd80      	pop	{r7, pc}

08003d00 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003d00:	b580      	push	{r7, lr}
 8003d02:	b08c      	sub	sp, #48	; 0x30
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003d0e:	b2db      	uxtb	r3, r3
 8003d10:	2b22      	cmp	r3, #34	; 0x22
 8003d12:	f040 80ae 	bne.w	8003e72 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	689b      	ldr	r3, [r3, #8]
 8003d1a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d1e:	d117      	bne.n	8003d50 <UART_Receive_IT+0x50>
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	691b      	ldr	r3, [r3, #16]
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d113      	bne.n	8003d50 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003d28:	2300      	movs	r3, #0
 8003d2a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d30:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	685b      	ldr	r3, [r3, #4]
 8003d38:	b29b      	uxth	r3, r3
 8003d3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d3e:	b29a      	uxth	r2, r3
 8003d40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d42:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d48:	1c9a      	adds	r2, r3, #2
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	629a      	str	r2, [r3, #40]	; 0x28
 8003d4e:	e026      	b.n	8003d9e <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d54:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8003d56:	2300      	movs	r3, #0
 8003d58:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	689b      	ldr	r3, [r3, #8]
 8003d5e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d62:	d007      	beq.n	8003d74 <UART_Receive_IT+0x74>
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	689b      	ldr	r3, [r3, #8]
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d10a      	bne.n	8003d82 <UART_Receive_IT+0x82>
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	691b      	ldr	r3, [r3, #16]
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d106      	bne.n	8003d82 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	685b      	ldr	r3, [r3, #4]
 8003d7a:	b2da      	uxtb	r2, r3
 8003d7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d7e:	701a      	strb	r2, [r3, #0]
 8003d80:	e008      	b.n	8003d94 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	685b      	ldr	r3, [r3, #4]
 8003d88:	b2db      	uxtb	r3, r3
 8003d8a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003d8e:	b2da      	uxtb	r2, r3
 8003d90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d92:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d98:	1c5a      	adds	r2, r3, #1
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003da2:	b29b      	uxth	r3, r3
 8003da4:	3b01      	subs	r3, #1
 8003da6:	b29b      	uxth	r3, r3
 8003da8:	687a      	ldr	r2, [r7, #4]
 8003daa:	4619      	mov	r1, r3
 8003dac:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d15d      	bne.n	8003e6e <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	68da      	ldr	r2, [r3, #12]
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f022 0220 	bic.w	r2, r2, #32
 8003dc0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	68da      	ldr	r2, [r3, #12]
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003dd0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	695a      	ldr	r2, [r3, #20]
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f022 0201 	bic.w	r2, r2, #1
 8003de0:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	2220      	movs	r2, #32
 8003de6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	2200      	movs	r2, #0
 8003dee:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003df4:	2b01      	cmp	r3, #1
 8003df6:	d135      	bne.n	8003e64 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	2200      	movs	r2, #0
 8003dfc:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	330c      	adds	r3, #12
 8003e04:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e06:	697b      	ldr	r3, [r7, #20]
 8003e08:	e853 3f00 	ldrex	r3, [r3]
 8003e0c:	613b      	str	r3, [r7, #16]
   return(result);
 8003e0e:	693b      	ldr	r3, [r7, #16]
 8003e10:	f023 0310 	bic.w	r3, r3, #16
 8003e14:	627b      	str	r3, [r7, #36]	; 0x24
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	330c      	adds	r3, #12
 8003e1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e1e:	623a      	str	r2, [r7, #32]
 8003e20:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e22:	69f9      	ldr	r1, [r7, #28]
 8003e24:	6a3a      	ldr	r2, [r7, #32]
 8003e26:	e841 2300 	strex	r3, r2, [r1]
 8003e2a:	61bb      	str	r3, [r7, #24]
   return(result);
 8003e2c:	69bb      	ldr	r3, [r7, #24]
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d1e5      	bne.n	8003dfe <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f003 0310 	and.w	r3, r3, #16
 8003e3c:	2b10      	cmp	r3, #16
 8003e3e:	d10a      	bne.n	8003e56 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003e40:	2300      	movs	r3, #0
 8003e42:	60fb      	str	r3, [r7, #12]
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	60fb      	str	r3, [r7, #12]
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	685b      	ldr	r3, [r3, #4]
 8003e52:	60fb      	str	r3, [r7, #12]
 8003e54:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003e5a:	4619      	mov	r1, r3
 8003e5c:	6878      	ldr	r0, [r7, #4]
 8003e5e:	f7ff fdd5 	bl	8003a0c <HAL_UARTEx_RxEventCallback>
 8003e62:	e002      	b.n	8003e6a <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003e64:	6878      	ldr	r0, [r7, #4]
 8003e66:	f7fc f9dd 	bl	8000224 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003e6a:	2300      	movs	r3, #0
 8003e6c:	e002      	b.n	8003e74 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8003e6e:	2300      	movs	r3, #0
 8003e70:	e000      	b.n	8003e74 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8003e72:	2302      	movs	r3, #2
  }
}
 8003e74:	4618      	mov	r0, r3
 8003e76:	3730      	adds	r7, #48	; 0x30
 8003e78:	46bd      	mov	sp, r7
 8003e7a:	bd80      	pop	{r7, pc}

08003e7c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003e7c:	b580      	push	{r7, lr}
 8003e7e:	b084      	sub	sp, #16
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	691b      	ldr	r3, [r3, #16]
 8003e8a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	68da      	ldr	r2, [r3, #12]
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	430a      	orrs	r2, r1
 8003e98:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	689a      	ldr	r2, [r3, #8]
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	691b      	ldr	r3, [r3, #16]
 8003ea2:	431a      	orrs	r2, r3
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	695b      	ldr	r3, [r3, #20]
 8003ea8:	4313      	orrs	r3, r2
 8003eaa:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	68db      	ldr	r3, [r3, #12]
 8003eb2:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003eb6:	f023 030c 	bic.w	r3, r3, #12
 8003eba:	687a      	ldr	r2, [r7, #4]
 8003ebc:	6812      	ldr	r2, [r2, #0]
 8003ebe:	68b9      	ldr	r1, [r7, #8]
 8003ec0:	430b      	orrs	r3, r1
 8003ec2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	695b      	ldr	r3, [r3, #20]
 8003eca:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	699a      	ldr	r2, [r3, #24]
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	430a      	orrs	r2, r1
 8003ed8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	4a2c      	ldr	r2, [pc, #176]	; (8003f90 <UART_SetConfig+0x114>)
 8003ee0:	4293      	cmp	r3, r2
 8003ee2:	d103      	bne.n	8003eec <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003ee4:	f7fe fc08 	bl	80026f8 <HAL_RCC_GetPCLK2Freq>
 8003ee8:	60f8      	str	r0, [r7, #12]
 8003eea:	e002      	b.n	8003ef2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003eec:	f7fe fbf0 	bl	80026d0 <HAL_RCC_GetPCLK1Freq>
 8003ef0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003ef2:	68fa      	ldr	r2, [r7, #12]
 8003ef4:	4613      	mov	r3, r2
 8003ef6:	009b      	lsls	r3, r3, #2
 8003ef8:	4413      	add	r3, r2
 8003efa:	009a      	lsls	r2, r3, #2
 8003efc:	441a      	add	r2, r3
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	685b      	ldr	r3, [r3, #4]
 8003f02:	009b      	lsls	r3, r3, #2
 8003f04:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f08:	4a22      	ldr	r2, [pc, #136]	; (8003f94 <UART_SetConfig+0x118>)
 8003f0a:	fba2 2303 	umull	r2, r3, r2, r3
 8003f0e:	095b      	lsrs	r3, r3, #5
 8003f10:	0119      	lsls	r1, r3, #4
 8003f12:	68fa      	ldr	r2, [r7, #12]
 8003f14:	4613      	mov	r3, r2
 8003f16:	009b      	lsls	r3, r3, #2
 8003f18:	4413      	add	r3, r2
 8003f1a:	009a      	lsls	r2, r3, #2
 8003f1c:	441a      	add	r2, r3
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	685b      	ldr	r3, [r3, #4]
 8003f22:	009b      	lsls	r3, r3, #2
 8003f24:	fbb2 f2f3 	udiv	r2, r2, r3
 8003f28:	4b1a      	ldr	r3, [pc, #104]	; (8003f94 <UART_SetConfig+0x118>)
 8003f2a:	fba3 0302 	umull	r0, r3, r3, r2
 8003f2e:	095b      	lsrs	r3, r3, #5
 8003f30:	2064      	movs	r0, #100	; 0x64
 8003f32:	fb00 f303 	mul.w	r3, r0, r3
 8003f36:	1ad3      	subs	r3, r2, r3
 8003f38:	011b      	lsls	r3, r3, #4
 8003f3a:	3332      	adds	r3, #50	; 0x32
 8003f3c:	4a15      	ldr	r2, [pc, #84]	; (8003f94 <UART_SetConfig+0x118>)
 8003f3e:	fba2 2303 	umull	r2, r3, r2, r3
 8003f42:	095b      	lsrs	r3, r3, #5
 8003f44:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003f48:	4419      	add	r1, r3
 8003f4a:	68fa      	ldr	r2, [r7, #12]
 8003f4c:	4613      	mov	r3, r2
 8003f4e:	009b      	lsls	r3, r3, #2
 8003f50:	4413      	add	r3, r2
 8003f52:	009a      	lsls	r2, r3, #2
 8003f54:	441a      	add	r2, r3
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	685b      	ldr	r3, [r3, #4]
 8003f5a:	009b      	lsls	r3, r3, #2
 8003f5c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003f60:	4b0c      	ldr	r3, [pc, #48]	; (8003f94 <UART_SetConfig+0x118>)
 8003f62:	fba3 0302 	umull	r0, r3, r3, r2
 8003f66:	095b      	lsrs	r3, r3, #5
 8003f68:	2064      	movs	r0, #100	; 0x64
 8003f6a:	fb00 f303 	mul.w	r3, r0, r3
 8003f6e:	1ad3      	subs	r3, r2, r3
 8003f70:	011b      	lsls	r3, r3, #4
 8003f72:	3332      	adds	r3, #50	; 0x32
 8003f74:	4a07      	ldr	r2, [pc, #28]	; (8003f94 <UART_SetConfig+0x118>)
 8003f76:	fba2 2303 	umull	r2, r3, r2, r3
 8003f7a:	095b      	lsrs	r3, r3, #5
 8003f7c:	f003 020f 	and.w	r2, r3, #15
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	440a      	add	r2, r1
 8003f86:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003f88:	bf00      	nop
 8003f8a:	3710      	adds	r7, #16
 8003f8c:	46bd      	mov	sp, r7
 8003f8e:	bd80      	pop	{r7, pc}
 8003f90:	40013800 	.word	0x40013800
 8003f94:	51eb851f 	.word	0x51eb851f

08003f98 <siprintf>:
 8003f98:	b40e      	push	{r1, r2, r3}
 8003f9a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003f9e:	b500      	push	{lr}
 8003fa0:	b09c      	sub	sp, #112	; 0x70
 8003fa2:	ab1d      	add	r3, sp, #116	; 0x74
 8003fa4:	9002      	str	r0, [sp, #8]
 8003fa6:	9006      	str	r0, [sp, #24]
 8003fa8:	9107      	str	r1, [sp, #28]
 8003faa:	9104      	str	r1, [sp, #16]
 8003fac:	4808      	ldr	r0, [pc, #32]	; (8003fd0 <siprintf+0x38>)
 8003fae:	4909      	ldr	r1, [pc, #36]	; (8003fd4 <siprintf+0x3c>)
 8003fb0:	f853 2b04 	ldr.w	r2, [r3], #4
 8003fb4:	9105      	str	r1, [sp, #20]
 8003fb6:	6800      	ldr	r0, [r0, #0]
 8003fb8:	a902      	add	r1, sp, #8
 8003fba:	9301      	str	r3, [sp, #4]
 8003fbc:	f000 f98e 	bl	80042dc <_svfiprintf_r>
 8003fc0:	2200      	movs	r2, #0
 8003fc2:	9b02      	ldr	r3, [sp, #8]
 8003fc4:	701a      	strb	r2, [r3, #0]
 8003fc6:	b01c      	add	sp, #112	; 0x70
 8003fc8:	f85d eb04 	ldr.w	lr, [sp], #4
 8003fcc:	b003      	add	sp, #12
 8003fce:	4770      	bx	lr
 8003fd0:	20000060 	.word	0x20000060
 8003fd4:	ffff0208 	.word	0xffff0208

08003fd8 <memset>:
 8003fd8:	4603      	mov	r3, r0
 8003fda:	4402      	add	r2, r0
 8003fdc:	4293      	cmp	r3, r2
 8003fde:	d100      	bne.n	8003fe2 <memset+0xa>
 8003fe0:	4770      	bx	lr
 8003fe2:	f803 1b01 	strb.w	r1, [r3], #1
 8003fe6:	e7f9      	b.n	8003fdc <memset+0x4>

08003fe8 <__errno>:
 8003fe8:	4b01      	ldr	r3, [pc, #4]	; (8003ff0 <__errno+0x8>)
 8003fea:	6818      	ldr	r0, [r3, #0]
 8003fec:	4770      	bx	lr
 8003fee:	bf00      	nop
 8003ff0:	20000060 	.word	0x20000060

08003ff4 <__libc_init_array>:
 8003ff4:	b570      	push	{r4, r5, r6, lr}
 8003ff6:	2600      	movs	r6, #0
 8003ff8:	4d0c      	ldr	r5, [pc, #48]	; (800402c <__libc_init_array+0x38>)
 8003ffa:	4c0d      	ldr	r4, [pc, #52]	; (8004030 <__libc_init_array+0x3c>)
 8003ffc:	1b64      	subs	r4, r4, r5
 8003ffe:	10a4      	asrs	r4, r4, #2
 8004000:	42a6      	cmp	r6, r4
 8004002:	d109      	bne.n	8004018 <__libc_init_array+0x24>
 8004004:	f000 fc7a 	bl	80048fc <_init>
 8004008:	2600      	movs	r6, #0
 800400a:	4d0a      	ldr	r5, [pc, #40]	; (8004034 <__libc_init_array+0x40>)
 800400c:	4c0a      	ldr	r4, [pc, #40]	; (8004038 <__libc_init_array+0x44>)
 800400e:	1b64      	subs	r4, r4, r5
 8004010:	10a4      	asrs	r4, r4, #2
 8004012:	42a6      	cmp	r6, r4
 8004014:	d105      	bne.n	8004022 <__libc_init_array+0x2e>
 8004016:	bd70      	pop	{r4, r5, r6, pc}
 8004018:	f855 3b04 	ldr.w	r3, [r5], #4
 800401c:	4798      	blx	r3
 800401e:	3601      	adds	r6, #1
 8004020:	e7ee      	b.n	8004000 <__libc_init_array+0xc>
 8004022:	f855 3b04 	ldr.w	r3, [r5], #4
 8004026:	4798      	blx	r3
 8004028:	3601      	adds	r6, #1
 800402a:	e7f2      	b.n	8004012 <__libc_init_array+0x1e>
 800402c:	08004994 	.word	0x08004994
 8004030:	08004994 	.word	0x08004994
 8004034:	08004994 	.word	0x08004994
 8004038:	08004998 	.word	0x08004998

0800403c <__retarget_lock_acquire_recursive>:
 800403c:	4770      	bx	lr

0800403e <__retarget_lock_release_recursive>:
 800403e:	4770      	bx	lr

08004040 <_free_r>:
 8004040:	b538      	push	{r3, r4, r5, lr}
 8004042:	4605      	mov	r5, r0
 8004044:	2900      	cmp	r1, #0
 8004046:	d040      	beq.n	80040ca <_free_r+0x8a>
 8004048:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800404c:	1f0c      	subs	r4, r1, #4
 800404e:	2b00      	cmp	r3, #0
 8004050:	bfb8      	it	lt
 8004052:	18e4      	addlt	r4, r4, r3
 8004054:	f000 f8dc 	bl	8004210 <__malloc_lock>
 8004058:	4a1c      	ldr	r2, [pc, #112]	; (80040cc <_free_r+0x8c>)
 800405a:	6813      	ldr	r3, [r2, #0]
 800405c:	b933      	cbnz	r3, 800406c <_free_r+0x2c>
 800405e:	6063      	str	r3, [r4, #4]
 8004060:	6014      	str	r4, [r2, #0]
 8004062:	4628      	mov	r0, r5
 8004064:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004068:	f000 b8d8 	b.w	800421c <__malloc_unlock>
 800406c:	42a3      	cmp	r3, r4
 800406e:	d908      	bls.n	8004082 <_free_r+0x42>
 8004070:	6820      	ldr	r0, [r4, #0]
 8004072:	1821      	adds	r1, r4, r0
 8004074:	428b      	cmp	r3, r1
 8004076:	bf01      	itttt	eq
 8004078:	6819      	ldreq	r1, [r3, #0]
 800407a:	685b      	ldreq	r3, [r3, #4]
 800407c:	1809      	addeq	r1, r1, r0
 800407e:	6021      	streq	r1, [r4, #0]
 8004080:	e7ed      	b.n	800405e <_free_r+0x1e>
 8004082:	461a      	mov	r2, r3
 8004084:	685b      	ldr	r3, [r3, #4]
 8004086:	b10b      	cbz	r3, 800408c <_free_r+0x4c>
 8004088:	42a3      	cmp	r3, r4
 800408a:	d9fa      	bls.n	8004082 <_free_r+0x42>
 800408c:	6811      	ldr	r1, [r2, #0]
 800408e:	1850      	adds	r0, r2, r1
 8004090:	42a0      	cmp	r0, r4
 8004092:	d10b      	bne.n	80040ac <_free_r+0x6c>
 8004094:	6820      	ldr	r0, [r4, #0]
 8004096:	4401      	add	r1, r0
 8004098:	1850      	adds	r0, r2, r1
 800409a:	4283      	cmp	r3, r0
 800409c:	6011      	str	r1, [r2, #0]
 800409e:	d1e0      	bne.n	8004062 <_free_r+0x22>
 80040a0:	6818      	ldr	r0, [r3, #0]
 80040a2:	685b      	ldr	r3, [r3, #4]
 80040a4:	4408      	add	r0, r1
 80040a6:	6010      	str	r0, [r2, #0]
 80040a8:	6053      	str	r3, [r2, #4]
 80040aa:	e7da      	b.n	8004062 <_free_r+0x22>
 80040ac:	d902      	bls.n	80040b4 <_free_r+0x74>
 80040ae:	230c      	movs	r3, #12
 80040b0:	602b      	str	r3, [r5, #0]
 80040b2:	e7d6      	b.n	8004062 <_free_r+0x22>
 80040b4:	6820      	ldr	r0, [r4, #0]
 80040b6:	1821      	adds	r1, r4, r0
 80040b8:	428b      	cmp	r3, r1
 80040ba:	bf01      	itttt	eq
 80040bc:	6819      	ldreq	r1, [r3, #0]
 80040be:	685b      	ldreq	r3, [r3, #4]
 80040c0:	1809      	addeq	r1, r1, r0
 80040c2:	6021      	streq	r1, [r4, #0]
 80040c4:	6063      	str	r3, [r4, #4]
 80040c6:	6054      	str	r4, [r2, #4]
 80040c8:	e7cb      	b.n	8004062 <_free_r+0x22>
 80040ca:	bd38      	pop	{r3, r4, r5, pc}
 80040cc:	20000314 	.word	0x20000314

080040d0 <sbrk_aligned>:
 80040d0:	b570      	push	{r4, r5, r6, lr}
 80040d2:	4e0e      	ldr	r6, [pc, #56]	; (800410c <sbrk_aligned+0x3c>)
 80040d4:	460c      	mov	r4, r1
 80040d6:	6831      	ldr	r1, [r6, #0]
 80040d8:	4605      	mov	r5, r0
 80040da:	b911      	cbnz	r1, 80040e2 <sbrk_aligned+0x12>
 80040dc:	f000 fbaa 	bl	8004834 <_sbrk_r>
 80040e0:	6030      	str	r0, [r6, #0]
 80040e2:	4621      	mov	r1, r4
 80040e4:	4628      	mov	r0, r5
 80040e6:	f000 fba5 	bl	8004834 <_sbrk_r>
 80040ea:	1c43      	adds	r3, r0, #1
 80040ec:	d00a      	beq.n	8004104 <sbrk_aligned+0x34>
 80040ee:	1cc4      	adds	r4, r0, #3
 80040f0:	f024 0403 	bic.w	r4, r4, #3
 80040f4:	42a0      	cmp	r0, r4
 80040f6:	d007      	beq.n	8004108 <sbrk_aligned+0x38>
 80040f8:	1a21      	subs	r1, r4, r0
 80040fa:	4628      	mov	r0, r5
 80040fc:	f000 fb9a 	bl	8004834 <_sbrk_r>
 8004100:	3001      	adds	r0, #1
 8004102:	d101      	bne.n	8004108 <sbrk_aligned+0x38>
 8004104:	f04f 34ff 	mov.w	r4, #4294967295
 8004108:	4620      	mov	r0, r4
 800410a:	bd70      	pop	{r4, r5, r6, pc}
 800410c:	20000318 	.word	0x20000318

08004110 <_malloc_r>:
 8004110:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004114:	1ccd      	adds	r5, r1, #3
 8004116:	f025 0503 	bic.w	r5, r5, #3
 800411a:	3508      	adds	r5, #8
 800411c:	2d0c      	cmp	r5, #12
 800411e:	bf38      	it	cc
 8004120:	250c      	movcc	r5, #12
 8004122:	2d00      	cmp	r5, #0
 8004124:	4607      	mov	r7, r0
 8004126:	db01      	blt.n	800412c <_malloc_r+0x1c>
 8004128:	42a9      	cmp	r1, r5
 800412a:	d905      	bls.n	8004138 <_malloc_r+0x28>
 800412c:	230c      	movs	r3, #12
 800412e:	2600      	movs	r6, #0
 8004130:	603b      	str	r3, [r7, #0]
 8004132:	4630      	mov	r0, r6
 8004134:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004138:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800420c <_malloc_r+0xfc>
 800413c:	f000 f868 	bl	8004210 <__malloc_lock>
 8004140:	f8d8 3000 	ldr.w	r3, [r8]
 8004144:	461c      	mov	r4, r3
 8004146:	bb5c      	cbnz	r4, 80041a0 <_malloc_r+0x90>
 8004148:	4629      	mov	r1, r5
 800414a:	4638      	mov	r0, r7
 800414c:	f7ff ffc0 	bl	80040d0 <sbrk_aligned>
 8004150:	1c43      	adds	r3, r0, #1
 8004152:	4604      	mov	r4, r0
 8004154:	d155      	bne.n	8004202 <_malloc_r+0xf2>
 8004156:	f8d8 4000 	ldr.w	r4, [r8]
 800415a:	4626      	mov	r6, r4
 800415c:	2e00      	cmp	r6, #0
 800415e:	d145      	bne.n	80041ec <_malloc_r+0xdc>
 8004160:	2c00      	cmp	r4, #0
 8004162:	d048      	beq.n	80041f6 <_malloc_r+0xe6>
 8004164:	6823      	ldr	r3, [r4, #0]
 8004166:	4631      	mov	r1, r6
 8004168:	4638      	mov	r0, r7
 800416a:	eb04 0903 	add.w	r9, r4, r3
 800416e:	f000 fb61 	bl	8004834 <_sbrk_r>
 8004172:	4581      	cmp	r9, r0
 8004174:	d13f      	bne.n	80041f6 <_malloc_r+0xe6>
 8004176:	6821      	ldr	r1, [r4, #0]
 8004178:	4638      	mov	r0, r7
 800417a:	1a6d      	subs	r5, r5, r1
 800417c:	4629      	mov	r1, r5
 800417e:	f7ff ffa7 	bl	80040d0 <sbrk_aligned>
 8004182:	3001      	adds	r0, #1
 8004184:	d037      	beq.n	80041f6 <_malloc_r+0xe6>
 8004186:	6823      	ldr	r3, [r4, #0]
 8004188:	442b      	add	r3, r5
 800418a:	6023      	str	r3, [r4, #0]
 800418c:	f8d8 3000 	ldr.w	r3, [r8]
 8004190:	2b00      	cmp	r3, #0
 8004192:	d038      	beq.n	8004206 <_malloc_r+0xf6>
 8004194:	685a      	ldr	r2, [r3, #4]
 8004196:	42a2      	cmp	r2, r4
 8004198:	d12b      	bne.n	80041f2 <_malloc_r+0xe2>
 800419a:	2200      	movs	r2, #0
 800419c:	605a      	str	r2, [r3, #4]
 800419e:	e00f      	b.n	80041c0 <_malloc_r+0xb0>
 80041a0:	6822      	ldr	r2, [r4, #0]
 80041a2:	1b52      	subs	r2, r2, r5
 80041a4:	d41f      	bmi.n	80041e6 <_malloc_r+0xd6>
 80041a6:	2a0b      	cmp	r2, #11
 80041a8:	d917      	bls.n	80041da <_malloc_r+0xca>
 80041aa:	1961      	adds	r1, r4, r5
 80041ac:	42a3      	cmp	r3, r4
 80041ae:	6025      	str	r5, [r4, #0]
 80041b0:	bf18      	it	ne
 80041b2:	6059      	strne	r1, [r3, #4]
 80041b4:	6863      	ldr	r3, [r4, #4]
 80041b6:	bf08      	it	eq
 80041b8:	f8c8 1000 	streq.w	r1, [r8]
 80041bc:	5162      	str	r2, [r4, r5]
 80041be:	604b      	str	r3, [r1, #4]
 80041c0:	4638      	mov	r0, r7
 80041c2:	f104 060b 	add.w	r6, r4, #11
 80041c6:	f000 f829 	bl	800421c <__malloc_unlock>
 80041ca:	f026 0607 	bic.w	r6, r6, #7
 80041ce:	1d23      	adds	r3, r4, #4
 80041d0:	1af2      	subs	r2, r6, r3
 80041d2:	d0ae      	beq.n	8004132 <_malloc_r+0x22>
 80041d4:	1b9b      	subs	r3, r3, r6
 80041d6:	50a3      	str	r3, [r4, r2]
 80041d8:	e7ab      	b.n	8004132 <_malloc_r+0x22>
 80041da:	42a3      	cmp	r3, r4
 80041dc:	6862      	ldr	r2, [r4, #4]
 80041de:	d1dd      	bne.n	800419c <_malloc_r+0x8c>
 80041e0:	f8c8 2000 	str.w	r2, [r8]
 80041e4:	e7ec      	b.n	80041c0 <_malloc_r+0xb0>
 80041e6:	4623      	mov	r3, r4
 80041e8:	6864      	ldr	r4, [r4, #4]
 80041ea:	e7ac      	b.n	8004146 <_malloc_r+0x36>
 80041ec:	4634      	mov	r4, r6
 80041ee:	6876      	ldr	r6, [r6, #4]
 80041f0:	e7b4      	b.n	800415c <_malloc_r+0x4c>
 80041f2:	4613      	mov	r3, r2
 80041f4:	e7cc      	b.n	8004190 <_malloc_r+0x80>
 80041f6:	230c      	movs	r3, #12
 80041f8:	4638      	mov	r0, r7
 80041fa:	603b      	str	r3, [r7, #0]
 80041fc:	f000 f80e 	bl	800421c <__malloc_unlock>
 8004200:	e797      	b.n	8004132 <_malloc_r+0x22>
 8004202:	6025      	str	r5, [r4, #0]
 8004204:	e7dc      	b.n	80041c0 <_malloc_r+0xb0>
 8004206:	605b      	str	r3, [r3, #4]
 8004208:	deff      	udf	#255	; 0xff
 800420a:	bf00      	nop
 800420c:	20000314 	.word	0x20000314

08004210 <__malloc_lock>:
 8004210:	4801      	ldr	r0, [pc, #4]	; (8004218 <__malloc_lock+0x8>)
 8004212:	f7ff bf13 	b.w	800403c <__retarget_lock_acquire_recursive>
 8004216:	bf00      	nop
 8004218:	20000310 	.word	0x20000310

0800421c <__malloc_unlock>:
 800421c:	4801      	ldr	r0, [pc, #4]	; (8004224 <__malloc_unlock+0x8>)
 800421e:	f7ff bf0e 	b.w	800403e <__retarget_lock_release_recursive>
 8004222:	bf00      	nop
 8004224:	20000310 	.word	0x20000310

08004228 <__ssputs_r>:
 8004228:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800422c:	461f      	mov	r7, r3
 800422e:	688e      	ldr	r6, [r1, #8]
 8004230:	4682      	mov	sl, r0
 8004232:	42be      	cmp	r6, r7
 8004234:	460c      	mov	r4, r1
 8004236:	4690      	mov	r8, r2
 8004238:	680b      	ldr	r3, [r1, #0]
 800423a:	d82c      	bhi.n	8004296 <__ssputs_r+0x6e>
 800423c:	898a      	ldrh	r2, [r1, #12]
 800423e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004242:	d026      	beq.n	8004292 <__ssputs_r+0x6a>
 8004244:	6965      	ldr	r5, [r4, #20]
 8004246:	6909      	ldr	r1, [r1, #16]
 8004248:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800424c:	eba3 0901 	sub.w	r9, r3, r1
 8004250:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004254:	1c7b      	adds	r3, r7, #1
 8004256:	444b      	add	r3, r9
 8004258:	106d      	asrs	r5, r5, #1
 800425a:	429d      	cmp	r5, r3
 800425c:	bf38      	it	cc
 800425e:	461d      	movcc	r5, r3
 8004260:	0553      	lsls	r3, r2, #21
 8004262:	d527      	bpl.n	80042b4 <__ssputs_r+0x8c>
 8004264:	4629      	mov	r1, r5
 8004266:	f7ff ff53 	bl	8004110 <_malloc_r>
 800426a:	4606      	mov	r6, r0
 800426c:	b360      	cbz	r0, 80042c8 <__ssputs_r+0xa0>
 800426e:	464a      	mov	r2, r9
 8004270:	6921      	ldr	r1, [r4, #16]
 8004272:	f000 fafd 	bl	8004870 <memcpy>
 8004276:	89a3      	ldrh	r3, [r4, #12]
 8004278:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800427c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004280:	81a3      	strh	r3, [r4, #12]
 8004282:	6126      	str	r6, [r4, #16]
 8004284:	444e      	add	r6, r9
 8004286:	6026      	str	r6, [r4, #0]
 8004288:	463e      	mov	r6, r7
 800428a:	6165      	str	r5, [r4, #20]
 800428c:	eba5 0509 	sub.w	r5, r5, r9
 8004290:	60a5      	str	r5, [r4, #8]
 8004292:	42be      	cmp	r6, r7
 8004294:	d900      	bls.n	8004298 <__ssputs_r+0x70>
 8004296:	463e      	mov	r6, r7
 8004298:	4632      	mov	r2, r6
 800429a:	4641      	mov	r1, r8
 800429c:	6820      	ldr	r0, [r4, #0]
 800429e:	f000 faaf 	bl	8004800 <memmove>
 80042a2:	2000      	movs	r0, #0
 80042a4:	68a3      	ldr	r3, [r4, #8]
 80042a6:	1b9b      	subs	r3, r3, r6
 80042a8:	60a3      	str	r3, [r4, #8]
 80042aa:	6823      	ldr	r3, [r4, #0]
 80042ac:	4433      	add	r3, r6
 80042ae:	6023      	str	r3, [r4, #0]
 80042b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80042b4:	462a      	mov	r2, r5
 80042b6:	f000 fae9 	bl	800488c <_realloc_r>
 80042ba:	4606      	mov	r6, r0
 80042bc:	2800      	cmp	r0, #0
 80042be:	d1e0      	bne.n	8004282 <__ssputs_r+0x5a>
 80042c0:	4650      	mov	r0, sl
 80042c2:	6921      	ldr	r1, [r4, #16]
 80042c4:	f7ff febc 	bl	8004040 <_free_r>
 80042c8:	230c      	movs	r3, #12
 80042ca:	f8ca 3000 	str.w	r3, [sl]
 80042ce:	89a3      	ldrh	r3, [r4, #12]
 80042d0:	f04f 30ff 	mov.w	r0, #4294967295
 80042d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80042d8:	81a3      	strh	r3, [r4, #12]
 80042da:	e7e9      	b.n	80042b0 <__ssputs_r+0x88>

080042dc <_svfiprintf_r>:
 80042dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80042e0:	4698      	mov	r8, r3
 80042e2:	898b      	ldrh	r3, [r1, #12]
 80042e4:	4607      	mov	r7, r0
 80042e6:	061b      	lsls	r3, r3, #24
 80042e8:	460d      	mov	r5, r1
 80042ea:	4614      	mov	r4, r2
 80042ec:	b09d      	sub	sp, #116	; 0x74
 80042ee:	d50e      	bpl.n	800430e <_svfiprintf_r+0x32>
 80042f0:	690b      	ldr	r3, [r1, #16]
 80042f2:	b963      	cbnz	r3, 800430e <_svfiprintf_r+0x32>
 80042f4:	2140      	movs	r1, #64	; 0x40
 80042f6:	f7ff ff0b 	bl	8004110 <_malloc_r>
 80042fa:	6028      	str	r0, [r5, #0]
 80042fc:	6128      	str	r0, [r5, #16]
 80042fe:	b920      	cbnz	r0, 800430a <_svfiprintf_r+0x2e>
 8004300:	230c      	movs	r3, #12
 8004302:	603b      	str	r3, [r7, #0]
 8004304:	f04f 30ff 	mov.w	r0, #4294967295
 8004308:	e0d0      	b.n	80044ac <_svfiprintf_r+0x1d0>
 800430a:	2340      	movs	r3, #64	; 0x40
 800430c:	616b      	str	r3, [r5, #20]
 800430e:	2300      	movs	r3, #0
 8004310:	9309      	str	r3, [sp, #36]	; 0x24
 8004312:	2320      	movs	r3, #32
 8004314:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004318:	2330      	movs	r3, #48	; 0x30
 800431a:	f04f 0901 	mov.w	r9, #1
 800431e:	f8cd 800c 	str.w	r8, [sp, #12]
 8004322:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 80044c4 <_svfiprintf_r+0x1e8>
 8004326:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800432a:	4623      	mov	r3, r4
 800432c:	469a      	mov	sl, r3
 800432e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004332:	b10a      	cbz	r2, 8004338 <_svfiprintf_r+0x5c>
 8004334:	2a25      	cmp	r2, #37	; 0x25
 8004336:	d1f9      	bne.n	800432c <_svfiprintf_r+0x50>
 8004338:	ebba 0b04 	subs.w	fp, sl, r4
 800433c:	d00b      	beq.n	8004356 <_svfiprintf_r+0x7a>
 800433e:	465b      	mov	r3, fp
 8004340:	4622      	mov	r2, r4
 8004342:	4629      	mov	r1, r5
 8004344:	4638      	mov	r0, r7
 8004346:	f7ff ff6f 	bl	8004228 <__ssputs_r>
 800434a:	3001      	adds	r0, #1
 800434c:	f000 80a9 	beq.w	80044a2 <_svfiprintf_r+0x1c6>
 8004350:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004352:	445a      	add	r2, fp
 8004354:	9209      	str	r2, [sp, #36]	; 0x24
 8004356:	f89a 3000 	ldrb.w	r3, [sl]
 800435a:	2b00      	cmp	r3, #0
 800435c:	f000 80a1 	beq.w	80044a2 <_svfiprintf_r+0x1c6>
 8004360:	2300      	movs	r3, #0
 8004362:	f04f 32ff 	mov.w	r2, #4294967295
 8004366:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800436a:	f10a 0a01 	add.w	sl, sl, #1
 800436e:	9304      	str	r3, [sp, #16]
 8004370:	9307      	str	r3, [sp, #28]
 8004372:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004376:	931a      	str	r3, [sp, #104]	; 0x68
 8004378:	4654      	mov	r4, sl
 800437a:	2205      	movs	r2, #5
 800437c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004380:	4850      	ldr	r0, [pc, #320]	; (80044c4 <_svfiprintf_r+0x1e8>)
 8004382:	f000 fa67 	bl	8004854 <memchr>
 8004386:	9a04      	ldr	r2, [sp, #16]
 8004388:	b9d8      	cbnz	r0, 80043c2 <_svfiprintf_r+0xe6>
 800438a:	06d0      	lsls	r0, r2, #27
 800438c:	bf44      	itt	mi
 800438e:	2320      	movmi	r3, #32
 8004390:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004394:	0711      	lsls	r1, r2, #28
 8004396:	bf44      	itt	mi
 8004398:	232b      	movmi	r3, #43	; 0x2b
 800439a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800439e:	f89a 3000 	ldrb.w	r3, [sl]
 80043a2:	2b2a      	cmp	r3, #42	; 0x2a
 80043a4:	d015      	beq.n	80043d2 <_svfiprintf_r+0xf6>
 80043a6:	4654      	mov	r4, sl
 80043a8:	2000      	movs	r0, #0
 80043aa:	f04f 0c0a 	mov.w	ip, #10
 80043ae:	9a07      	ldr	r2, [sp, #28]
 80043b0:	4621      	mov	r1, r4
 80043b2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80043b6:	3b30      	subs	r3, #48	; 0x30
 80043b8:	2b09      	cmp	r3, #9
 80043ba:	d94d      	bls.n	8004458 <_svfiprintf_r+0x17c>
 80043bc:	b1b0      	cbz	r0, 80043ec <_svfiprintf_r+0x110>
 80043be:	9207      	str	r2, [sp, #28]
 80043c0:	e014      	b.n	80043ec <_svfiprintf_r+0x110>
 80043c2:	eba0 0308 	sub.w	r3, r0, r8
 80043c6:	fa09 f303 	lsl.w	r3, r9, r3
 80043ca:	4313      	orrs	r3, r2
 80043cc:	46a2      	mov	sl, r4
 80043ce:	9304      	str	r3, [sp, #16]
 80043d0:	e7d2      	b.n	8004378 <_svfiprintf_r+0x9c>
 80043d2:	9b03      	ldr	r3, [sp, #12]
 80043d4:	1d19      	adds	r1, r3, #4
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	9103      	str	r1, [sp, #12]
 80043da:	2b00      	cmp	r3, #0
 80043dc:	bfbb      	ittet	lt
 80043de:	425b      	neglt	r3, r3
 80043e0:	f042 0202 	orrlt.w	r2, r2, #2
 80043e4:	9307      	strge	r3, [sp, #28]
 80043e6:	9307      	strlt	r3, [sp, #28]
 80043e8:	bfb8      	it	lt
 80043ea:	9204      	strlt	r2, [sp, #16]
 80043ec:	7823      	ldrb	r3, [r4, #0]
 80043ee:	2b2e      	cmp	r3, #46	; 0x2e
 80043f0:	d10c      	bne.n	800440c <_svfiprintf_r+0x130>
 80043f2:	7863      	ldrb	r3, [r4, #1]
 80043f4:	2b2a      	cmp	r3, #42	; 0x2a
 80043f6:	d134      	bne.n	8004462 <_svfiprintf_r+0x186>
 80043f8:	9b03      	ldr	r3, [sp, #12]
 80043fa:	3402      	adds	r4, #2
 80043fc:	1d1a      	adds	r2, r3, #4
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	9203      	str	r2, [sp, #12]
 8004402:	2b00      	cmp	r3, #0
 8004404:	bfb8      	it	lt
 8004406:	f04f 33ff 	movlt.w	r3, #4294967295
 800440a:	9305      	str	r3, [sp, #20]
 800440c:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 80044c8 <_svfiprintf_r+0x1ec>
 8004410:	2203      	movs	r2, #3
 8004412:	4650      	mov	r0, sl
 8004414:	7821      	ldrb	r1, [r4, #0]
 8004416:	f000 fa1d 	bl	8004854 <memchr>
 800441a:	b138      	cbz	r0, 800442c <_svfiprintf_r+0x150>
 800441c:	2240      	movs	r2, #64	; 0x40
 800441e:	9b04      	ldr	r3, [sp, #16]
 8004420:	eba0 000a 	sub.w	r0, r0, sl
 8004424:	4082      	lsls	r2, r0
 8004426:	4313      	orrs	r3, r2
 8004428:	3401      	adds	r4, #1
 800442a:	9304      	str	r3, [sp, #16]
 800442c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004430:	2206      	movs	r2, #6
 8004432:	4826      	ldr	r0, [pc, #152]	; (80044cc <_svfiprintf_r+0x1f0>)
 8004434:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004438:	f000 fa0c 	bl	8004854 <memchr>
 800443c:	2800      	cmp	r0, #0
 800443e:	d038      	beq.n	80044b2 <_svfiprintf_r+0x1d6>
 8004440:	4b23      	ldr	r3, [pc, #140]	; (80044d0 <_svfiprintf_r+0x1f4>)
 8004442:	bb1b      	cbnz	r3, 800448c <_svfiprintf_r+0x1b0>
 8004444:	9b03      	ldr	r3, [sp, #12]
 8004446:	3307      	adds	r3, #7
 8004448:	f023 0307 	bic.w	r3, r3, #7
 800444c:	3308      	adds	r3, #8
 800444e:	9303      	str	r3, [sp, #12]
 8004450:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004452:	4433      	add	r3, r6
 8004454:	9309      	str	r3, [sp, #36]	; 0x24
 8004456:	e768      	b.n	800432a <_svfiprintf_r+0x4e>
 8004458:	460c      	mov	r4, r1
 800445a:	2001      	movs	r0, #1
 800445c:	fb0c 3202 	mla	r2, ip, r2, r3
 8004460:	e7a6      	b.n	80043b0 <_svfiprintf_r+0xd4>
 8004462:	2300      	movs	r3, #0
 8004464:	f04f 0c0a 	mov.w	ip, #10
 8004468:	4619      	mov	r1, r3
 800446a:	3401      	adds	r4, #1
 800446c:	9305      	str	r3, [sp, #20]
 800446e:	4620      	mov	r0, r4
 8004470:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004474:	3a30      	subs	r2, #48	; 0x30
 8004476:	2a09      	cmp	r2, #9
 8004478:	d903      	bls.n	8004482 <_svfiprintf_r+0x1a6>
 800447a:	2b00      	cmp	r3, #0
 800447c:	d0c6      	beq.n	800440c <_svfiprintf_r+0x130>
 800447e:	9105      	str	r1, [sp, #20]
 8004480:	e7c4      	b.n	800440c <_svfiprintf_r+0x130>
 8004482:	4604      	mov	r4, r0
 8004484:	2301      	movs	r3, #1
 8004486:	fb0c 2101 	mla	r1, ip, r1, r2
 800448a:	e7f0      	b.n	800446e <_svfiprintf_r+0x192>
 800448c:	ab03      	add	r3, sp, #12
 800448e:	9300      	str	r3, [sp, #0]
 8004490:	462a      	mov	r2, r5
 8004492:	4638      	mov	r0, r7
 8004494:	4b0f      	ldr	r3, [pc, #60]	; (80044d4 <_svfiprintf_r+0x1f8>)
 8004496:	a904      	add	r1, sp, #16
 8004498:	f3af 8000 	nop.w
 800449c:	1c42      	adds	r2, r0, #1
 800449e:	4606      	mov	r6, r0
 80044a0:	d1d6      	bne.n	8004450 <_svfiprintf_r+0x174>
 80044a2:	89ab      	ldrh	r3, [r5, #12]
 80044a4:	065b      	lsls	r3, r3, #25
 80044a6:	f53f af2d 	bmi.w	8004304 <_svfiprintf_r+0x28>
 80044aa:	9809      	ldr	r0, [sp, #36]	; 0x24
 80044ac:	b01d      	add	sp, #116	; 0x74
 80044ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80044b2:	ab03      	add	r3, sp, #12
 80044b4:	9300      	str	r3, [sp, #0]
 80044b6:	462a      	mov	r2, r5
 80044b8:	4638      	mov	r0, r7
 80044ba:	4b06      	ldr	r3, [pc, #24]	; (80044d4 <_svfiprintf_r+0x1f8>)
 80044bc:	a904      	add	r1, sp, #16
 80044be:	f000 f87d 	bl	80045bc <_printf_i>
 80044c2:	e7eb      	b.n	800449c <_svfiprintf_r+0x1c0>
 80044c4:	0800495e 	.word	0x0800495e
 80044c8:	08004964 	.word	0x08004964
 80044cc:	08004968 	.word	0x08004968
 80044d0:	00000000 	.word	0x00000000
 80044d4:	08004229 	.word	0x08004229

080044d8 <_printf_common>:
 80044d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80044dc:	4616      	mov	r6, r2
 80044de:	4699      	mov	r9, r3
 80044e0:	688a      	ldr	r2, [r1, #8]
 80044e2:	690b      	ldr	r3, [r1, #16]
 80044e4:	4607      	mov	r7, r0
 80044e6:	4293      	cmp	r3, r2
 80044e8:	bfb8      	it	lt
 80044ea:	4613      	movlt	r3, r2
 80044ec:	6033      	str	r3, [r6, #0]
 80044ee:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80044f2:	460c      	mov	r4, r1
 80044f4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80044f8:	b10a      	cbz	r2, 80044fe <_printf_common+0x26>
 80044fa:	3301      	adds	r3, #1
 80044fc:	6033      	str	r3, [r6, #0]
 80044fe:	6823      	ldr	r3, [r4, #0]
 8004500:	0699      	lsls	r1, r3, #26
 8004502:	bf42      	ittt	mi
 8004504:	6833      	ldrmi	r3, [r6, #0]
 8004506:	3302      	addmi	r3, #2
 8004508:	6033      	strmi	r3, [r6, #0]
 800450a:	6825      	ldr	r5, [r4, #0]
 800450c:	f015 0506 	ands.w	r5, r5, #6
 8004510:	d106      	bne.n	8004520 <_printf_common+0x48>
 8004512:	f104 0a19 	add.w	sl, r4, #25
 8004516:	68e3      	ldr	r3, [r4, #12]
 8004518:	6832      	ldr	r2, [r6, #0]
 800451a:	1a9b      	subs	r3, r3, r2
 800451c:	42ab      	cmp	r3, r5
 800451e:	dc2b      	bgt.n	8004578 <_printf_common+0xa0>
 8004520:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004524:	1e13      	subs	r3, r2, #0
 8004526:	6822      	ldr	r2, [r4, #0]
 8004528:	bf18      	it	ne
 800452a:	2301      	movne	r3, #1
 800452c:	0692      	lsls	r2, r2, #26
 800452e:	d430      	bmi.n	8004592 <_printf_common+0xba>
 8004530:	4649      	mov	r1, r9
 8004532:	4638      	mov	r0, r7
 8004534:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004538:	47c0      	blx	r8
 800453a:	3001      	adds	r0, #1
 800453c:	d023      	beq.n	8004586 <_printf_common+0xae>
 800453e:	6823      	ldr	r3, [r4, #0]
 8004540:	6922      	ldr	r2, [r4, #16]
 8004542:	f003 0306 	and.w	r3, r3, #6
 8004546:	2b04      	cmp	r3, #4
 8004548:	bf14      	ite	ne
 800454a:	2500      	movne	r5, #0
 800454c:	6833      	ldreq	r3, [r6, #0]
 800454e:	f04f 0600 	mov.w	r6, #0
 8004552:	bf08      	it	eq
 8004554:	68e5      	ldreq	r5, [r4, #12]
 8004556:	f104 041a 	add.w	r4, r4, #26
 800455a:	bf08      	it	eq
 800455c:	1aed      	subeq	r5, r5, r3
 800455e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8004562:	bf08      	it	eq
 8004564:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004568:	4293      	cmp	r3, r2
 800456a:	bfc4      	itt	gt
 800456c:	1a9b      	subgt	r3, r3, r2
 800456e:	18ed      	addgt	r5, r5, r3
 8004570:	42b5      	cmp	r5, r6
 8004572:	d11a      	bne.n	80045aa <_printf_common+0xd2>
 8004574:	2000      	movs	r0, #0
 8004576:	e008      	b.n	800458a <_printf_common+0xb2>
 8004578:	2301      	movs	r3, #1
 800457a:	4652      	mov	r2, sl
 800457c:	4649      	mov	r1, r9
 800457e:	4638      	mov	r0, r7
 8004580:	47c0      	blx	r8
 8004582:	3001      	adds	r0, #1
 8004584:	d103      	bne.n	800458e <_printf_common+0xb6>
 8004586:	f04f 30ff 	mov.w	r0, #4294967295
 800458a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800458e:	3501      	adds	r5, #1
 8004590:	e7c1      	b.n	8004516 <_printf_common+0x3e>
 8004592:	2030      	movs	r0, #48	; 0x30
 8004594:	18e1      	adds	r1, r4, r3
 8004596:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800459a:	1c5a      	adds	r2, r3, #1
 800459c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80045a0:	4422      	add	r2, r4
 80045a2:	3302      	adds	r3, #2
 80045a4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80045a8:	e7c2      	b.n	8004530 <_printf_common+0x58>
 80045aa:	2301      	movs	r3, #1
 80045ac:	4622      	mov	r2, r4
 80045ae:	4649      	mov	r1, r9
 80045b0:	4638      	mov	r0, r7
 80045b2:	47c0      	blx	r8
 80045b4:	3001      	adds	r0, #1
 80045b6:	d0e6      	beq.n	8004586 <_printf_common+0xae>
 80045b8:	3601      	adds	r6, #1
 80045ba:	e7d9      	b.n	8004570 <_printf_common+0x98>

080045bc <_printf_i>:
 80045bc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80045c0:	7e0f      	ldrb	r7, [r1, #24]
 80045c2:	4691      	mov	r9, r2
 80045c4:	2f78      	cmp	r7, #120	; 0x78
 80045c6:	4680      	mov	r8, r0
 80045c8:	460c      	mov	r4, r1
 80045ca:	469a      	mov	sl, r3
 80045cc:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80045ce:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80045d2:	d807      	bhi.n	80045e4 <_printf_i+0x28>
 80045d4:	2f62      	cmp	r7, #98	; 0x62
 80045d6:	d80a      	bhi.n	80045ee <_printf_i+0x32>
 80045d8:	2f00      	cmp	r7, #0
 80045da:	f000 80d5 	beq.w	8004788 <_printf_i+0x1cc>
 80045de:	2f58      	cmp	r7, #88	; 0x58
 80045e0:	f000 80c1 	beq.w	8004766 <_printf_i+0x1aa>
 80045e4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80045e8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80045ec:	e03a      	b.n	8004664 <_printf_i+0xa8>
 80045ee:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80045f2:	2b15      	cmp	r3, #21
 80045f4:	d8f6      	bhi.n	80045e4 <_printf_i+0x28>
 80045f6:	a101      	add	r1, pc, #4	; (adr r1, 80045fc <_printf_i+0x40>)
 80045f8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80045fc:	08004655 	.word	0x08004655
 8004600:	08004669 	.word	0x08004669
 8004604:	080045e5 	.word	0x080045e5
 8004608:	080045e5 	.word	0x080045e5
 800460c:	080045e5 	.word	0x080045e5
 8004610:	080045e5 	.word	0x080045e5
 8004614:	08004669 	.word	0x08004669
 8004618:	080045e5 	.word	0x080045e5
 800461c:	080045e5 	.word	0x080045e5
 8004620:	080045e5 	.word	0x080045e5
 8004624:	080045e5 	.word	0x080045e5
 8004628:	0800476f 	.word	0x0800476f
 800462c:	08004695 	.word	0x08004695
 8004630:	08004729 	.word	0x08004729
 8004634:	080045e5 	.word	0x080045e5
 8004638:	080045e5 	.word	0x080045e5
 800463c:	08004791 	.word	0x08004791
 8004640:	080045e5 	.word	0x080045e5
 8004644:	08004695 	.word	0x08004695
 8004648:	080045e5 	.word	0x080045e5
 800464c:	080045e5 	.word	0x080045e5
 8004650:	08004731 	.word	0x08004731
 8004654:	682b      	ldr	r3, [r5, #0]
 8004656:	1d1a      	adds	r2, r3, #4
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	602a      	str	r2, [r5, #0]
 800465c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004660:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004664:	2301      	movs	r3, #1
 8004666:	e0a0      	b.n	80047aa <_printf_i+0x1ee>
 8004668:	6820      	ldr	r0, [r4, #0]
 800466a:	682b      	ldr	r3, [r5, #0]
 800466c:	0607      	lsls	r7, r0, #24
 800466e:	f103 0104 	add.w	r1, r3, #4
 8004672:	6029      	str	r1, [r5, #0]
 8004674:	d501      	bpl.n	800467a <_printf_i+0xbe>
 8004676:	681e      	ldr	r6, [r3, #0]
 8004678:	e003      	b.n	8004682 <_printf_i+0xc6>
 800467a:	0646      	lsls	r6, r0, #25
 800467c:	d5fb      	bpl.n	8004676 <_printf_i+0xba>
 800467e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8004682:	2e00      	cmp	r6, #0
 8004684:	da03      	bge.n	800468e <_printf_i+0xd2>
 8004686:	232d      	movs	r3, #45	; 0x2d
 8004688:	4276      	negs	r6, r6
 800468a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800468e:	230a      	movs	r3, #10
 8004690:	4859      	ldr	r0, [pc, #356]	; (80047f8 <_printf_i+0x23c>)
 8004692:	e012      	b.n	80046ba <_printf_i+0xfe>
 8004694:	682b      	ldr	r3, [r5, #0]
 8004696:	6820      	ldr	r0, [r4, #0]
 8004698:	1d19      	adds	r1, r3, #4
 800469a:	6029      	str	r1, [r5, #0]
 800469c:	0605      	lsls	r5, r0, #24
 800469e:	d501      	bpl.n	80046a4 <_printf_i+0xe8>
 80046a0:	681e      	ldr	r6, [r3, #0]
 80046a2:	e002      	b.n	80046aa <_printf_i+0xee>
 80046a4:	0641      	lsls	r1, r0, #25
 80046a6:	d5fb      	bpl.n	80046a0 <_printf_i+0xe4>
 80046a8:	881e      	ldrh	r6, [r3, #0]
 80046aa:	2f6f      	cmp	r7, #111	; 0x6f
 80046ac:	bf0c      	ite	eq
 80046ae:	2308      	moveq	r3, #8
 80046b0:	230a      	movne	r3, #10
 80046b2:	4851      	ldr	r0, [pc, #324]	; (80047f8 <_printf_i+0x23c>)
 80046b4:	2100      	movs	r1, #0
 80046b6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80046ba:	6865      	ldr	r5, [r4, #4]
 80046bc:	2d00      	cmp	r5, #0
 80046be:	bfa8      	it	ge
 80046c0:	6821      	ldrge	r1, [r4, #0]
 80046c2:	60a5      	str	r5, [r4, #8]
 80046c4:	bfa4      	itt	ge
 80046c6:	f021 0104 	bicge.w	r1, r1, #4
 80046ca:	6021      	strge	r1, [r4, #0]
 80046cc:	b90e      	cbnz	r6, 80046d2 <_printf_i+0x116>
 80046ce:	2d00      	cmp	r5, #0
 80046d0:	d04b      	beq.n	800476a <_printf_i+0x1ae>
 80046d2:	4615      	mov	r5, r2
 80046d4:	fbb6 f1f3 	udiv	r1, r6, r3
 80046d8:	fb03 6711 	mls	r7, r3, r1, r6
 80046dc:	5dc7      	ldrb	r7, [r0, r7]
 80046de:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80046e2:	4637      	mov	r7, r6
 80046e4:	42bb      	cmp	r3, r7
 80046e6:	460e      	mov	r6, r1
 80046e8:	d9f4      	bls.n	80046d4 <_printf_i+0x118>
 80046ea:	2b08      	cmp	r3, #8
 80046ec:	d10b      	bne.n	8004706 <_printf_i+0x14a>
 80046ee:	6823      	ldr	r3, [r4, #0]
 80046f0:	07de      	lsls	r6, r3, #31
 80046f2:	d508      	bpl.n	8004706 <_printf_i+0x14a>
 80046f4:	6923      	ldr	r3, [r4, #16]
 80046f6:	6861      	ldr	r1, [r4, #4]
 80046f8:	4299      	cmp	r1, r3
 80046fa:	bfde      	ittt	le
 80046fc:	2330      	movle	r3, #48	; 0x30
 80046fe:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004702:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004706:	1b52      	subs	r2, r2, r5
 8004708:	6122      	str	r2, [r4, #16]
 800470a:	464b      	mov	r3, r9
 800470c:	4621      	mov	r1, r4
 800470e:	4640      	mov	r0, r8
 8004710:	f8cd a000 	str.w	sl, [sp]
 8004714:	aa03      	add	r2, sp, #12
 8004716:	f7ff fedf 	bl	80044d8 <_printf_common>
 800471a:	3001      	adds	r0, #1
 800471c:	d14a      	bne.n	80047b4 <_printf_i+0x1f8>
 800471e:	f04f 30ff 	mov.w	r0, #4294967295
 8004722:	b004      	add	sp, #16
 8004724:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004728:	6823      	ldr	r3, [r4, #0]
 800472a:	f043 0320 	orr.w	r3, r3, #32
 800472e:	6023      	str	r3, [r4, #0]
 8004730:	2778      	movs	r7, #120	; 0x78
 8004732:	4832      	ldr	r0, [pc, #200]	; (80047fc <_printf_i+0x240>)
 8004734:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004738:	6823      	ldr	r3, [r4, #0]
 800473a:	6829      	ldr	r1, [r5, #0]
 800473c:	061f      	lsls	r7, r3, #24
 800473e:	f851 6b04 	ldr.w	r6, [r1], #4
 8004742:	d402      	bmi.n	800474a <_printf_i+0x18e>
 8004744:	065f      	lsls	r7, r3, #25
 8004746:	bf48      	it	mi
 8004748:	b2b6      	uxthmi	r6, r6
 800474a:	07df      	lsls	r7, r3, #31
 800474c:	bf48      	it	mi
 800474e:	f043 0320 	orrmi.w	r3, r3, #32
 8004752:	6029      	str	r1, [r5, #0]
 8004754:	bf48      	it	mi
 8004756:	6023      	strmi	r3, [r4, #0]
 8004758:	b91e      	cbnz	r6, 8004762 <_printf_i+0x1a6>
 800475a:	6823      	ldr	r3, [r4, #0]
 800475c:	f023 0320 	bic.w	r3, r3, #32
 8004760:	6023      	str	r3, [r4, #0]
 8004762:	2310      	movs	r3, #16
 8004764:	e7a6      	b.n	80046b4 <_printf_i+0xf8>
 8004766:	4824      	ldr	r0, [pc, #144]	; (80047f8 <_printf_i+0x23c>)
 8004768:	e7e4      	b.n	8004734 <_printf_i+0x178>
 800476a:	4615      	mov	r5, r2
 800476c:	e7bd      	b.n	80046ea <_printf_i+0x12e>
 800476e:	682b      	ldr	r3, [r5, #0]
 8004770:	6826      	ldr	r6, [r4, #0]
 8004772:	1d18      	adds	r0, r3, #4
 8004774:	6961      	ldr	r1, [r4, #20]
 8004776:	6028      	str	r0, [r5, #0]
 8004778:	0635      	lsls	r5, r6, #24
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	d501      	bpl.n	8004782 <_printf_i+0x1c6>
 800477e:	6019      	str	r1, [r3, #0]
 8004780:	e002      	b.n	8004788 <_printf_i+0x1cc>
 8004782:	0670      	lsls	r0, r6, #25
 8004784:	d5fb      	bpl.n	800477e <_printf_i+0x1c2>
 8004786:	8019      	strh	r1, [r3, #0]
 8004788:	2300      	movs	r3, #0
 800478a:	4615      	mov	r5, r2
 800478c:	6123      	str	r3, [r4, #16]
 800478e:	e7bc      	b.n	800470a <_printf_i+0x14e>
 8004790:	682b      	ldr	r3, [r5, #0]
 8004792:	2100      	movs	r1, #0
 8004794:	1d1a      	adds	r2, r3, #4
 8004796:	602a      	str	r2, [r5, #0]
 8004798:	681d      	ldr	r5, [r3, #0]
 800479a:	6862      	ldr	r2, [r4, #4]
 800479c:	4628      	mov	r0, r5
 800479e:	f000 f859 	bl	8004854 <memchr>
 80047a2:	b108      	cbz	r0, 80047a8 <_printf_i+0x1ec>
 80047a4:	1b40      	subs	r0, r0, r5
 80047a6:	6060      	str	r0, [r4, #4]
 80047a8:	6863      	ldr	r3, [r4, #4]
 80047aa:	6123      	str	r3, [r4, #16]
 80047ac:	2300      	movs	r3, #0
 80047ae:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80047b2:	e7aa      	b.n	800470a <_printf_i+0x14e>
 80047b4:	462a      	mov	r2, r5
 80047b6:	4649      	mov	r1, r9
 80047b8:	4640      	mov	r0, r8
 80047ba:	6923      	ldr	r3, [r4, #16]
 80047bc:	47d0      	blx	sl
 80047be:	3001      	adds	r0, #1
 80047c0:	d0ad      	beq.n	800471e <_printf_i+0x162>
 80047c2:	6823      	ldr	r3, [r4, #0]
 80047c4:	079b      	lsls	r3, r3, #30
 80047c6:	d413      	bmi.n	80047f0 <_printf_i+0x234>
 80047c8:	68e0      	ldr	r0, [r4, #12]
 80047ca:	9b03      	ldr	r3, [sp, #12]
 80047cc:	4298      	cmp	r0, r3
 80047ce:	bfb8      	it	lt
 80047d0:	4618      	movlt	r0, r3
 80047d2:	e7a6      	b.n	8004722 <_printf_i+0x166>
 80047d4:	2301      	movs	r3, #1
 80047d6:	4632      	mov	r2, r6
 80047d8:	4649      	mov	r1, r9
 80047da:	4640      	mov	r0, r8
 80047dc:	47d0      	blx	sl
 80047de:	3001      	adds	r0, #1
 80047e0:	d09d      	beq.n	800471e <_printf_i+0x162>
 80047e2:	3501      	adds	r5, #1
 80047e4:	68e3      	ldr	r3, [r4, #12]
 80047e6:	9903      	ldr	r1, [sp, #12]
 80047e8:	1a5b      	subs	r3, r3, r1
 80047ea:	42ab      	cmp	r3, r5
 80047ec:	dcf2      	bgt.n	80047d4 <_printf_i+0x218>
 80047ee:	e7eb      	b.n	80047c8 <_printf_i+0x20c>
 80047f0:	2500      	movs	r5, #0
 80047f2:	f104 0619 	add.w	r6, r4, #25
 80047f6:	e7f5      	b.n	80047e4 <_printf_i+0x228>
 80047f8:	0800496f 	.word	0x0800496f
 80047fc:	08004980 	.word	0x08004980

08004800 <memmove>:
 8004800:	4288      	cmp	r0, r1
 8004802:	b510      	push	{r4, lr}
 8004804:	eb01 0402 	add.w	r4, r1, r2
 8004808:	d902      	bls.n	8004810 <memmove+0x10>
 800480a:	4284      	cmp	r4, r0
 800480c:	4623      	mov	r3, r4
 800480e:	d807      	bhi.n	8004820 <memmove+0x20>
 8004810:	1e43      	subs	r3, r0, #1
 8004812:	42a1      	cmp	r1, r4
 8004814:	d008      	beq.n	8004828 <memmove+0x28>
 8004816:	f811 2b01 	ldrb.w	r2, [r1], #1
 800481a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800481e:	e7f8      	b.n	8004812 <memmove+0x12>
 8004820:	4601      	mov	r1, r0
 8004822:	4402      	add	r2, r0
 8004824:	428a      	cmp	r2, r1
 8004826:	d100      	bne.n	800482a <memmove+0x2a>
 8004828:	bd10      	pop	{r4, pc}
 800482a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800482e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004832:	e7f7      	b.n	8004824 <memmove+0x24>

08004834 <_sbrk_r>:
 8004834:	b538      	push	{r3, r4, r5, lr}
 8004836:	2300      	movs	r3, #0
 8004838:	4d05      	ldr	r5, [pc, #20]	; (8004850 <_sbrk_r+0x1c>)
 800483a:	4604      	mov	r4, r0
 800483c:	4608      	mov	r0, r1
 800483e:	602b      	str	r3, [r5, #0]
 8004840:	f7fc f83c 	bl	80008bc <_sbrk>
 8004844:	1c43      	adds	r3, r0, #1
 8004846:	d102      	bne.n	800484e <_sbrk_r+0x1a>
 8004848:	682b      	ldr	r3, [r5, #0]
 800484a:	b103      	cbz	r3, 800484e <_sbrk_r+0x1a>
 800484c:	6023      	str	r3, [r4, #0]
 800484e:	bd38      	pop	{r3, r4, r5, pc}
 8004850:	2000030c 	.word	0x2000030c

08004854 <memchr>:
 8004854:	4603      	mov	r3, r0
 8004856:	b510      	push	{r4, lr}
 8004858:	b2c9      	uxtb	r1, r1
 800485a:	4402      	add	r2, r0
 800485c:	4293      	cmp	r3, r2
 800485e:	4618      	mov	r0, r3
 8004860:	d101      	bne.n	8004866 <memchr+0x12>
 8004862:	2000      	movs	r0, #0
 8004864:	e003      	b.n	800486e <memchr+0x1a>
 8004866:	7804      	ldrb	r4, [r0, #0]
 8004868:	3301      	adds	r3, #1
 800486a:	428c      	cmp	r4, r1
 800486c:	d1f6      	bne.n	800485c <memchr+0x8>
 800486e:	bd10      	pop	{r4, pc}

08004870 <memcpy>:
 8004870:	440a      	add	r2, r1
 8004872:	4291      	cmp	r1, r2
 8004874:	f100 33ff 	add.w	r3, r0, #4294967295
 8004878:	d100      	bne.n	800487c <memcpy+0xc>
 800487a:	4770      	bx	lr
 800487c:	b510      	push	{r4, lr}
 800487e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004882:	4291      	cmp	r1, r2
 8004884:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004888:	d1f9      	bne.n	800487e <memcpy+0xe>
 800488a:	bd10      	pop	{r4, pc}

0800488c <_realloc_r>:
 800488c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004890:	4680      	mov	r8, r0
 8004892:	4614      	mov	r4, r2
 8004894:	460e      	mov	r6, r1
 8004896:	b921      	cbnz	r1, 80048a2 <_realloc_r+0x16>
 8004898:	4611      	mov	r1, r2
 800489a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800489e:	f7ff bc37 	b.w	8004110 <_malloc_r>
 80048a2:	b92a      	cbnz	r2, 80048b0 <_realloc_r+0x24>
 80048a4:	f7ff fbcc 	bl	8004040 <_free_r>
 80048a8:	4625      	mov	r5, r4
 80048aa:	4628      	mov	r0, r5
 80048ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80048b0:	f000 f81b 	bl	80048ea <_malloc_usable_size_r>
 80048b4:	4284      	cmp	r4, r0
 80048b6:	4607      	mov	r7, r0
 80048b8:	d802      	bhi.n	80048c0 <_realloc_r+0x34>
 80048ba:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80048be:	d812      	bhi.n	80048e6 <_realloc_r+0x5a>
 80048c0:	4621      	mov	r1, r4
 80048c2:	4640      	mov	r0, r8
 80048c4:	f7ff fc24 	bl	8004110 <_malloc_r>
 80048c8:	4605      	mov	r5, r0
 80048ca:	2800      	cmp	r0, #0
 80048cc:	d0ed      	beq.n	80048aa <_realloc_r+0x1e>
 80048ce:	42bc      	cmp	r4, r7
 80048d0:	4622      	mov	r2, r4
 80048d2:	4631      	mov	r1, r6
 80048d4:	bf28      	it	cs
 80048d6:	463a      	movcs	r2, r7
 80048d8:	f7ff ffca 	bl	8004870 <memcpy>
 80048dc:	4631      	mov	r1, r6
 80048de:	4640      	mov	r0, r8
 80048e0:	f7ff fbae 	bl	8004040 <_free_r>
 80048e4:	e7e1      	b.n	80048aa <_realloc_r+0x1e>
 80048e6:	4635      	mov	r5, r6
 80048e8:	e7df      	b.n	80048aa <_realloc_r+0x1e>

080048ea <_malloc_usable_size_r>:
 80048ea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80048ee:	1f18      	subs	r0, r3, #4
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	bfbc      	itt	lt
 80048f4:	580b      	ldrlt	r3, [r1, r0]
 80048f6:	18c0      	addlt	r0, r0, r3
 80048f8:	4770      	bx	lr
	...

080048fc <_init>:
 80048fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048fe:	bf00      	nop
 8004900:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004902:	bc08      	pop	{r3}
 8004904:	469e      	mov	lr, r3
 8004906:	4770      	bx	lr

08004908 <_fini>:
 8004908:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800490a:	bf00      	nop
 800490c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800490e:	bc08      	pop	{r3}
 8004910:	469e      	mov	lr, r3
 8004912:	4770      	bx	lr
